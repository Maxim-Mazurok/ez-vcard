"use strict";
// This file was generated by ts-java using the following options:
// classpath:
//   ~/.m2/repository/com/googlecode/ez-vcard/ez-vcard/0.10.6/ez-vcard-0.10.6.jar
//   ~/.m2/repository/com/github/mangstadt/vinnie/2.0.2/vinnie-2.0.2.jar
//   ~/.m2/repository/org/jsoup/jsoup/1.13.1/jsoup-1.13.1.jar
//   ~/.m2/repository/org/freemarker/freemarker/2.3.30/freemarker-2.3.30.jar
//   ~/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.10.3/jackson-core-2.10.3.jar
// classes:
//   ezvcard.Ezvcard
//   ezvcard.parameter.AddressType
//   ezvcard.parameter.ImageType
//   ezvcard.parameter.TelephoneType
//   ezvcard.property.Address
//   ezvcard.property.Birthday
//   ezvcard.property.Photo
//   ezvcard.property.Revision
//   ezvcard.property.StructuredName
//   ezvcard.property.Timezone
//   ezvcard.property.Uid
//   ezvcard.VCard
//   ezvcard.VCardVersion
//   ezvcard.io.chain.ChainingTextWriter
//   java.util.List
//   java.lang.reflect.Field
//   java.util.TimeZone
//   java.util.GregorianCalendar
//   java.util.Calendar
//   java.lang.Integer
//   java.io.File
// packages:
//   ezvcard.*
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Java = void 0;
const java_1 = __importDefault(require("java"));
const lodash_1 = __importDefault(require("lodash"));
const node_java_maven_1 = __importDefault(require("node-java-maven"));
java_1.default.asyncOptions = {
    syncSuffix: '',
    asyncSuffix: 'A',
    promiseSuffix: 'P',
    promisify: require('util').promisify,
};
const mvnInit = async () => new Promise((resolve, reject) => {
    node_java_maven_1.default((err, mvnResults) => {
        if (err) {
            console.error('could not resolve maven dependencies', err);
            reject(err);
        }
        mvnResults.classpath.forEach(c => {
            java_1.default.classpath.push(c);
        });
        resolve();
    });
});
const beforeJvm = async () => {
    try {
        await mvnInit();
    }
    catch (e) {
        console.log(e);
    }
};
java_1.default.registerClientP(beforeJvm);
var Java;
(function (Java) {
    'use strict';
    function getJava() {
        return java_1.default;
    }
    Java.getJava = getJava;
    function ensureJvm() {
        return java_1.default.ensureJvm();
    }
    Java.ensureJvm = ensureJvm;
    // Return the fully qualified class path for a class name.
    // Returns undefined if the className is ambiguous or not present in the configured classes.
    function fullyQualifiedName(className) {
        var shortToLongMap = {
            Ezvcard: 'ezvcard.Ezvcard',
            ChainingTextWriter: 'ezvcard.io.chain.ChainingTextWriter',
            Messages: 'ezvcard.Messages',
            AddressType: 'ezvcard.parameter.AddressType',
            ImageType: 'ezvcard.parameter.ImageType',
            TelephoneType: 'ezvcard.parameter.TelephoneType',
            Address: 'ezvcard.property.Address',
            Birthday: 'ezvcard.property.Birthday',
            Photo: 'ezvcard.property.Photo',
            Revision: 'ezvcard.property.Revision',
            StructuredName: 'ezvcard.property.StructuredName',
            Timezone: 'ezvcard.property.Timezone',
            Uid: 'ezvcard.property.Uid',
            SupportedVersions: 'ezvcard.SupportedVersions',
            ValidationWarning: 'ezvcard.ValidationWarning',
            ValidationWarnings: 'ezvcard.ValidationWarnings',
            VCard: 'ezvcard.VCard',
            VCardDataType: 'ezvcard.VCardDataType',
            VCardVersion: 'ezvcard.VCardVersion',
            File: 'java.io.File',
            Integer: 'java.lang.Integer',
            Object: 'java.lang.Object',
            Field: 'java.lang.reflect.Field',
            String: 'java.lang.String',
            Calendar: 'java.util.Calendar',
            GregorianCalendar: 'java.util.GregorianCalendar',
            List: 'java.util.List',
            TimeZone: 'java.util.TimeZone',
        };
        return shortToLongMap[className];
    }
    Java.fullyQualifiedName = fullyQualifiedName;
    function importClass(className) {
        var fullName = fullyQualifiedName(className) || className;
        return java_1.default.import(fullName);
    }
    Java.importClass = importClass;
    function asInstanceOf(obj, className) {
        var fullName = fullyQualifiedName(className) || className;
        if (java_1.default.instanceOf(obj, fullName)) {
            return obj;
        }
        else {
            throw new Error('asInstanceOf fails, obj is not a ' + fullName);
        }
    }
    Java.asInstanceOf = asInstanceOf;
    // Returns true if javaObject is an instance of the named class, which may be a short className.
    // Returns false if javaObject is not an instance of the named class.
    // Throws an exception if the named class does not exist, or is an ambiguous short name.
    function instanceOf(javaObject, className) {
        var fullName = fullyQualifiedName(className) || className;
        return (smellsLikeJavaObject(javaObject) && java_1.default.instanceOf(javaObject, fullName));
    }
    Java.instanceOf = instanceOf;
    function newInstanceA(className, ...args) {
        var fullName = fullyQualifiedName(className) || className;
        return java_1.default.newInstance.apply(java_1.default, [fullName, ...args]);
    }
    Java.newInstanceA = newInstanceA;
    function newInstance(className, ...args) {
        var fullName = fullyQualifiedName(className) || className;
        return java_1.default.newInstanceSync.apply(java_1.default, [fullName, ...args]);
    }
    Java.newInstance = newInstance;
    function newInstanceP(className, ...args) {
        var fullName = fullyQualifiedName(className) || className;
        return java_1.default.newInstanceP.apply(java_1.default, [fullName, ...args]);
    }
    Java.newInstanceP = newInstanceP;
    function newArray(className, arg) {
        var fullName = fullyQualifiedName(className) || className;
        return java_1.default.newArray(fullName, arg);
    }
    Java.newArray = newArray;
    // #### `function smellsLikeJavaObject(e: any)`
    // Returns true if the obj 'smells' like a Java object.
    // This is a light-weight test that will return false when `e` is clearly not a Java object,
    // but it may have false positives. To be certain, use `isJavaObject(e)` or `instanceOf(e, classname)` instead.
    function smellsLikeJavaObject(e) {
        return lodash_1.default.isObject(e) && !lodash_1.default.isArray(e);
    }
    // #### `function isJavaObject(e: any)`
    // Returns true if the obj is a Java object.
    // Useful for determining the runtime type of object_t returned by many java methods.
    function isJavaObject(e) {
        return smellsLikeJavaObject(e) && java_1.default.instanceOf(e, 'java.lang.Object');
    }
    Java.isJavaObject = isJavaObject;
})(Java = exports.Java || (exports.Java = {})); // module Java
//# sourceMappingURL=tsJavaModule.js.map