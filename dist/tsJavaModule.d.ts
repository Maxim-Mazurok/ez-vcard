import _java from 'java';
export declare module Java {
    type NodeJavaAPI = typeof _java;
    function getJava(): NodeJavaAPI;
    function ensureJvm(): Promise<void>;
    function fullyQualifiedName(className: string): string;
    function importClass(className: 'Ezvcard'): Java.ezvcard.Ezvcard.Static;
    function importClass(className: 'ChainingTextWriter'): Java.ezvcard.io.chain.ChainingTextWriter.Static;
    function importClass(className: 'Messages'): Java.ezvcard.Messages.Static;
    function importClass(className: 'AddressType'): Java.ezvcard.parameter.AddressType.Static;
    function importClass(className: 'ImageType'): Java.ezvcard.parameter.ImageType.Static;
    function importClass(className: 'TelephoneType'): Java.ezvcard.parameter.TelephoneType.Static;
    function importClass(className: 'Address'): Java.ezvcard.property.Address.Static;
    function importClass(className: 'Birthday'): Java.ezvcard.property.Birthday.Static;
    function importClass(className: 'Photo'): Java.ezvcard.property.Photo.Static;
    function importClass(className: 'Revision'): Java.ezvcard.property.Revision.Static;
    function importClass(className: 'StructuredName'): Java.ezvcard.property.StructuredName.Static;
    function importClass(className: 'Timezone'): Java.ezvcard.property.Timezone.Static;
    function importClass(className: 'Uid'): Java.ezvcard.property.Uid.Static;
    function importClass(className: 'SupportedVersions'): Java.ezvcard.SupportedVersions.Static;
    function importClass(className: 'ValidationWarning'): Java.ezvcard.ValidationWarning.Static;
    function importClass(className: 'ValidationWarnings'): Java.ezvcard.ValidationWarnings.Static;
    function importClass(className: 'VCard'): Java.ezvcard.VCard.Static;
    function importClass(className: 'VCardDataType'): Java.ezvcard.VCardDataType.Static;
    function importClass(className: 'VCardVersion'): Java.ezvcard.VCardVersion.Static;
    function importClass(className: 'File'): Java.java.io.File.Static;
    function importClass(className: 'Integer'): Java.java.lang.Integer.Static;
    function importClass(className: 'Object'): Java.java.lang.Object.Static;
    function importClass(className: 'Field'): Java.java.lang.reflect.Field.Static;
    function importClass(className: 'String'): Java.java.lang.String.Static;
    function importClass(className: 'Calendar'): Java.java.util.Calendar.Static;
    function importClass(className: 'GregorianCalendar'): Java.java.util.GregorianCalendar.Static;
    function importClass(className: 'List'): Java.java.util.List.Static;
    function importClass(className: 'TimeZone'): Java.java.util.TimeZone.Static;
    function importClass(className: 'ezvcard.Ezvcard'): Java.ezvcard.Ezvcard.Static;
    function importClass(className: 'ezvcard.io.chain.ChainingTextWriter'): Java.ezvcard.io.chain.ChainingTextWriter.Static;
    function importClass(className: 'ezvcard.Messages'): Java.ezvcard.Messages.Static;
    function importClass(className: 'ezvcard.parameter.AddressType'): Java.ezvcard.parameter.AddressType.Static;
    function importClass(className: 'ezvcard.parameter.ImageType'): Java.ezvcard.parameter.ImageType.Static;
    function importClass(className: 'ezvcard.parameter.TelephoneType'): Java.ezvcard.parameter.TelephoneType.Static;
    function importClass(className: 'ezvcard.property.Address'): Java.ezvcard.property.Address.Static;
    function importClass(className: 'ezvcard.property.Birthday'): Java.ezvcard.property.Birthday.Static;
    function importClass(className: 'ezvcard.property.Photo'): Java.ezvcard.property.Photo.Static;
    function importClass(className: 'ezvcard.property.Revision'): Java.ezvcard.property.Revision.Static;
    function importClass(className: 'ezvcard.property.StructuredName'): Java.ezvcard.property.StructuredName.Static;
    function importClass(className: 'ezvcard.property.Timezone'): Java.ezvcard.property.Timezone.Static;
    function importClass(className: 'ezvcard.property.Uid'): Java.ezvcard.property.Uid.Static;
    function importClass(className: 'ezvcard.SupportedVersions'): Java.ezvcard.SupportedVersions.Static;
    function importClass(className: 'ezvcard.ValidationWarning'): Java.ezvcard.ValidationWarning.Static;
    function importClass(className: 'ezvcard.ValidationWarnings'): Java.ezvcard.ValidationWarnings.Static;
    function importClass(className: 'ezvcard.VCard'): Java.ezvcard.VCard.Static;
    function importClass(className: 'ezvcard.VCardDataType'): Java.ezvcard.VCardDataType.Static;
    function importClass(className: 'ezvcard.VCardVersion'): Java.ezvcard.VCardVersion.Static;
    function importClass(className: 'java.io.File'): Java.java.io.File.Static;
    function importClass(className: 'java.lang.Integer'): Java.java.lang.Integer.Static;
    function importClass(className: 'java.lang.Object'): Java.java.lang.Object.Static;
    function importClass(className: 'java.lang.reflect.Field'): Java.java.lang.reflect.Field.Static;
    function importClass(className: 'java.lang.String'): Java.java.lang.String.Static;
    function importClass(className: 'java.util.Calendar'): Java.java.util.Calendar.Static;
    function importClass(className: 'java.util.GregorianCalendar'): Java.java.util.GregorianCalendar.Static;
    function importClass(className: 'java.util.List'): Java.java.util.List.Static;
    function importClass(className: 'java.util.TimeZone'): Java.java.util.TimeZone.Static;
    function importClass(className: string): any;
    function asInstanceOf(obj: any, className: 'Ezvcard'): Java.ezvcard.Ezvcard;
    function asInstanceOf(obj: any, className: 'ChainingTextWriter'): Java.ezvcard.io.chain.ChainingTextWriter;
    function asInstanceOf(obj: any, className: 'Messages'): Java.ezvcard.Messages;
    function asInstanceOf(obj: any, className: 'AddressType'): Java.ezvcard.parameter.AddressType;
    function asInstanceOf(obj: any, className: 'ImageType'): Java.ezvcard.parameter.ImageType;
    function asInstanceOf(obj: any, className: 'TelephoneType'): Java.ezvcard.parameter.TelephoneType;
    function asInstanceOf(obj: any, className: 'Address'): Java.ezvcard.property.Address;
    function asInstanceOf(obj: any, className: 'Birthday'): Java.ezvcard.property.Birthday;
    function asInstanceOf(obj: any, className: 'Photo'): Java.ezvcard.property.Photo;
    function asInstanceOf(obj: any, className: 'Revision'): Java.ezvcard.property.Revision;
    function asInstanceOf(obj: any, className: 'StructuredName'): Java.ezvcard.property.StructuredName;
    function asInstanceOf(obj: any, className: 'Timezone'): Java.ezvcard.property.Timezone;
    function asInstanceOf(obj: any, className: 'Uid'): Java.ezvcard.property.Uid;
    function asInstanceOf(obj: any, className: 'SupportedVersions'): Java.ezvcard.SupportedVersions;
    function asInstanceOf(obj: any, className: 'ValidationWarning'): Java.ezvcard.ValidationWarning;
    function asInstanceOf(obj: any, className: 'ValidationWarnings'): Java.ezvcard.ValidationWarnings;
    function asInstanceOf(obj: any, className: 'VCard'): Java.ezvcard.VCard;
    function asInstanceOf(obj: any, className: 'VCardDataType'): Java.ezvcard.VCardDataType;
    function asInstanceOf(obj: any, className: 'VCardVersion'): Java.ezvcard.VCardVersion;
    function asInstanceOf(obj: any, className: 'File'): Java.java.io.File;
    function asInstanceOf(obj: any, className: 'Integer'): Java.java.lang.Integer;
    function asInstanceOf(obj: any, className: 'Object'): Java.java.lang.Object;
    function asInstanceOf(obj: any, className: 'Field'): Java.java.lang.reflect.Field;
    function asInstanceOf(obj: any, className: 'String'): Java.java.lang.String;
    function asInstanceOf(obj: any, className: 'Calendar'): Java.java.util.Calendar;
    function asInstanceOf(obj: any, className: 'GregorianCalendar'): Java.java.util.GregorianCalendar;
    function asInstanceOf(obj: any, className: 'List'): Java.java.util.List;
    function asInstanceOf(obj: any, className: 'TimeZone'): Java.java.util.TimeZone;
    function asInstanceOf(obj: any, className: 'ezvcard.Ezvcard'): Java.ezvcard.Ezvcard;
    function asInstanceOf(obj: any, className: 'ezvcard.io.chain.ChainingTextWriter'): Java.ezvcard.io.chain.ChainingTextWriter;
    function asInstanceOf(obj: any, className: 'ezvcard.Messages'): Java.ezvcard.Messages;
    function asInstanceOf(obj: any, className: 'ezvcard.parameter.AddressType'): Java.ezvcard.parameter.AddressType;
    function asInstanceOf(obj: any, className: 'ezvcard.parameter.ImageType'): Java.ezvcard.parameter.ImageType;
    function asInstanceOf(obj: any, className: 'ezvcard.parameter.TelephoneType'): Java.ezvcard.parameter.TelephoneType;
    function asInstanceOf(obj: any, className: 'ezvcard.property.Address'): Java.ezvcard.property.Address;
    function asInstanceOf(obj: any, className: 'ezvcard.property.Birthday'): Java.ezvcard.property.Birthday;
    function asInstanceOf(obj: any, className: 'ezvcard.property.Photo'): Java.ezvcard.property.Photo;
    function asInstanceOf(obj: any, className: 'ezvcard.property.Revision'): Java.ezvcard.property.Revision;
    function asInstanceOf(obj: any, className: 'ezvcard.property.StructuredName'): Java.ezvcard.property.StructuredName;
    function asInstanceOf(obj: any, className: 'ezvcard.property.Timezone'): Java.ezvcard.property.Timezone;
    function asInstanceOf(obj: any, className: 'ezvcard.property.Uid'): Java.ezvcard.property.Uid;
    function asInstanceOf(obj: any, className: 'ezvcard.SupportedVersions'): Java.ezvcard.SupportedVersions;
    function asInstanceOf(obj: any, className: 'ezvcard.ValidationWarning'): Java.ezvcard.ValidationWarning;
    function asInstanceOf(obj: any, className: 'ezvcard.ValidationWarnings'): Java.ezvcard.ValidationWarnings;
    function asInstanceOf(obj: any, className: 'ezvcard.VCard'): Java.ezvcard.VCard;
    function asInstanceOf(obj: any, className: 'ezvcard.VCardDataType'): Java.ezvcard.VCardDataType;
    function asInstanceOf(obj: any, className: 'ezvcard.VCardVersion'): Java.ezvcard.VCardVersion;
    function asInstanceOf(obj: any, className: 'java.io.File'): Java.java.io.File;
    function asInstanceOf(obj: any, className: 'java.lang.Integer'): Java.java.lang.Integer;
    function asInstanceOf(obj: any, className: 'java.lang.Object'): Java.java.lang.Object;
    function asInstanceOf(obj: any, className: 'java.lang.reflect.Field'): Java.java.lang.reflect.Field;
    function asInstanceOf(obj: any, className: 'java.lang.String'): Java.java.lang.String;
    function asInstanceOf(obj: any, className: 'java.util.Calendar'): Java.java.util.Calendar;
    function asInstanceOf(obj: any, className: 'java.util.GregorianCalendar'): Java.java.util.GregorianCalendar;
    function asInstanceOf(obj: any, className: 'java.util.List'): Java.java.util.List;
    function asInstanceOf(obj: any, className: 'java.util.TimeZone'): Java.java.util.TimeZone;
    function asInstanceOf(obj: any, className: string): any;
    interface Callback<T> {
        (err?: Error, result?: T): void;
    }
    function instanceOf(javaObject: any, className: string): boolean;
    function newInstanceA(className: 'ChainingTextWriter', arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
    function newInstanceA(className: 'Address', arg0: Java.Address, cb: Callback<Java.Address>): void;
    function newInstanceA(className: 'Address', cb: Callback<Java.Address>): void;
    function newInstanceA(className: 'Birthday', arg0: object_t, arg1: object_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'Birthday', arg0: Java.Birthday, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'Birthday', arg0: object_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'Birthday', arg0: string_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'Birthday', arg0: object_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'Photo', arg0: object_t, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'Photo', arg0: string_t, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'Photo', arg0: Java.File, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'Photo', arg0: object_array_t, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'Photo', arg0: Java.Photo, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'Revision', arg0: Java.Revision, cb: Callback<Java.Revision>): void;
    function newInstanceA(className: 'Revision', arg0: object_t, cb: Callback<Java.Revision>): void;
    function newInstanceA(className: 'StructuredName', arg0: Java.StructuredName, cb: Callback<Java.StructuredName>): void;
    function newInstanceA(className: 'StructuredName', cb: Callback<Java.StructuredName>): void;
    function newInstanceA(className: 'Timezone', arg0: object_t, arg1: string_t, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'Timezone', arg0: Java.Timezone, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'Timezone', arg0: object_t, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'Timezone', arg0: Java.TimeZone, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'Timezone', arg0: string_t, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'Uid', arg0: Java.Uid, cb: Callback<Java.Uid>): void;
    function newInstanceA(className: 'Uid', arg0: string_t, cb: Callback<Java.Uid>): void;
    function newInstanceA(className: 'ValidationWarning', arg0: integer_t, arg1: object_array_t, cb: Callback<Java.ValidationWarning>): void;
    function newInstanceA(className: 'ValidationWarning', arg0: string_t, cb: Callback<Java.ValidationWarning>): void;
    function newInstanceA(className: 'ValidationWarnings', cb: Callback<Java.ValidationWarnings>): void;
    function newInstanceA(className: 'VCard', arg0: Java.VCardVersion, cb: Callback<Java.VCard>): void;
    function newInstanceA(className: 'VCard', arg0: Java.VCard, cb: Callback<Java.VCard>): void;
    function newInstanceA(className: 'VCard', cb: Callback<Java.VCard>): void;
    function newInstanceA(className: 'File', arg0: string_t, arg1: string_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'File', arg0: Java.File, arg1: string_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'File', arg0: string_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'File', arg0: object_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'Integer', arg0: string_t, cb: Callback<number>): void;
    function newInstanceA(className: 'Integer', arg0: integer_t, cb: Callback<number>): void;
    function newInstanceA(className: 'Object', cb: Callback<object_t>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: string_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, arg1: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: string_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', arg0: object_array_t, cb: Callback<string>): void;
    function newInstanceA(className: 'String', cb: Callback<string>): void;
    function newInstanceA(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'GregorianCalendar', arg0: Java.TimeZone, arg1: object_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'GregorianCalendar', arg0: Java.TimeZone, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'GregorianCalendar', arg0: object_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'GregorianCalendar', cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'TimeZone', cb: Callback<Java.TimeZone>): void;
    function newInstanceA(className: 'ezvcard.io.chain.ChainingTextWriter', arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
    function newInstanceA(className: 'ezvcard.property.Address', arg0: Java.Address, cb: Callback<Java.Address>): void;
    function newInstanceA(className: 'ezvcard.property.Address', cb: Callback<Java.Address>): void;
    function newInstanceA(className: 'ezvcard.property.Birthday', arg0: object_t, arg1: object_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'ezvcard.property.Birthday', arg0: Java.Birthday, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'ezvcard.property.Birthday', arg0: object_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'ezvcard.property.Birthday', arg0: string_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'ezvcard.property.Birthday', arg0: object_t, cb: Callback<Java.Birthday>): void;
    function newInstanceA(className: 'ezvcard.property.Photo', arg0: object_t, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'ezvcard.property.Photo', arg0: string_t, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'ezvcard.property.Photo', arg0: Java.File, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'ezvcard.property.Photo', arg0: object_array_t, arg1: Java.ImageType, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'ezvcard.property.Photo', arg0: Java.Photo, cb: Callback<Java.Photo>): void;
    function newInstanceA(className: 'ezvcard.property.Revision', arg0: Java.Revision, cb: Callback<Java.Revision>): void;
    function newInstanceA(className: 'ezvcard.property.Revision', arg0: object_t, cb: Callback<Java.Revision>): void;
    function newInstanceA(className: 'ezvcard.property.StructuredName', arg0: Java.StructuredName, cb: Callback<Java.StructuredName>): void;
    function newInstanceA(className: 'ezvcard.property.StructuredName', cb: Callback<Java.StructuredName>): void;
    function newInstanceA(className: 'ezvcard.property.Timezone', arg0: object_t, arg1: string_t, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'ezvcard.property.Timezone', arg0: Java.Timezone, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'ezvcard.property.Timezone', arg0: object_t, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'ezvcard.property.Timezone', arg0: Java.TimeZone, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'ezvcard.property.Timezone', arg0: string_t, cb: Callback<Java.Timezone>): void;
    function newInstanceA(className: 'ezvcard.property.Uid', arg0: Java.Uid, cb: Callback<Java.Uid>): void;
    function newInstanceA(className: 'ezvcard.property.Uid', arg0: string_t, cb: Callback<Java.Uid>): void;
    function newInstanceA(className: 'ezvcard.ValidationWarning', arg0: integer_t, arg1: object_array_t, cb: Callback<Java.ValidationWarning>): void;
    function newInstanceA(className: 'ezvcard.ValidationWarning', arg0: string_t, cb: Callback<Java.ValidationWarning>): void;
    function newInstanceA(className: 'ezvcard.ValidationWarnings', cb: Callback<Java.ValidationWarnings>): void;
    function newInstanceA(className: 'ezvcard.VCard', arg0: Java.VCardVersion, cb: Callback<Java.VCard>): void;
    function newInstanceA(className: 'ezvcard.VCard', arg0: Java.VCard, cb: Callback<Java.VCard>): void;
    function newInstanceA(className: 'ezvcard.VCard', cb: Callback<Java.VCard>): void;
    function newInstanceA(className: 'java.io.File', arg0: string_t, arg1: string_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'java.io.File', arg0: Java.File, arg1: string_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'java.io.File', arg0: string_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'java.io.File', arg0: object_t, cb: Callback<Java.File>): void;
    function newInstanceA(className: 'java.lang.Integer', arg0: string_t, cb: Callback<number>): void;
    function newInstanceA(className: 'java.lang.Integer', arg0: integer_t, cb: Callback<number>): void;
    function newInstanceA(className: 'java.lang.Object', cb: Callback<object_t>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: string_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: string_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
    function newInstanceA(className: 'java.lang.String', cb: Callback<string>): void;
    function newInstanceA(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, arg1: object_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'java.util.GregorianCalendar', arg0: object_t, cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'java.util.GregorianCalendar', cb: Callback<Java.GregorianCalendar>): void;
    function newInstanceA(className: 'java.util.TimeZone', cb: Callback<Java.TimeZone>): void;
    function newInstanceA(className: string, ...args: any[]): void;
    function newInstance(className: 'ChainingTextWriter', arg0: object_t): Java.ChainingTextWriter;
    function newInstance(className: 'Address', arg0: Java.Address): Java.Address;
    function newInstance(className: 'Address'): Java.Address;
    function newInstance(className: 'Birthday', arg0: object_t, arg1: object_t): Java.Birthday;
    function newInstance(className: 'Birthday', arg0: Java.Birthday): Java.Birthday;
    function newInstance(className: 'Birthday', arg0: object_t): Java.Birthday;
    function newInstance(className: 'Birthday', arg0: string_t): Java.Birthday;
    function newInstance(className: 'Birthday', arg0: object_t): Java.Birthday;
    function newInstance(className: 'Photo', arg0: object_t, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'Photo', arg0: string_t, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'Photo', arg0: Java.File, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'Photo', arg0: object_array_t, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'Photo', arg0: Java.Photo): Java.Photo;
    function newInstance(className: 'Revision', arg0: Java.Revision): Java.Revision;
    function newInstance(className: 'Revision', arg0: object_t): Java.Revision;
    function newInstance(className: 'StructuredName', arg0: Java.StructuredName): Java.StructuredName;
    function newInstance(className: 'StructuredName'): Java.StructuredName;
    function newInstance(className: 'Timezone', arg0: object_t, arg1: string_t): Java.Timezone;
    function newInstance(className: 'Timezone', arg0: Java.Timezone): Java.Timezone;
    function newInstance(className: 'Timezone', arg0: object_t): Java.Timezone;
    function newInstance(className: 'Timezone', arg0: Java.TimeZone): Java.Timezone;
    function newInstance(className: 'Timezone', arg0: string_t): Java.Timezone;
    function newInstance(className: 'Uid', arg0: Java.Uid): Java.Uid;
    function newInstance(className: 'Uid', arg0: string_t): Java.Uid;
    function newInstance(className: 'ValidationWarning', arg0: integer_t, ...arg1: object_t[]): Java.ValidationWarning;
    function newInstance(className: 'ValidationWarning', arg0: string_t): Java.ValidationWarning;
    function newInstance(className: 'ValidationWarnings'): Java.ValidationWarnings;
    function newInstance(className: 'VCard', arg0: Java.VCardVersion): Java.VCard;
    function newInstance(className: 'VCard', arg0: Java.VCard): Java.VCard;
    function newInstance(className: 'VCard'): Java.VCard;
    function newInstance(className: 'File', arg0: string_t, arg1: string_t): Java.File;
    function newInstance(className: 'File', arg0: Java.File, arg1: string_t): Java.File;
    function newInstance(className: 'File', arg0: string_t): Java.File;
    function newInstance(className: 'File', arg0: object_t): Java.File;
    function newInstance(className: 'Integer', arg0: string_t): number;
    function newInstance(className: 'Integer', arg0: integer_t): number;
    function newInstance(className: 'Object'): object_t;
    function newInstance(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): string;
    function newInstance(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): string;
    function newInstance(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
    function newInstance(className: 'String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
    function newInstance(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    function newInstance(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    function newInstance(className: 'String', arg0: object_array_t, arg1: object_t): string;
    function newInstance(className: 'String', arg0: object_array_t, arg1: string_t): string;
    function newInstance(className: 'String', arg0: object_array_t, arg1: integer_t): string;
    function newInstance(className: 'String', arg0: object_t): string;
    function newInstance(className: 'String', arg0: object_t): string;
    function newInstance(className: 'String', arg0: string_t): string;
    function newInstance(className: 'String', arg0: object_array_t): string;
    function newInstance(className: 'String', arg0: object_array_t): string;
    function newInstance(className: 'String'): string;
    function newInstance(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Java.GregorianCalendar;
    function newInstance(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Java.GregorianCalendar;
    function newInstance(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t): Java.GregorianCalendar;
    function newInstance(className: 'GregorianCalendar', arg0: Java.TimeZone, arg1: object_t): Java.GregorianCalendar;
    function newInstance(className: 'GregorianCalendar', arg0: Java.TimeZone): Java.GregorianCalendar;
    function newInstance(className: 'GregorianCalendar', arg0: object_t): Java.GregorianCalendar;
    function newInstance(className: 'GregorianCalendar'): Java.GregorianCalendar;
    function newInstance(className: 'TimeZone'): Java.TimeZone;
    function newInstance(className: 'ezvcard.io.chain.ChainingTextWriter', arg0: object_t): Java.ChainingTextWriter;
    function newInstance(className: 'ezvcard.property.Address', arg0: Java.Address): Java.Address;
    function newInstance(className: 'ezvcard.property.Address'): Java.Address;
    function newInstance(className: 'ezvcard.property.Birthday', arg0: object_t, arg1: object_t): Java.Birthday;
    function newInstance(className: 'ezvcard.property.Birthday', arg0: Java.Birthday): Java.Birthday;
    function newInstance(className: 'ezvcard.property.Birthday', arg0: object_t): Java.Birthday;
    function newInstance(className: 'ezvcard.property.Birthday', arg0: string_t): Java.Birthday;
    function newInstance(className: 'ezvcard.property.Birthday', arg0: object_t): Java.Birthday;
    function newInstance(className: 'ezvcard.property.Photo', arg0: object_t, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'ezvcard.property.Photo', arg0: string_t, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'ezvcard.property.Photo', arg0: Java.File, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'ezvcard.property.Photo', arg0: object_array_t, arg1: Java.ImageType): Java.Photo;
    function newInstance(className: 'ezvcard.property.Photo', arg0: Java.Photo): Java.Photo;
    function newInstance(className: 'ezvcard.property.Revision', arg0: Java.Revision): Java.Revision;
    function newInstance(className: 'ezvcard.property.Revision', arg0: object_t): Java.Revision;
    function newInstance(className: 'ezvcard.property.StructuredName', arg0: Java.StructuredName): Java.StructuredName;
    function newInstance(className: 'ezvcard.property.StructuredName'): Java.StructuredName;
    function newInstance(className: 'ezvcard.property.Timezone', arg0: object_t, arg1: string_t): Java.Timezone;
    function newInstance(className: 'ezvcard.property.Timezone', arg0: Java.Timezone): Java.Timezone;
    function newInstance(className: 'ezvcard.property.Timezone', arg0: object_t): Java.Timezone;
    function newInstance(className: 'ezvcard.property.Timezone', arg0: Java.TimeZone): Java.Timezone;
    function newInstance(className: 'ezvcard.property.Timezone', arg0: string_t): Java.Timezone;
    function newInstance(className: 'ezvcard.property.Uid', arg0: Java.Uid): Java.Uid;
    function newInstance(className: 'ezvcard.property.Uid', arg0: string_t): Java.Uid;
    function newInstance(className: 'ezvcard.ValidationWarning', arg0: integer_t, ...arg1: object_t[]): Java.ValidationWarning;
    function newInstance(className: 'ezvcard.ValidationWarning', arg0: string_t): Java.ValidationWarning;
    function newInstance(className: 'ezvcard.ValidationWarnings'): Java.ValidationWarnings;
    function newInstance(className: 'ezvcard.VCard', arg0: Java.VCardVersion): Java.VCard;
    function newInstance(className: 'ezvcard.VCard', arg0: Java.VCard): Java.VCard;
    function newInstance(className: 'ezvcard.VCard'): Java.VCard;
    function newInstance(className: 'java.io.File', arg0: string_t, arg1: string_t): Java.File;
    function newInstance(className: 'java.io.File', arg0: Java.File, arg1: string_t): Java.File;
    function newInstance(className: 'java.io.File', arg0: string_t): Java.File;
    function newInstance(className: 'java.io.File', arg0: object_t): Java.File;
    function newInstance(className: 'java.lang.Integer', arg0: string_t): number;
    function newInstance(className: 'java.lang.Integer', arg0: integer_t): number;
    function newInstance(className: 'java.lang.Object'): object_t;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
    function newInstance(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: object_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_t): string;
    function newInstance(className: 'java.lang.String', arg0: string_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t): string;
    function newInstance(className: 'java.lang.String', arg0: object_array_t): string;
    function newInstance(className: 'java.lang.String'): string;
    function newInstance(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Java.GregorianCalendar;
    function newInstance(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Java.GregorianCalendar;
    function newInstance(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t): Java.GregorianCalendar;
    function newInstance(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, arg1: object_t): Java.GregorianCalendar;
    function newInstance(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone): Java.GregorianCalendar;
    function newInstance(className: 'java.util.GregorianCalendar', arg0: object_t): Java.GregorianCalendar;
    function newInstance(className: 'java.util.GregorianCalendar'): Java.GregorianCalendar;
    function newInstance(className: 'java.util.TimeZone'): Java.TimeZone;
    function newInstance(className: string, ...args: any[]): any;
    function newInstanceP(className: 'ChainingTextWriter', arg0: object_t): Promise<Java.ChainingTextWriter>;
    function newInstanceP(className: 'Address', arg0: Java.Address): Promise<Java.Address>;
    function newInstanceP(className: 'Address'): Promise<Java.Address>;
    function newInstanceP(className: 'Birthday', arg0: object_t, arg1: object_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'Birthday', arg0: Java.Birthday): Promise<Java.Birthday>;
    function newInstanceP(className: 'Birthday', arg0: object_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'Birthday', arg0: string_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'Birthday', arg0: object_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'Photo', arg0: object_t, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'Photo', arg0: string_t, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'Photo', arg0: Java.File, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'Photo', arg0: object_array_t, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'Photo', arg0: Java.Photo): Promise<Java.Photo>;
    function newInstanceP(className: 'Revision', arg0: Java.Revision): Promise<Java.Revision>;
    function newInstanceP(className: 'Revision', arg0: object_t): Promise<Java.Revision>;
    function newInstanceP(className: 'StructuredName', arg0: Java.StructuredName): Promise<Java.StructuredName>;
    function newInstanceP(className: 'StructuredName'): Promise<Java.StructuredName>;
    function newInstanceP(className: 'Timezone', arg0: object_t, arg1: string_t): Promise<Java.Timezone>;
    function newInstanceP(className: 'Timezone', arg0: Java.Timezone): Promise<Java.Timezone>;
    function newInstanceP(className: 'Timezone', arg0: object_t): Promise<Java.Timezone>;
    function newInstanceP(className: 'Timezone', arg0: Java.TimeZone): Promise<Java.Timezone>;
    function newInstanceP(className: 'Timezone', arg0: string_t): Promise<Java.Timezone>;
    function newInstanceP(className: 'Uid', arg0: Java.Uid): Promise<Java.Uid>;
    function newInstanceP(className: 'Uid', arg0: string_t): Promise<Java.Uid>;
    function newInstanceP(className: 'ValidationWarning', arg0: integer_t, ...arg1: object_t[]): Promise<Java.ValidationWarning>;
    function newInstanceP(className: 'ValidationWarning', arg0: string_t): Promise<Java.ValidationWarning>;
    function newInstanceP(className: 'ValidationWarnings'): Promise<Java.ValidationWarnings>;
    function newInstanceP(className: 'VCard', arg0: Java.VCardVersion): Promise<Java.VCard>;
    function newInstanceP(className: 'VCard', arg0: Java.VCard): Promise<Java.VCard>;
    function newInstanceP(className: 'VCard'): Promise<Java.VCard>;
    function newInstanceP(className: 'File', arg0: string_t, arg1: string_t): Promise<Java.File>;
    function newInstanceP(className: 'File', arg0: Java.File, arg1: string_t): Promise<Java.File>;
    function newInstanceP(className: 'File', arg0: string_t): Promise<Java.File>;
    function newInstanceP(className: 'File', arg0: object_t): Promise<Java.File>;
    function newInstanceP(className: 'Integer', arg0: string_t): Promise<number>;
    function newInstanceP(className: 'Integer', arg0: integer_t): Promise<number>;
    function newInstanceP(className: 'Object'): Promise<object_t>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: object_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: string_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t, arg1: integer_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: string_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t): Promise<string>;
    function newInstanceP(className: 'String', arg0: object_array_t): Promise<string>;
    function newInstanceP(className: 'String'): Promise<string>;
    function newInstanceP(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'GregorianCalendar', arg0: Java.TimeZone, arg1: object_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'GregorianCalendar', arg0: Java.TimeZone): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'GregorianCalendar', arg0: object_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'GregorianCalendar'): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'TimeZone'): Promise<Java.TimeZone>;
    function newInstanceP(className: 'ezvcard.io.chain.ChainingTextWriter', arg0: object_t): Promise<Java.ChainingTextWriter>;
    function newInstanceP(className: 'ezvcard.property.Address', arg0: Java.Address): Promise<Java.Address>;
    function newInstanceP(className: 'ezvcard.property.Address'): Promise<Java.Address>;
    function newInstanceP(className: 'ezvcard.property.Birthday', arg0: object_t, arg1: object_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'ezvcard.property.Birthday', arg0: Java.Birthday): Promise<Java.Birthday>;
    function newInstanceP(className: 'ezvcard.property.Birthday', arg0: object_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'ezvcard.property.Birthday', arg0: string_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'ezvcard.property.Birthday', arg0: object_t): Promise<Java.Birthday>;
    function newInstanceP(className: 'ezvcard.property.Photo', arg0: object_t, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'ezvcard.property.Photo', arg0: string_t, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'ezvcard.property.Photo', arg0: Java.File, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'ezvcard.property.Photo', arg0: object_array_t, arg1: Java.ImageType): Promise<Java.Photo>;
    function newInstanceP(className: 'ezvcard.property.Photo', arg0: Java.Photo): Promise<Java.Photo>;
    function newInstanceP(className: 'ezvcard.property.Revision', arg0: Java.Revision): Promise<Java.Revision>;
    function newInstanceP(className: 'ezvcard.property.Revision', arg0: object_t): Promise<Java.Revision>;
    function newInstanceP(className: 'ezvcard.property.StructuredName', arg0: Java.StructuredName): Promise<Java.StructuredName>;
    function newInstanceP(className: 'ezvcard.property.StructuredName'): Promise<Java.StructuredName>;
    function newInstanceP(className: 'ezvcard.property.Timezone', arg0: object_t, arg1: string_t): Promise<Java.Timezone>;
    function newInstanceP(className: 'ezvcard.property.Timezone', arg0: Java.Timezone): Promise<Java.Timezone>;
    function newInstanceP(className: 'ezvcard.property.Timezone', arg0: object_t): Promise<Java.Timezone>;
    function newInstanceP(className: 'ezvcard.property.Timezone', arg0: Java.TimeZone): Promise<Java.Timezone>;
    function newInstanceP(className: 'ezvcard.property.Timezone', arg0: string_t): Promise<Java.Timezone>;
    function newInstanceP(className: 'ezvcard.property.Uid', arg0: Java.Uid): Promise<Java.Uid>;
    function newInstanceP(className: 'ezvcard.property.Uid', arg0: string_t): Promise<Java.Uid>;
    function newInstanceP(className: 'ezvcard.ValidationWarning', arg0: integer_t, ...arg1: object_t[]): Promise<Java.ValidationWarning>;
    function newInstanceP(className: 'ezvcard.ValidationWarning', arg0: string_t): Promise<Java.ValidationWarning>;
    function newInstanceP(className: 'ezvcard.ValidationWarnings'): Promise<Java.ValidationWarnings>;
    function newInstanceP(className: 'ezvcard.VCard', arg0: Java.VCardVersion): Promise<Java.VCard>;
    function newInstanceP(className: 'ezvcard.VCard', arg0: Java.VCard): Promise<Java.VCard>;
    function newInstanceP(className: 'ezvcard.VCard'): Promise<Java.VCard>;
    function newInstanceP(className: 'java.io.File', arg0: string_t, arg1: string_t): Promise<Java.File>;
    function newInstanceP(className: 'java.io.File', arg0: Java.File, arg1: string_t): Promise<Java.File>;
    function newInstanceP(className: 'java.io.File', arg0: string_t): Promise<Java.File>;
    function newInstanceP(className: 'java.io.File', arg0: object_t): Promise<Java.File>;
    function newInstanceP(className: 'java.lang.Integer', arg0: string_t): Promise<number>;
    function newInstanceP(className: 'java.lang.Integer', arg0: integer_t): Promise<number>;
    function newInstanceP(className: 'java.lang.Object'): Promise<object_t>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: object_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: string_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
    function newInstanceP(className: 'java.lang.String'): Promise<string>;
    function newInstanceP(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, arg1: object_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'java.util.GregorianCalendar', arg0: object_t): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'java.util.GregorianCalendar'): Promise<Java.GregorianCalendar>;
    function newInstanceP(className: 'java.util.TimeZone'): Promise<Java.TimeZone>;
    function newInstanceP(className: string, ...args: any[]): Promise<any>;
    function newArray(className: 'Ezvcard', arg: Java.Ezvcard[]): array_t<ezvcard.Ezvcard>;
    function newArray(className: 'ChainingTextWriter', arg: Java.ChainingTextWriter[]): array_t<ezvcard.io.chain.ChainingTextWriter>;
    function newArray(className: 'Messages', arg: Java.Messages[]): array_t<ezvcard.Messages>;
    function newArray(className: 'AddressType', arg: Java.AddressType[]): array_t<ezvcard.parameter.AddressType>;
    function newArray(className: 'ImageType', arg: Java.ImageType[]): array_t<ezvcard.parameter.ImageType>;
    function newArray(className: 'TelephoneType', arg: Java.TelephoneType[]): array_t<ezvcard.parameter.TelephoneType>;
    function newArray(className: 'Address', arg: Java.Address[]): array_t<ezvcard.property.Address>;
    function newArray(className: 'Birthday', arg: Java.Birthday[]): array_t<ezvcard.property.Birthday>;
    function newArray(className: 'Photo', arg: Java.Photo[]): array_t<ezvcard.property.Photo>;
    function newArray(className: 'Revision', arg: Java.Revision[]): array_t<ezvcard.property.Revision>;
    function newArray(className: 'StructuredName', arg: Java.StructuredName[]): array_t<ezvcard.property.StructuredName>;
    function newArray(className: 'Timezone', arg: Java.Timezone[]): array_t<ezvcard.property.Timezone>;
    function newArray(className: 'Uid', arg: Java.Uid[]): array_t<ezvcard.property.Uid>;
    function newArray(className: 'SupportedVersions', arg: Java.SupportedVersions[]): array_t<ezvcard.SupportedVersions>;
    function newArray(className: 'ValidationWarning', arg: Java.ValidationWarning[]): array_t<ezvcard.ValidationWarning>;
    function newArray(className: 'ValidationWarnings', arg: Java.ValidationWarnings[]): array_t<ezvcard.ValidationWarnings>;
    function newArray(className: 'VCard', arg: Java.VCard[]): array_t<ezvcard.VCard>;
    function newArray(className: 'VCardDataType', arg: Java.VCardDataType[]): array_t<ezvcard.VCardDataType>;
    function newArray(className: 'VCardVersion', arg: Java.VCardVersion[]): array_t<ezvcard.VCardVersion>;
    function newArray(className: 'File', arg: Java.File[]): array_t<java.io.File>;
    function newArray(className: 'Integer', arg: integer_t[]): array_t<java.lang.Integer>;
    function newArray(className: 'Object', arg: object_t[]): array_t<java.lang.Object>;
    function newArray(className: 'Field', arg: Java.Field[]): array_t<java.lang.reflect.Field>;
    function newArray(className: 'String', arg: string_t[]): array_t<java.lang.String>;
    function newArray(className: 'Calendar', arg: Java.Calendar[]): array_t<java.util.Calendar>;
    function newArray(className: 'GregorianCalendar', arg: Java.GregorianCalendar[]): array_t<java.util.GregorianCalendar>;
    function newArray(className: 'List', arg: Java.List[]): array_t<java.util.List>;
    function newArray(className: 'TimeZone', arg: Java.TimeZone[]): array_t<java.util.TimeZone>;
    function newArray(className: 'ezvcard.Ezvcard', arg: Java.Ezvcard[]): array_t<ezvcard.Ezvcard>;
    function newArray(className: 'ezvcard.io.chain.ChainingTextWriter', arg: Java.ChainingTextWriter[]): array_t<ezvcard.io.chain.ChainingTextWriter>;
    function newArray(className: 'ezvcard.Messages', arg: Java.Messages[]): array_t<ezvcard.Messages>;
    function newArray(className: 'ezvcard.parameter.AddressType', arg: Java.AddressType[]): array_t<ezvcard.parameter.AddressType>;
    function newArray(className: 'ezvcard.parameter.ImageType', arg: Java.ImageType[]): array_t<ezvcard.parameter.ImageType>;
    function newArray(className: 'ezvcard.parameter.TelephoneType', arg: Java.TelephoneType[]): array_t<ezvcard.parameter.TelephoneType>;
    function newArray(className: 'ezvcard.property.Address', arg: Java.Address[]): array_t<ezvcard.property.Address>;
    function newArray(className: 'ezvcard.property.Birthday', arg: Java.Birthday[]): array_t<ezvcard.property.Birthday>;
    function newArray(className: 'ezvcard.property.Photo', arg: Java.Photo[]): array_t<ezvcard.property.Photo>;
    function newArray(className: 'ezvcard.property.Revision', arg: Java.Revision[]): array_t<ezvcard.property.Revision>;
    function newArray(className: 'ezvcard.property.StructuredName', arg: Java.StructuredName[]): array_t<ezvcard.property.StructuredName>;
    function newArray(className: 'ezvcard.property.Timezone', arg: Java.Timezone[]): array_t<ezvcard.property.Timezone>;
    function newArray(className: 'ezvcard.property.Uid', arg: Java.Uid[]): array_t<ezvcard.property.Uid>;
    function newArray(className: 'ezvcard.SupportedVersions', arg: Java.SupportedVersions[]): array_t<ezvcard.SupportedVersions>;
    function newArray(className: 'ezvcard.ValidationWarning', arg: Java.ValidationWarning[]): array_t<ezvcard.ValidationWarning>;
    function newArray(className: 'ezvcard.ValidationWarnings', arg: Java.ValidationWarnings[]): array_t<ezvcard.ValidationWarnings>;
    function newArray(className: 'ezvcard.VCard', arg: Java.VCard[]): array_t<ezvcard.VCard>;
    function newArray(className: 'ezvcard.VCardDataType', arg: Java.VCardDataType[]): array_t<ezvcard.VCardDataType>;
    function newArray(className: 'ezvcard.VCardVersion', arg: Java.VCardVersion[]): array_t<ezvcard.VCardVersion>;
    function newArray(className: 'java.io.File', arg: Java.File[]): array_t<java.io.File>;
    function newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
    function newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
    function newArray(className: 'java.lang.reflect.Field', arg: Java.Field[]): array_t<java.lang.reflect.Field>;
    function newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
    function newArray(className: 'java.util.Calendar', arg: Java.Calendar[]): array_t<java.util.Calendar>;
    function newArray(className: 'java.util.GregorianCalendar', arg: Java.GregorianCalendar[]): array_t<java.util.GregorianCalendar>;
    function newArray(className: 'java.util.List', arg: Java.List[]): array_t<java.util.List>;
    function newArray(className: 'java.util.TimeZone', arg: Java.TimeZone[]): array_t<java.util.TimeZone>;
    function newArray<T>(className: string, arg: any[]): array_t<T>;
    interface longValue_t extends Number {
        longValue: string;
    }
    type string_t = string | Java.java.lang.String;
    type object_t = Java.java.lang.Object | string | boolean | number | longValue_t;
    type long_t = number | longValue_t;
    type boolean_t = boolean;
    type short_t = number;
    type integer_t = number | Java.java.lang.Integer;
    type double_t = number;
    type float_t = number;
    type number_t = number;
    interface array_t<T> extends Java.java.lang.Object {
        __dummy: T;
    }
    type object_array_t = array_t<Java.java.lang.Object> | object_t[];
    export import Ezvcard = ezvcard.Ezvcard;
    export import ChainingTextWriter = ezvcard.io.chain.ChainingTextWriter;
    export import Messages = ezvcard.Messages;
    export import AddressType = ezvcard.parameter.AddressType;
    export import ImageType = ezvcard.parameter.ImageType;
    export import TelephoneType = ezvcard.parameter.TelephoneType;
    export import Address = ezvcard.property.Address;
    export import Birthday = ezvcard.property.Birthday;
    export import Photo = ezvcard.property.Photo;
    export import Revision = ezvcard.property.Revision;
    export import StructuredName = ezvcard.property.StructuredName;
    export import Timezone = ezvcard.property.Timezone;
    export import Uid = ezvcard.property.Uid;
    export import SupportedVersions = ezvcard.SupportedVersions;
    export import ValidationWarning = ezvcard.ValidationWarning;
    export import ValidationWarnings = ezvcard.ValidationWarnings;
    export import VCard = ezvcard.VCard;
    export import VCardDataType = ezvcard.VCardDataType;
    export import VCardVersion = ezvcard.VCardVersion;
    export import File = java.io.File;
    export import Integer = java.lang.Integer;
    export import Object = java.lang.Object;
    export import Field = java.lang.reflect.Field;
    export import String = java.lang.String;
    export import Calendar = java.util.Calendar;
    export import GregorianCalendar = java.util.GregorianCalendar;
    export import List = java.util.List;
    export import TimeZone = java.util.TimeZone;
    module ezvcard {
        interface Ezvcard extends Java.java.lang.Object {
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Ezvcard {
            interface Static {
                VERSION: string;
                GROUP_ID: string;
                ARTIFACT_ID: string;
                URL: string;
                class: Java.Object;
                parseA(arg0: string_t, cb: Callback<object_t>): void;
                parse(arg0: string_t): object_t;
                parseP(arg0: string_t): Promise<object_t>;
                parseA(arg0: object_t, cb: Callback<object_t>): void;
                parse(arg0: object_t): object_t;
                parseP(arg0: object_t): Promise<object_t>;
                parseA(arg0: object_t, cb: Callback<object_t>): void;
                parse(arg0: object_t): object_t;
                parseP(arg0: object_t): Promise<object_t>;
                parseA(arg0: Java.File, cb: Callback<object_t>): void;
                parse(arg0: Java.File): object_t;
                parseP(arg0: Java.File): Promise<object_t>;
                parseHtmlA(arg0: string_t, cb: Callback<object_t>): void;
                parseHtml(arg0: string_t): object_t;
                parseHtmlP(arg0: string_t): Promise<object_t>;
                parseHtmlA(arg0: object_t, cb: Callback<object_t>): void;
                parseHtml(arg0: object_t): object_t;
                parseHtmlP(arg0: object_t): Promise<object_t>;
                parseHtmlA(arg0: object_t, cb: Callback<object_t>): void;
                parseHtml(arg0: object_t): object_t;
                parseHtmlP(arg0: object_t): Promise<object_t>;
                parseHtmlA(arg0: object_t, cb: Callback<object_t>): void;
                parseHtml(arg0: object_t): object_t;
                parseHtmlP(arg0: object_t): Promise<object_t>;
                parseHtmlA(arg0: Java.File, cb: Callback<object_t>): void;
                parseHtml(arg0: Java.File): object_t;
                parseHtmlP(arg0: Java.File): Promise<object_t>;
                parseJsonA(arg0: string_t, cb: Callback<object_t>): void;
                parseJson(arg0: string_t): object_t;
                parseJsonP(arg0: string_t): Promise<object_t>;
                parseJsonA(arg0: object_t, cb: Callback<object_t>): void;
                parseJson(arg0: object_t): object_t;
                parseJsonP(arg0: object_t): Promise<object_t>;
                parseJsonA(arg0: object_t, cb: Callback<object_t>): void;
                parseJson(arg0: object_t): object_t;
                parseJsonP(arg0: object_t): Promise<object_t>;
                parseJsonA(arg0: Java.File, cb: Callback<object_t>): void;
                parseJson(arg0: Java.File): object_t;
                parseJsonP(arg0: Java.File): Promise<object_t>;
                parseXmlA(arg0: object_t, cb: Callback<object_t>): void;
                parseXml(arg0: object_t): object_t;
                parseXmlP(arg0: object_t): Promise<object_t>;
                parseXmlA(arg0: string_t, cb: Callback<object_t>): void;
                parseXml(arg0: string_t): object_t;
                parseXmlP(arg0: string_t): Promise<object_t>;
                parseXmlA(arg0: object_t, cb: Callback<object_t>): void;
                parseXml(arg0: object_t): object_t;
                parseXmlP(arg0: object_t): Promise<object_t>;
                parseXmlA(arg0: object_t, cb: Callback<object_t>): void;
                parseXml(arg0: object_t): object_t;
                parseXmlP(arg0: object_t): Promise<object_t>;
                parseXmlA(arg0: Java.File, cb: Callback<object_t>): void;
                parseXml(arg0: Java.File): object_t;
                parseXmlP(arg0: Java.File): Promise<object_t>;
                writeA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
                write(arg0: object_t): Java.ChainingTextWriter;
                writeP(arg0: object_t): Promise<Java.ChainingTextWriter>;
                writeA(arg0: array_t<Java.VCard>, cb: Callback<Java.ChainingTextWriter>): void;
                write(...arg0: Java.VCard[]): Java.ChainingTextWriter;
                write(arg0: array_t<Java.VCard>): Java.ChainingTextWriter;
                writeP(...arg0: Java.VCard[]): Promise<Java.ChainingTextWriter>;
                writeP(arg0: array_t<Java.VCard>): Promise<Java.ChainingTextWriter>;
                writeHtmlA(arg0: object_t, cb: Callback<object_t>): void;
                writeHtml(arg0: object_t): object_t;
                writeHtmlP(arg0: object_t): Promise<object_t>;
                writeHtmlA(arg0: array_t<Java.VCard>, cb: Callback<object_t>): void;
                writeHtml(...arg0: Java.VCard[]): object_t;
                writeHtml(arg0: array_t<Java.VCard>): object_t;
                writeHtmlP(...arg0: Java.VCard[]): Promise<object_t>;
                writeHtmlP(arg0: array_t<Java.VCard>): Promise<object_t>;
                writeJsonA(arg0: object_t, cb: Callback<object_t>): void;
                writeJson(arg0: object_t): object_t;
                writeJsonP(arg0: object_t): Promise<object_t>;
                writeJsonA(arg0: array_t<Java.VCard>, cb: Callback<object_t>): void;
                writeJson(...arg0: Java.VCard[]): object_t;
                writeJson(arg0: array_t<Java.VCard>): object_t;
                writeJsonP(...arg0: Java.VCard[]): Promise<object_t>;
                writeJsonP(arg0: array_t<Java.VCard>): Promise<object_t>;
                writeXmlA(arg0: object_t, cb: Callback<object_t>): void;
                writeXml(arg0: object_t): object_t;
                writeXmlP(arg0: object_t): Promise<object_t>;
                writeXmlA(arg0: array_t<Java.VCard>, cb: Callback<object_t>): void;
                writeXml(...arg0: Java.VCard[]): object_t;
                writeXml(arg0: array_t<Java.VCard>): object_t;
                writeXmlP(...arg0: Java.VCard[]): Promise<object_t>;
                writeXmlP(arg0: array_t<Java.VCard>): Promise<object_t>;
            }
        }
    }
    module ezvcard.io.chain {
        interface ChainingTextWriter extends Java.java.lang.Object {
            caretEncodingA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
            caretEncoding(arg0: object_t): Java.ChainingTextWriter;
            caretEncodingP(arg0: object_t): Promise<Java.ChainingTextWriter>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            foldLinesA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
            foldLines(arg0: object_t): Java.ChainingTextWriter;
            foldLinesP(arg0: object_t): Promise<Java.ChainingTextWriter>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            goA(arg0: Java.File, arg1: object_t, cb: Callback<void>): void;
            go(arg0: Java.File, arg1: object_t): void;
            goP(arg0: Java.File, arg1: object_t): Promise<void>;
            goA(arg0: object_t, cb: Callback<void>): void;
            go(arg0: object_t): void;
            goP(arg0: object_t): Promise<void>;
            goA(arg0: object_t, cb: Callback<void>): void;
            go(arg0: object_t): void;
            goP(arg0: object_t): Promise<void>;
            goA(arg0: Java.File, cb: Callback<void>): void;
            go(arg0: Java.File): void;
            goP(arg0: Java.File): Promise<void>;
            goA(cb: Callback<string>): void;
            go(): string;
            goP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            includeTrailingSemicolonsA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
            includeTrailingSemicolons(arg0: object_t): Java.ChainingTextWriter;
            includeTrailingSemicolonsP(arg0: object_t): Promise<Java.ChainingTextWriter>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            prodIdA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
            prodId(arg0: object_t): Java.ChainingTextWriter;
            prodIdP(arg0: object_t): Promise<Java.ChainingTextWriter>;
            prodIdA(arg0: object_t, cb: Callback<object_t>): void;
            prodId(arg0: object_t): object_t;
            prodIdP(arg0: object_t): Promise<object_t>;
            registerA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
            register(arg0: object_t): Java.ChainingTextWriter;
            registerP(arg0: object_t): Promise<Java.ChainingTextWriter>;
            registerA(arg0: object_t, cb: Callback<object_t>): void;
            register(arg0: object_t): object_t;
            registerP(arg0: object_t): Promise<object_t>;
            targetApplicationA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
            targetApplication(arg0: object_t): Java.ChainingTextWriter;
            targetApplicationP(arg0: object_t): Promise<Java.ChainingTextWriter>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            versionA(arg0: Java.VCardVersion, cb: Callback<Java.ChainingTextWriter>): void;
            version(arg0: Java.VCardVersion): Java.ChainingTextWriter;
            versionP(arg0: Java.VCardVersion): Promise<Java.ChainingTextWriter>;
            versionStrictA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
            versionStrict(arg0: object_t): Java.ChainingTextWriter;
            versionStrictP(arg0: object_t): Promise<Java.ChainingTextWriter>;
            versionStrictA(arg0: object_t, cb: Callback<object_t>): void;
            versionStrict(arg0: object_t): object_t;
            versionStrictP(arg0: object_t): Promise<object_t>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module ChainingTextWriter {
            interface Static {
                class: Java.Object;
                new (arg0: object_t): ezvcard.io.chain.ChainingTextWriter;
            }
        }
    }
    module ezvcard {
        interface Messages extends Java.java.lang.Object {
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            describeConstableA(cb: Callback<object_t>): void;
            describeConstable(): object_t;
            describeConstableP(): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getDeclaringClassA(cb: Callback<object_t>): void;
            getDeclaringClass(): object_t;
            getDeclaringClassP(): Promise<object_t>;
            getExceptionMessageA(arg0: integer_t, arg1: object_array_t, cb: Callback<string>): void;
            getExceptionMessage(arg0: integer_t, ...arg1: object_t[]): string;
            getExceptionMessage(arg0: integer_t, arg1: object_array_t): string;
            getExceptionMessageP(arg0: integer_t, ...arg1: object_t[]): Promise<string>;
            getExceptionMessageP(arg0: integer_t, arg1: object_array_t): Promise<string>;
            getIllegalArgumentExceptionA(arg0: integer_t, arg1: object_array_t, cb: Callback<object_t>): void;
            getIllegalArgumentException(arg0: integer_t, ...arg1: object_t[]): object_t;
            getIllegalArgumentException(arg0: integer_t, arg1: object_array_t): object_t;
            getIllegalArgumentExceptionP(arg0: integer_t, ...arg1: object_t[]): Promise<object_t>;
            getIllegalArgumentExceptionP(arg0: integer_t, arg1: object_array_t): Promise<object_t>;
            getMessageA(arg0: string_t, arg1: object_array_t, cb: Callback<string>): void;
            getMessage(arg0: string_t, ...arg1: object_t[]): string;
            getMessage(arg0: string_t, arg1: object_array_t): string;
            getMessageP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
            getMessageP(arg0: string_t, arg1: object_array_t): Promise<string>;
            getParseMessageA(arg0: integer_t, arg1: object_array_t, cb: Callback<string>): void;
            getParseMessage(arg0: integer_t, ...arg1: object_t[]): string;
            getParseMessage(arg0: integer_t, arg1: object_array_t): string;
            getParseMessageP(arg0: integer_t, ...arg1: object_t[]): Promise<string>;
            getParseMessageP(arg0: integer_t, arg1: object_array_t): Promise<string>;
            getValidationWarningA(arg0: integer_t, arg1: object_array_t, cb: Callback<string>): void;
            getValidationWarning(arg0: integer_t, ...arg1: object_t[]): string;
            getValidationWarning(arg0: integer_t, arg1: object_array_t): string;
            getValidationWarningP(arg0: integer_t, ...arg1: object_t[]): Promise<string>;
            getValidationWarningP(arg0: integer_t, arg1: object_array_t): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            nameA(cb: Callback<string>): void;
            name(): string;
            nameP(): Promise<string>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            ordinalA(cb: Callback<number>): void;
            ordinal(): number;
            ordinalP(): Promise<number>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Messages {
            interface Static {
                INSTANCE: Java.Messages;
                class: Java.Object;
                valueOfA(arg0: object_t, arg1: string_t, cb: Callback<object_t>): void;
                valueOf(arg0: object_t, arg1: string_t): object_t;
                valueOfP(arg0: object_t, arg1: string_t): Promise<object_t>;
                valueOfA(arg0: string_t, cb: Callback<Java.Messages>): void;
                valueOf(arg0: string_t): Java.Messages;
                valueOfP(arg0: string_t): Promise<Java.Messages>;
                valuesA(cb: Callback<Java.Messages[]>): void;
                values(): Java.Messages[];
                valuesP(): Promise<Java.Messages[]>;
            }
        }
    }
    module ezvcard.parameter {
        interface AddressType extends Java.java.lang.Object {
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getValueA(cb: Callback<string>): void;
            getValue(): string;
            getValueP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module AddressType {
            interface Static {
                HOME: Java.AddressType;
                WORK: Java.AddressType;
                DOM: Java.AddressType;
                INTL: Java.AddressType;
                POSTAL: Java.AddressType;
                PARCEL: Java.AddressType;
                PREF: Java.AddressType;
                class: Java.Object;
                allA(cb: Callback<object_t>): void;
                all(): object_t;
                allP(): Promise<object_t>;
                findA(arg0: string_t, cb: Callback<Java.AddressType>): void;
                find(arg0: string_t): Java.AddressType;
                findP(arg0: string_t): Promise<Java.AddressType>;
                getA(arg0: string_t, cb: Callback<Java.AddressType>): void;
                get(arg0: string_t): Java.AddressType;
                getP(arg0: string_t): Promise<Java.AddressType>;
            }
        }
    }
    module ezvcard.parameter {
        interface ImageType extends Java.java.lang.Object {
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getExtensionA(cb: Callback<string>): void;
            getExtension(): string;
            getExtensionP(): Promise<string>;
            getMediaTypeA(cb: Callback<string>): void;
            getMediaType(): string;
            getMediaTypeP(): Promise<string>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getValueA(cb: Callback<string>): void;
            getValue(): string;
            getValueP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module ImageType {
            interface Static {
                GIF: Java.ImageType;
                JPEG: Java.ImageType;
                PNG: Java.ImageType;
                class: Java.Object;
                allA(cb: Callback<object_t>): void;
                all(): object_t;
                allP(): Promise<object_t>;
                findA(arg0: string_t, arg1: string_t, arg2: string_t, cb: Callback<Java.ImageType>): void;
                find(arg0: string_t, arg1: string_t, arg2: string_t): Java.ImageType;
                findP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<Java.ImageType>;
                getA(arg0: string_t, arg1: string_t, arg2: string_t, cb: Callback<Java.ImageType>): void;
                get(arg0: string_t, arg1: string_t, arg2: string_t): Java.ImageType;
                getP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<Java.ImageType>;
            }
        }
    }
    module ezvcard.parameter {
        interface TelephoneType extends Java.java.lang.Object {
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getValueA(cb: Callback<string>): void;
            getValue(): string;
            getValueP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module TelephoneType {
            interface Static {
                BBS: Java.TelephoneType;
                CAR: Java.TelephoneType;
                CELL: Java.TelephoneType;
                FAX: Java.TelephoneType;
                HOME: Java.TelephoneType;
                ISDN: Java.TelephoneType;
                MODEM: Java.TelephoneType;
                MSG: Java.TelephoneType;
                PAGER: Java.TelephoneType;
                PCS: Java.TelephoneType;
                PREF: Java.TelephoneType;
                TEXT: Java.TelephoneType;
                TEXTPHONE: Java.TelephoneType;
                VIDEO: Java.TelephoneType;
                VOICE: Java.TelephoneType;
                WORK: Java.TelephoneType;
                class: Java.Object;
                allA(cb: Callback<object_t>): void;
                all(): object_t;
                allP(): Promise<object_t>;
                findA(arg0: string_t, cb: Callback<Java.TelephoneType>): void;
                find(arg0: string_t): Java.TelephoneType;
                findP(arg0: string_t): Promise<Java.TelephoneType>;
                getA(arg0: string_t, cb: Callback<Java.TelephoneType>): void;
                get(arg0: string_t): Java.TelephoneType;
                getP(arg0: string_t): Promise<Java.TelephoneType>;
            }
        }
    }
    module ezvcard.property {
        interface Address extends Java.java.lang.Object {
            addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            addParameter(arg0: string_t, arg1: string_t): void;
            addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            copyA(cb: Callback<object_t>): void;
            copy(): object_t;
            copyP(): Promise<object_t>;
            copyA(cb: Callback<Java.Address>): void;
            copy(): Java.Address;
            copyP(): Promise<Java.Address>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getAltIdA(cb: Callback<string>): void;
            getAltId(): string;
            getAltIdP(): Promise<string>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getCountriesA(cb: Callback<Java.List>): void;
            getCountries(): Java.List;
            getCountriesP(): Promise<Java.List>;
            getCountryA(cb: Callback<string>): void;
            getCountry(): string;
            getCountryP(): Promise<string>;
            getExtendedAddressA(cb: Callback<string>): void;
            getExtendedAddress(): string;
            getExtendedAddressP(): Promise<string>;
            getExtendedAddressesA(cb: Callback<Java.List>): void;
            getExtendedAddresses(): Java.List;
            getExtendedAddressesP(): Promise<Java.List>;
            getExtendedAddressFullA(cb: Callback<string>): void;
            getExtendedAddressFull(): string;
            getExtendedAddressFullP(): Promise<string>;
            getGeoA(cb: Callback<object_t>): void;
            getGeo(): object_t;
            getGeoP(): Promise<object_t>;
            getGroupA(cb: Callback<string>): void;
            getGroup(): string;
            getGroupP(): Promise<string>;
            getLabelA(cb: Callback<string>): void;
            getLabel(): string;
            getLabelP(): Promise<string>;
            getLanguageA(cb: Callback<string>): void;
            getLanguage(): string;
            getLanguageP(): Promise<string>;
            getLocalitiesA(cb: Callback<Java.List>): void;
            getLocalities(): Java.List;
            getLocalitiesP(): Promise<Java.List>;
            getLocalityA(cb: Callback<string>): void;
            getLocality(): string;
            getLocalityP(): Promise<string>;
            getParameterA(arg0: string_t, cb: Callback<string>): void;
            getParameter(arg0: string_t): string;
            getParameterP(arg0: string_t): Promise<string>;
            getParametersA(arg0: string_t, cb: Callback<Java.List>): void;
            getParameters(arg0: string_t): Java.List;
            getParametersP(arg0: string_t): Promise<Java.List>;
            getParametersA(cb: Callback<object_t>): void;
            getParameters(): object_t;
            getParametersP(): Promise<object_t>;
            getPidsA(cb: Callback<Java.List>): void;
            getPids(): Java.List;
            getPidsP(): Promise<Java.List>;
            getPoBoxA(cb: Callback<string>): void;
            getPoBox(): string;
            getPoBoxP(): Promise<string>;
            getPoBoxesA(cb: Callback<Java.List>): void;
            getPoBoxes(): Java.List;
            getPoBoxesP(): Promise<Java.List>;
            getPostalCodeA(cb: Callback<string>): void;
            getPostalCode(): string;
            getPostalCodeP(): Promise<string>;
            getPostalCodesA(cb: Callback<Java.List>): void;
            getPostalCodes(): Java.List;
            getPostalCodesP(): Promise<Java.List>;
            getPrefA(cb: Callback<number>): void;
            getPref(): number;
            getPrefP(): Promise<number>;
            getRegionA(cb: Callback<string>): void;
            getRegion(): string;
            getRegionP(): Promise<string>;
            getRegionsA(cb: Callback<Java.List>): void;
            getRegions(): Java.List;
            getRegionsP(): Promise<Java.List>;
            getStreetAddressA(cb: Callback<string>): void;
            getStreetAddress(): string;
            getStreetAddressP(): Promise<string>;
            getStreetAddressesA(cb: Callback<Java.List>): void;
            getStreetAddresses(): Java.List;
            getStreetAddressesP(): Promise<Java.List>;
            getStreetAddressFullA(cb: Callback<string>): void;
            getStreetAddressFull(): string;
            getStreetAddressFullP(): Promise<string>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getTimezoneA(cb: Callback<string>): void;
            getTimezone(): string;
            getTimezoneP(): Promise<string>;
            getTypesA(cb: Callback<Java.List>): void;
            getTypes(): Java.List;
            getTypesP(): Promise<Java.List>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeParameterA(arg0: string_t, cb: Callback<void>): void;
            removeParameter(arg0: string_t): void;
            removeParameterP(arg0: string_t): Promise<void>;
            setAltIdA(arg0: string_t, cb: Callback<void>): void;
            setAltId(arg0: string_t): void;
            setAltIdP(arg0: string_t): Promise<void>;
            setCountryA(arg0: string_t, cb: Callback<void>): void;
            setCountry(arg0: string_t): void;
            setCountryP(arg0: string_t): Promise<void>;
            setExtendedAddressA(arg0: string_t, cb: Callback<void>): void;
            setExtendedAddress(arg0: string_t): void;
            setExtendedAddressP(arg0: string_t): Promise<void>;
            setGeoA(arg0: object_t, cb: Callback<void>): void;
            setGeo(arg0: object_t): void;
            setGeoP(arg0: object_t): Promise<void>;
            setGroupA(arg0: string_t, cb: Callback<void>): void;
            setGroup(arg0: string_t): void;
            setGroupP(arg0: string_t): Promise<void>;
            setLabelA(arg0: string_t, cb: Callback<void>): void;
            setLabel(arg0: string_t): void;
            setLabelP(arg0: string_t): Promise<void>;
            setLanguageA(arg0: string_t, cb: Callback<void>): void;
            setLanguage(arg0: string_t): void;
            setLanguageP(arg0: string_t): Promise<void>;
            setLocalityA(arg0: string_t, cb: Callback<void>): void;
            setLocality(arg0: string_t): void;
            setLocalityP(arg0: string_t): Promise<void>;
            setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setParameter(arg0: string_t, arg1: string_t): void;
            setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            setParametersA(arg0: object_t, cb: Callback<void>): void;
            setParameters(arg0: object_t): void;
            setParametersP(arg0: object_t): Promise<void>;
            setPoBoxA(arg0: string_t, cb: Callback<void>): void;
            setPoBox(arg0: string_t): void;
            setPoBoxP(arg0: string_t): Promise<void>;
            setPostalCodeA(arg0: string_t, cb: Callback<void>): void;
            setPostalCode(arg0: string_t): void;
            setPostalCodeP(arg0: string_t): Promise<void>;
            setPrefA(arg0: integer_t, cb: Callback<void>): void;
            setPref(arg0: integer_t): void;
            setPrefP(arg0: integer_t): Promise<void>;
            setRegionA(arg0: string_t, cb: Callback<void>): void;
            setRegion(arg0: string_t): void;
            setRegionP(arg0: string_t): Promise<void>;
            setStreetAddressA(arg0: string_t, cb: Callback<void>): void;
            setStreetAddress(arg0: string_t): void;
            setStreetAddressP(arg0: string_t): Promise<void>;
            setTimezoneA(arg0: string_t, cb: Callback<void>): void;
            setTimezone(arg0: string_t): void;
            setTimezoneP(arg0: string_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            validateA(arg0: Java.VCardVersion, arg1: Java.VCard, cb: Callback<Java.List>): void;
            validate(arg0: Java.VCardVersion, arg1: Java.VCard): Java.List;
            validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<Java.List>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Address {
            interface Static {
                class: Java.Object;
                new (arg0: Java.Address): ezvcard.property.Address;
                new (): ezvcard.property.Address;
            }
        }
    }
    module ezvcard.property {
        interface Birthday extends Java.java.lang.Object {
            addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            addParameter(arg0: string_t, arg1: string_t): void;
            addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            copyA(cb: Callback<object_t>): void;
            copy(): object_t;
            copyP(): Promise<object_t>;
            copyA(cb: Callback<Java.Birthday>): void;
            copy(): Java.Birthday;
            copyP(): Promise<Java.Birthday>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getAltIdA(cb: Callback<string>): void;
            getAltId(): string;
            getAltIdP(): Promise<string>;
            getCalscaleA(cb: Callback<object_t>): void;
            getCalscale(): object_t;
            getCalscaleP(): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getDateA(cb: Callback<object_t>): void;
            getDate(): object_t;
            getDateP(): Promise<object_t>;
            getGroupA(cb: Callback<string>): void;
            getGroup(): string;
            getGroupP(): Promise<string>;
            getLanguageA(cb: Callback<string>): void;
            getLanguage(): string;
            getLanguageP(): Promise<string>;
            getParameterA(arg0: string_t, cb: Callback<string>): void;
            getParameter(arg0: string_t): string;
            getParameterP(arg0: string_t): Promise<string>;
            getParametersA(arg0: string_t, cb: Callback<Java.List>): void;
            getParameters(arg0: string_t): Java.List;
            getParametersP(arg0: string_t): Promise<Java.List>;
            getParametersA(cb: Callback<object_t>): void;
            getParameters(): object_t;
            getParametersP(): Promise<object_t>;
            getPartialDateA(cb: Callback<object_t>): void;
            getPartialDate(): object_t;
            getPartialDateP(): Promise<object_t>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getTextA(cb: Callback<string>): void;
            getText(): string;
            getTextP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            hasTimeA(cb: Callback<object_t>): void;
            hasTime(): object_t;
            hasTimeP(): Promise<object_t>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeParameterA(arg0: string_t, cb: Callback<void>): void;
            removeParameter(arg0: string_t): void;
            removeParameterP(arg0: string_t): Promise<void>;
            setAltIdA(arg0: string_t, cb: Callback<void>): void;
            setAltId(arg0: string_t): void;
            setAltIdP(arg0: string_t): Promise<void>;
            setCalscaleA(arg0: object_t, cb: Callback<void>): void;
            setCalscale(arg0: object_t): void;
            setCalscaleP(arg0: object_t): Promise<void>;
            setDateA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setDate(arg0: object_t, arg1: object_t): void;
            setDateP(arg0: object_t, arg1: object_t): Promise<void>;
            setGroupA(arg0: string_t, cb: Callback<void>): void;
            setGroup(arg0: string_t): void;
            setGroupP(arg0: string_t): Promise<void>;
            setLanguageA(arg0: string_t, cb: Callback<void>): void;
            setLanguage(arg0: string_t): void;
            setLanguageP(arg0: string_t): Promise<void>;
            setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setParameter(arg0: string_t, arg1: string_t): void;
            setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            setParametersA(arg0: object_t, cb: Callback<void>): void;
            setParameters(arg0: object_t): void;
            setParametersP(arg0: object_t): Promise<void>;
            setPartialDateA(arg0: object_t, cb: Callback<void>): void;
            setPartialDate(arg0: object_t): void;
            setPartialDateP(arg0: object_t): Promise<void>;
            setTextA(arg0: string_t, cb: Callback<void>): void;
            setText(arg0: string_t): void;
            setTextP(arg0: string_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            validateA(arg0: Java.VCardVersion, arg1: Java.VCard, cb: Callback<Java.List>): void;
            validate(arg0: Java.VCardVersion, arg1: Java.VCard): Java.List;
            validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<Java.List>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Birthday {
            interface Static {
                class: Java.Object;
                new (arg0: object_t, arg1: object_t): ezvcard.property.Birthday;
                new (arg0: Java.Birthday): ezvcard.property.Birthday;
                new (arg0: object_t): ezvcard.property.Birthday;
                new (arg0: string_t): ezvcard.property.Birthday;
                new (arg0: object_t): ezvcard.property.Birthday;
            }
        }
    }
    module ezvcard.property {
        interface Photo extends Java.java.lang.Object {
            addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            addParameter(arg0: string_t, arg1: string_t): void;
            addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            copyA(cb: Callback<object_t>): void;
            copy(): object_t;
            copyP(): Promise<object_t>;
            copyA(cb: Callback<Java.Photo>): void;
            copy(): Java.Photo;
            copyP(): Promise<Java.Photo>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getAltIdA(cb: Callback<string>): void;
            getAltId(): string;
            getAltIdP(): Promise<string>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getContentTypeA(cb: Callback<object_t>): void;
            getContentType(): object_t;
            getContentTypeP(): Promise<object_t>;
            getDataA(cb: Callback<object_t[]>): void;
            getData(): object_t[];
            getDataP(): Promise<object_t[]>;
            getGroupA(cb: Callback<string>): void;
            getGroup(): string;
            getGroupP(): Promise<string>;
            getParameterA(arg0: string_t, cb: Callback<string>): void;
            getParameter(arg0: string_t): string;
            getParameterP(arg0: string_t): Promise<string>;
            getParametersA(arg0: string_t, cb: Callback<Java.List>): void;
            getParameters(arg0: string_t): Java.List;
            getParametersP(arg0: string_t): Promise<Java.List>;
            getParametersA(cb: Callback<object_t>): void;
            getParameters(): object_t;
            getParametersP(): Promise<object_t>;
            getPidsA(cb: Callback<Java.List>): void;
            getPids(): Java.List;
            getPidsP(): Promise<Java.List>;
            getPrefA(cb: Callback<number>): void;
            getPref(): number;
            getPrefP(): Promise<number>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getTypeA(cb: Callback<string>): void;
            getType(): string;
            getTypeP(): Promise<string>;
            getUrlA(cb: Callback<string>): void;
            getUrl(): string;
            getUrlP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeParameterA(arg0: string_t, cb: Callback<void>): void;
            removeParameter(arg0: string_t): void;
            removeParameterP(arg0: string_t): Promise<void>;
            setAltIdA(arg0: string_t, cb: Callback<void>): void;
            setAltId(arg0: string_t): void;
            setAltIdP(arg0: string_t): Promise<void>;
            setContentTypeA(arg0: object_t, cb: Callback<void>): void;
            setContentType(arg0: object_t): void;
            setContentTypeP(arg0: object_t): Promise<void>;
            setDataA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
            setData(arg0: object_array_t, arg1: object_t): void;
            setDataP(arg0: object_array_t, arg1: object_t): Promise<void>;
            setGroupA(arg0: string_t, cb: Callback<void>): void;
            setGroup(arg0: string_t): void;
            setGroupP(arg0: string_t): Promise<void>;
            setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setParameter(arg0: string_t, arg1: string_t): void;
            setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            setParametersA(arg0: object_t, cb: Callback<void>): void;
            setParameters(arg0: object_t): void;
            setParametersP(arg0: object_t): Promise<void>;
            setPrefA(arg0: integer_t, cb: Callback<void>): void;
            setPref(arg0: integer_t): void;
            setPrefP(arg0: integer_t): Promise<void>;
            setTypeA(arg0: string_t, cb: Callback<void>): void;
            setType(arg0: string_t): void;
            setTypeP(arg0: string_t): Promise<void>;
            setUrlA(arg0: string_t, arg1: object_t, cb: Callback<void>): void;
            setUrl(arg0: string_t, arg1: object_t): void;
            setUrlP(arg0: string_t, arg1: object_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            validateA(arg0: Java.VCardVersion, arg1: Java.VCard, cb: Callback<Java.List>): void;
            validate(arg0: Java.VCardVersion, arg1: Java.VCard): Java.List;
            validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<Java.List>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Photo {
            interface Static {
                class: Java.Object;
                new (arg0: object_t, arg1: Java.ImageType): ezvcard.property.Photo;
                new (arg0: string_t, arg1: Java.ImageType): ezvcard.property.Photo;
                new (arg0: Java.File, arg1: Java.ImageType): ezvcard.property.Photo;
                new (arg0: object_array_t, arg1: Java.ImageType): ezvcard.property.Photo;
                new (arg0: Java.Photo): ezvcard.property.Photo;
            }
        }
    }
    module ezvcard.property {
        interface Revision extends Java.java.lang.Object {
            addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            addParameter(arg0: string_t, arg1: string_t): void;
            addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            copyA(cb: Callback<object_t>): void;
            copy(): object_t;
            copyP(): Promise<object_t>;
            copyA(cb: Callback<Java.Revision>): void;
            copy(): Java.Revision;
            copyP(): Promise<Java.Revision>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getGroupA(cb: Callback<string>): void;
            getGroup(): string;
            getGroupP(): Promise<string>;
            getParameterA(arg0: string_t, cb: Callback<string>): void;
            getParameter(arg0: string_t): string;
            getParameterP(arg0: string_t): Promise<string>;
            getParametersA(arg0: string_t, cb: Callback<Java.List>): void;
            getParameters(arg0: string_t): Java.List;
            getParametersP(arg0: string_t): Promise<Java.List>;
            getParametersA(cb: Callback<object_t>): void;
            getParameters(): object_t;
            getParametersP(): Promise<object_t>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getValueA(cb: Callback<object_t>): void;
            getValue(): object_t;
            getValueP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeParameterA(arg0: string_t, cb: Callback<void>): void;
            removeParameter(arg0: string_t): void;
            removeParameterP(arg0: string_t): Promise<void>;
            setGroupA(arg0: string_t, cb: Callback<void>): void;
            setGroup(arg0: string_t): void;
            setGroupP(arg0: string_t): Promise<void>;
            setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setParameter(arg0: string_t, arg1: string_t): void;
            setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            setParametersA(arg0: object_t, cb: Callback<void>): void;
            setParameters(arg0: object_t): void;
            setParametersP(arg0: object_t): Promise<void>;
            setValueA(arg0: object_t, cb: Callback<void>): void;
            setValue(arg0: object_t): void;
            setValueP(arg0: object_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            validateA(arg0: Java.VCardVersion, arg1: Java.VCard, cb: Callback<Java.List>): void;
            validate(arg0: Java.VCardVersion, arg1: Java.VCard): Java.List;
            validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<Java.List>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Revision {
            interface Static {
                class: Java.Object;
                new (arg0: Java.Revision): ezvcard.property.Revision;
                new (arg0: object_t): ezvcard.property.Revision;
                nowA(cb: Callback<Java.Revision>): void;
                now(): Java.Revision;
                nowP(): Promise<Java.Revision>;
            }
        }
    }
    module ezvcard.property {
        interface StructuredName extends Java.java.lang.Object {
            addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            addParameter(arg0: string_t, arg1: string_t): void;
            addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            copyA(cb: Callback<Java.StructuredName>): void;
            copy(): Java.StructuredName;
            copyP(): Promise<Java.StructuredName>;
            copyA(cb: Callback<object_t>): void;
            copy(): object_t;
            copyP(): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getAdditionalNamesA(cb: Callback<Java.List>): void;
            getAdditionalNames(): Java.List;
            getAdditionalNamesP(): Promise<Java.List>;
            getAltIdA(cb: Callback<string>): void;
            getAltId(): string;
            getAltIdP(): Promise<string>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getFamilyA(cb: Callback<string>): void;
            getFamily(): string;
            getFamilyP(): Promise<string>;
            getGivenA(cb: Callback<string>): void;
            getGiven(): string;
            getGivenP(): Promise<string>;
            getGroupA(cb: Callback<string>): void;
            getGroup(): string;
            getGroupP(): Promise<string>;
            getLanguageA(cb: Callback<string>): void;
            getLanguage(): string;
            getLanguageP(): Promise<string>;
            getParameterA(arg0: string_t, cb: Callback<string>): void;
            getParameter(arg0: string_t): string;
            getParameterP(arg0: string_t): Promise<string>;
            getParametersA(arg0: string_t, cb: Callback<Java.List>): void;
            getParameters(arg0: string_t): Java.List;
            getParametersP(arg0: string_t): Promise<Java.List>;
            getParametersA(cb: Callback<object_t>): void;
            getParameters(): object_t;
            getParametersP(): Promise<object_t>;
            getPrefixesA(cb: Callback<Java.List>): void;
            getPrefixes(): Java.List;
            getPrefixesP(): Promise<Java.List>;
            getSortAsA(cb: Callback<Java.List>): void;
            getSortAs(): Java.List;
            getSortAsP(): Promise<Java.List>;
            getSuffixesA(cb: Callback<Java.List>): void;
            getSuffixes(): Java.List;
            getSuffixesP(): Promise<Java.List>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeParameterA(arg0: string_t, cb: Callback<void>): void;
            removeParameter(arg0: string_t): void;
            removeParameterP(arg0: string_t): Promise<void>;
            setAltIdA(arg0: string_t, cb: Callback<void>): void;
            setAltId(arg0: string_t): void;
            setAltIdP(arg0: string_t): Promise<void>;
            setFamilyA(arg0: string_t, cb: Callback<void>): void;
            setFamily(arg0: string_t): void;
            setFamilyP(arg0: string_t): Promise<void>;
            setGivenA(arg0: string_t, cb: Callback<void>): void;
            setGiven(arg0: string_t): void;
            setGivenP(arg0: string_t): Promise<void>;
            setGroupA(arg0: string_t, cb: Callback<void>): void;
            setGroup(arg0: string_t): void;
            setGroupP(arg0: string_t): Promise<void>;
            setLanguageA(arg0: string_t, cb: Callback<void>): void;
            setLanguage(arg0: string_t): void;
            setLanguageP(arg0: string_t): Promise<void>;
            setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setParameter(arg0: string_t, arg1: string_t): void;
            setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            setParametersA(arg0: object_t, cb: Callback<void>): void;
            setParameters(arg0: object_t): void;
            setParametersP(arg0: object_t): Promise<void>;
            setSortAsA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setSortAs(arg0: string_t, arg1: string_t): void;
            setSortAsP(arg0: string_t, arg1: string_t): Promise<void>;
            setSortAsA(arg0: string_t, cb: Callback<void>): void;
            setSortAs(arg0: string_t): void;
            setSortAsP(arg0: string_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            validateA(arg0: Java.VCardVersion, arg1: Java.VCard, cb: Callback<Java.List>): void;
            validate(arg0: Java.VCardVersion, arg1: Java.VCard): Java.List;
            validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<Java.List>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module StructuredName {
            interface Static {
                class: Java.Object;
                new (arg0: Java.StructuredName): ezvcard.property.StructuredName;
                new (): ezvcard.property.StructuredName;
            }
        }
    }
    module ezvcard.property {
        interface Timezone extends Java.java.lang.Object {
            addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            addParameter(arg0: string_t, arg1: string_t): void;
            addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            copyA(cb: Callback<object_t>): void;
            copy(): object_t;
            copyP(): Promise<object_t>;
            copyA(cb: Callback<Java.Timezone>): void;
            copy(): Java.Timezone;
            copyP(): Promise<Java.Timezone>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getAltIdA(cb: Callback<string>): void;
            getAltId(): string;
            getAltIdP(): Promise<string>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getGroupA(cb: Callback<string>): void;
            getGroup(): string;
            getGroupP(): Promise<string>;
            getMediaTypeA(cb: Callback<string>): void;
            getMediaType(): string;
            getMediaTypeP(): Promise<string>;
            getOffsetA(cb: Callback<object_t>): void;
            getOffset(): object_t;
            getOffsetP(): Promise<object_t>;
            getParameterA(arg0: string_t, cb: Callback<string>): void;
            getParameter(arg0: string_t): string;
            getParameterP(arg0: string_t): Promise<string>;
            getParametersA(arg0: string_t, cb: Callback<Java.List>): void;
            getParameters(arg0: string_t): Java.List;
            getParametersP(arg0: string_t): Promise<Java.List>;
            getParametersA(cb: Callback<object_t>): void;
            getParameters(): object_t;
            getParametersP(): Promise<object_t>;
            getPidsA(cb: Callback<Java.List>): void;
            getPids(): Java.List;
            getPidsP(): Promise<Java.List>;
            getPrefA(cb: Callback<number>): void;
            getPref(): number;
            getPrefP(): Promise<number>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getTextA(cb: Callback<string>): void;
            getText(): string;
            getTextP(): Promise<string>;
            getTypeA(cb: Callback<string>): void;
            getType(): string;
            getTypeP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeParameterA(arg0: string_t, cb: Callback<void>): void;
            removeParameter(arg0: string_t): void;
            removeParameterP(arg0: string_t): Promise<void>;
            setAltIdA(arg0: string_t, cb: Callback<void>): void;
            setAltId(arg0: string_t): void;
            setAltIdP(arg0: string_t): Promise<void>;
            setGroupA(arg0: string_t, cb: Callback<void>): void;
            setGroup(arg0: string_t): void;
            setGroupP(arg0: string_t): Promise<void>;
            setMediaTypeA(arg0: string_t, cb: Callback<void>): void;
            setMediaType(arg0: string_t): void;
            setMediaTypeP(arg0: string_t): Promise<void>;
            setOffsetA(arg0: object_t, cb: Callback<void>): void;
            setOffset(arg0: object_t): void;
            setOffsetP(arg0: object_t): Promise<void>;
            setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setParameter(arg0: string_t, arg1: string_t): void;
            setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            setParametersA(arg0: object_t, cb: Callback<void>): void;
            setParameters(arg0: object_t): void;
            setParametersP(arg0: object_t): Promise<void>;
            setPrefA(arg0: integer_t, cb: Callback<void>): void;
            setPref(arg0: integer_t): void;
            setPrefP(arg0: integer_t): Promise<void>;
            setTextA(arg0: string_t, cb: Callback<void>): void;
            setText(arg0: string_t): void;
            setTextP(arg0: string_t): Promise<void>;
            setTypeA(arg0: string_t, cb: Callback<void>): void;
            setType(arg0: string_t): void;
            setTypeP(arg0: string_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            toTimeZoneA(cb: Callback<Java.TimeZone>): void;
            toTimeZone(): Java.TimeZone;
            toTimeZoneP(): Promise<Java.TimeZone>;
            validateA(arg0: Java.VCardVersion, arg1: Java.VCard, cb: Callback<Java.List>): void;
            validate(arg0: Java.VCardVersion, arg1: Java.VCard): Java.List;
            validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<Java.List>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Timezone {
            interface Static {
                class: Java.Object;
                new (arg0: object_t, arg1: string_t): ezvcard.property.Timezone;
                new (arg0: Java.Timezone): ezvcard.property.Timezone;
                new (arg0: object_t): ezvcard.property.Timezone;
                new (arg0: Java.TimeZone): ezvcard.property.Timezone;
                new (arg0: string_t): ezvcard.property.Timezone;
            }
        }
    }
    module ezvcard.property {
        interface Uid extends Java.java.lang.Object {
            addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            addParameter(arg0: string_t, arg1: string_t): void;
            addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            copyA(cb: Callback<object_t>): void;
            copy(): object_t;
            copyP(): Promise<object_t>;
            copyA(cb: Callback<Java.Uid>): void;
            copy(): Java.Uid;
            copyP(): Promise<Java.Uid>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getGroupA(cb: Callback<string>): void;
            getGroup(): string;
            getGroupP(): Promise<string>;
            getParameterA(arg0: string_t, cb: Callback<string>): void;
            getParameter(arg0: string_t): string;
            getParameterP(arg0: string_t): Promise<string>;
            getParametersA(arg0: string_t, cb: Callback<Java.List>): void;
            getParameters(arg0: string_t): Java.List;
            getParametersP(arg0: string_t): Promise<Java.List>;
            getParametersA(cb: Callback<object_t>): void;
            getParameters(): object_t;
            getParametersP(): Promise<object_t>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            getValueA(cb: Callback<object_t>): void;
            getValue(): object_t;
            getValueP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeParameterA(arg0: string_t, cb: Callback<void>): void;
            removeParameter(arg0: string_t): void;
            removeParameterP(arg0: string_t): Promise<void>;
            setGroupA(arg0: string_t, cb: Callback<void>): void;
            setGroup(arg0: string_t): void;
            setGroupP(arg0: string_t): Promise<void>;
            setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
            setParameter(arg0: string_t, arg1: string_t): void;
            setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
            setParametersA(arg0: object_t, cb: Callback<void>): void;
            setParameters(arg0: object_t): void;
            setParametersP(arg0: object_t): Promise<void>;
            setValueA(arg0: object_t, cb: Callback<void>): void;
            setValue(arg0: object_t): void;
            setValueP(arg0: object_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            validateA(arg0: Java.VCardVersion, arg1: Java.VCard, cb: Callback<Java.List>): void;
            validate(arg0: Java.VCardVersion, arg1: Java.VCard): Java.List;
            validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<Java.List>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Uid {
            interface Static {
                class: Java.Object;
                new (arg0: Java.Uid): ezvcard.property.Uid;
                new (arg0: string_t): ezvcard.property.Uid;
                randomA(cb: Callback<Java.Uid>): void;
                random(): Java.Uid;
                randomP(): Promise<Java.Uid>;
            }
        }
    }
    module ezvcard {
        interface SupportedVersions extends Java.java.lang.Object {
            annotationTypeA(cb: Callback<object_t>): void;
            annotationType(): object_t;
            annotationTypeP(): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            valueA(cb: Callback<Java.VCardVersion[]>): void;
            value(): Java.VCardVersion[];
            valueP(): Promise<Java.VCardVersion[]>;
        }
        module SupportedVersions {
            interface Static {
                class: Java.Object;
            }
        }
    }
    module ezvcard {
        interface ValidationWarning extends Java.java.lang.Object {
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getCodeA(cb: Callback<number>): void;
            getCode(): number;
            getCodeP(): Promise<number>;
            getMessageA(cb: Callback<string>): void;
            getMessage(): string;
            getMessageP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module ValidationWarning {
            interface Static {
                class: Java.Object;
                new (arg0: integer_t, ...arg1: object_t[]): ezvcard.ValidationWarning;
                new (arg0: string_t): ezvcard.ValidationWarning;
            }
        }
    }
    module ezvcard {
        interface ValidationWarnings extends Java.java.lang.Object {
            addA(arg0: object_t, arg1: Java.ValidationWarning, cb: Callback<void>): void;
            add(arg0: object_t, arg1: Java.ValidationWarning): void;
            addP(arg0: object_t, arg1: Java.ValidationWarning): Promise<void>;
            addA(arg0: object_t, arg1: Java.List, cb: Callback<void>): void;
            add(arg0: object_t, arg1: Java.List): void;
            addP(arg0: object_t, arg1: Java.List): Promise<void>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            forEachA(arg0: object_t, cb: Callback<void>): void;
            forEach(arg0: object_t): void;
            forEachP(arg0: object_t): Promise<void>;
            getByPropertyA(arg0: object_t, cb: Callback<Java.List>): void;
            getByProperty(arg0: object_t): Java.List;
            getByPropertyP(arg0: object_t): Promise<Java.List>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getWarningsA(cb: Callback<object_t>): void;
            getWarnings(): object_t;
            getWarningsP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isEmptyA(cb: Callback<object_t>): void;
            isEmpty(): object_t;
            isEmptyP(): Promise<object_t>;
            iteratorA(cb: Callback<object_t>): void;
            iterator(): object_t;
            iteratorP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            spliteratorA(cb: Callback<object_t>): void;
            spliterator(): object_t;
            spliteratorP(): Promise<object_t>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module ValidationWarnings {
            interface Static {
                class: Java.Object;
                new (): ezvcard.ValidationWarnings;
            }
        }
    }
    module ezvcard {
        interface VCard extends Java.java.lang.Object {
            addAddressA(arg0: Java.Address, cb: Callback<void>): void;
            addAddress(arg0: Java.Address): void;
            addAddressP(arg0: Java.Address): Promise<void>;
            addAddressAltA(arg0: array_t<Java.Address>, cb: Callback<void>): void;
            addAddressAlt(...arg0: Java.Address[]): void;
            addAddressAlt(arg0: array_t<Java.Address>): void;
            addAddressAltP(...arg0: Java.Address[]): Promise<void>;
            addAddressAltP(arg0: array_t<Java.Address>): Promise<void>;
            addCalendarRequestUriA(arg0: object_t, cb: Callback<void>): void;
            addCalendarRequestUri(arg0: object_t): void;
            addCalendarRequestUriP(arg0: object_t): Promise<void>;
            addCalendarRequestUriAltA(arg0: object_array_t, cb: Callback<void>): void;
            addCalendarRequestUriAlt(...arg0: object_t[]): void;
            addCalendarRequestUriAlt(arg0: object_array_t): void;
            addCalendarRequestUriAltP(...arg0: object_t[]): Promise<void>;
            addCalendarRequestUriAltP(arg0: object_array_t): Promise<void>;
            addCalendarUriA(arg0: object_t, cb: Callback<void>): void;
            addCalendarUri(arg0: object_t): void;
            addCalendarUriP(arg0: object_t): Promise<void>;
            addCalendarUriAltA(arg0: object_array_t, cb: Callback<void>): void;
            addCalendarUriAlt(...arg0: object_t[]): void;
            addCalendarUriAlt(arg0: object_array_t): void;
            addCalendarUriAltP(...arg0: object_t[]): Promise<void>;
            addCalendarUriAltP(arg0: object_array_t): Promise<void>;
            addCategoriesA(arg0: object_t, cb: Callback<void>): void;
            addCategories(arg0: object_t): void;
            addCategoriesP(arg0: object_t): Promise<void>;
            addCategoriesAltA(arg0: object_array_t, cb: Callback<void>): void;
            addCategoriesAlt(...arg0: object_t[]): void;
            addCategoriesAlt(arg0: object_array_t): void;
            addCategoriesAltP(...arg0: object_t[]): Promise<void>;
            addCategoriesAltP(arg0: object_array_t): Promise<void>;
            addClientPidMapA(arg0: object_t, cb: Callback<void>): void;
            addClientPidMap(arg0: object_t): void;
            addClientPidMapP(arg0: object_t): Promise<void>;
            addEmailA(arg0: string_t, arg1: object_array_t, cb: Callback<object_t>): void;
            addEmail(arg0: string_t, ...arg1: object_t[]): object_t;
            addEmail(arg0: string_t, arg1: object_array_t): object_t;
            addEmailP(arg0: string_t, ...arg1: object_t[]): Promise<object_t>;
            addEmailP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
            addEmailA(arg0: object_t, cb: Callback<void>): void;
            addEmail(arg0: object_t): void;
            addEmailP(arg0: object_t): Promise<void>;
            addEmailAltA(arg0: object_array_t, cb: Callback<void>): void;
            addEmailAlt(...arg0: object_t[]): void;
            addEmailAlt(arg0: object_array_t): void;
            addEmailAltP(...arg0: object_t[]): Promise<void>;
            addEmailAltP(arg0: object_array_t): Promise<void>;
            addExpertiseA(arg0: string_t, cb: Callback<object_t>): void;
            addExpertise(arg0: string_t): object_t;
            addExpertiseP(arg0: string_t): Promise<object_t>;
            addExpertiseA(arg0: object_t, cb: Callback<void>): void;
            addExpertise(arg0: object_t): void;
            addExpertiseP(arg0: object_t): Promise<void>;
            addExpertiseAltA(arg0: object_array_t, cb: Callback<void>): void;
            addExpertiseAlt(...arg0: object_t[]): void;
            addExpertiseAlt(arg0: object_array_t): void;
            addExpertiseAltP(...arg0: object_t[]): Promise<void>;
            addExpertiseAltP(arg0: object_array_t): Promise<void>;
            addExtendedPropertyA(arg0: string_t, arg1: string_t, arg2: Java.VCardDataType, cb: Callback<object_t>): void;
            addExtendedProperty(arg0: string_t, arg1: string_t, arg2: Java.VCardDataType): object_t;
            addExtendedPropertyP(arg0: string_t, arg1: string_t, arg2: Java.VCardDataType): Promise<object_t>;
            addExtendedPropertyA(arg0: string_t, arg1: string_t, cb: Callback<object_t>): void;
            addExtendedProperty(arg0: string_t, arg1: string_t): object_t;
            addExtendedPropertyP(arg0: string_t, arg1: string_t): Promise<object_t>;
            addFbUrlA(arg0: object_t, cb: Callback<void>): void;
            addFbUrl(arg0: object_t): void;
            addFbUrlP(arg0: object_t): Promise<void>;
            addFbUrlAltA(arg0: object_array_t, cb: Callback<void>): void;
            addFbUrlAlt(...arg0: object_t[]): void;
            addFbUrlAlt(arg0: object_array_t): void;
            addFbUrlAltP(...arg0: object_t[]): Promise<void>;
            addFbUrlAltP(arg0: object_array_t): Promise<void>;
            addFormattedNameA(arg0: object_t, cb: Callback<void>): void;
            addFormattedName(arg0: object_t): void;
            addFormattedNameP(arg0: object_t): Promise<void>;
            addFormattedNameAltA(arg0: object_array_t, cb: Callback<void>): void;
            addFormattedNameAlt(...arg0: object_t[]): void;
            addFormattedNameAlt(arg0: object_array_t): void;
            addFormattedNameAltP(...arg0: object_t[]): Promise<void>;
            addFormattedNameAltP(arg0: object_array_t): Promise<void>;
            addGeoA(arg0: object_t, cb: Callback<void>): void;
            addGeo(arg0: object_t): void;
            addGeoP(arg0: object_t): Promise<void>;
            addGeoAltA(arg0: object_array_t, cb: Callback<void>): void;
            addGeoAlt(...arg0: object_t[]): void;
            addGeoAlt(arg0: object_array_t): void;
            addGeoAltP(...arg0: object_t[]): Promise<void>;
            addGeoAltP(arg0: object_array_t): Promise<void>;
            addHobbyA(arg0: string_t, cb: Callback<object_t>): void;
            addHobby(arg0: string_t): object_t;
            addHobbyP(arg0: string_t): Promise<object_t>;
            addHobbyA(arg0: object_t, cb: Callback<void>): void;
            addHobby(arg0: object_t): void;
            addHobbyP(arg0: object_t): Promise<void>;
            addHobbyAltA(arg0: object_array_t, cb: Callback<void>): void;
            addHobbyAlt(...arg0: object_t[]): void;
            addHobbyAlt(arg0: object_array_t): void;
            addHobbyAltP(...arg0: object_t[]): Promise<void>;
            addHobbyAltP(arg0: object_array_t): Promise<void>;
            addImppA(arg0: object_t, cb: Callback<void>): void;
            addImpp(arg0: object_t): void;
            addImppP(arg0: object_t): Promise<void>;
            addImppAltA(arg0: object_array_t, cb: Callback<void>): void;
            addImppAlt(...arg0: object_t[]): void;
            addImppAlt(arg0: object_array_t): void;
            addImppAltP(...arg0: object_t[]): Promise<void>;
            addImppAltP(arg0: object_array_t): Promise<void>;
            addInterestA(arg0: string_t, cb: Callback<object_t>): void;
            addInterest(arg0: string_t): object_t;
            addInterestP(arg0: string_t): Promise<object_t>;
            addInterestA(arg0: object_t, cb: Callback<void>): void;
            addInterest(arg0: object_t): void;
            addInterestP(arg0: object_t): Promise<void>;
            addInterestAltA(arg0: object_array_t, cb: Callback<void>): void;
            addInterestAlt(...arg0: object_t[]): void;
            addInterestAlt(arg0: object_array_t): void;
            addInterestAltP(...arg0: object_t[]): Promise<void>;
            addInterestAltP(arg0: object_array_t): Promise<void>;
            addKeyA(arg0: object_t, cb: Callback<void>): void;
            addKey(arg0: object_t): void;
            addKeyP(arg0: object_t): Promise<void>;
            addKeyAltA(arg0: object_array_t, cb: Callback<void>): void;
            addKeyAlt(...arg0: object_t[]): void;
            addKeyAlt(arg0: object_array_t): void;
            addKeyAltP(...arg0: object_t[]): Promise<void>;
            addKeyAltP(arg0: object_array_t): Promise<void>;
            addLanguageA(arg0: string_t, cb: Callback<object_t>): void;
            addLanguage(arg0: string_t): object_t;
            addLanguageP(arg0: string_t): Promise<object_t>;
            addLanguageA(arg0: object_t, cb: Callback<void>): void;
            addLanguage(arg0: object_t): void;
            addLanguageP(arg0: object_t): Promise<void>;
            addLanguageAltA(arg0: object_array_t, cb: Callback<void>): void;
            addLanguageAlt(...arg0: object_t[]): void;
            addLanguageAlt(arg0: object_array_t): void;
            addLanguageAltP(...arg0: object_t[]): Promise<void>;
            addLanguageAltP(arg0: object_array_t): Promise<void>;
            addLogoA(arg0: object_t, cb: Callback<void>): void;
            addLogo(arg0: object_t): void;
            addLogoP(arg0: object_t): Promise<void>;
            addLogoAltA(arg0: object_array_t, cb: Callback<void>): void;
            addLogoAlt(...arg0: object_t[]): void;
            addLogoAlt(arg0: object_array_t): void;
            addLogoAltP(...arg0: object_t[]): Promise<void>;
            addLogoAltP(arg0: object_array_t): Promise<void>;
            addMemberA(arg0: object_t, cb: Callback<void>): void;
            addMember(arg0: object_t): void;
            addMemberP(arg0: object_t): Promise<void>;
            addMemberAltA(arg0: object_array_t, cb: Callback<void>): void;
            addMemberAlt(...arg0: object_t[]): void;
            addMemberAlt(arg0: object_array_t): void;
            addMemberAltP(...arg0: object_t[]): Promise<void>;
            addMemberAltP(arg0: object_array_t): Promise<void>;
            addNicknameA(arg0: object_t, cb: Callback<void>): void;
            addNickname(arg0: object_t): void;
            addNicknameP(arg0: object_t): Promise<void>;
            addNicknameAltA(arg0: object_array_t, cb: Callback<void>): void;
            addNicknameAlt(...arg0: object_t[]): void;
            addNicknameAlt(arg0: object_array_t): void;
            addNicknameAltP(...arg0: object_t[]): Promise<void>;
            addNicknameAltP(arg0: object_array_t): Promise<void>;
            addNoteA(arg0: string_t, cb: Callback<object_t>): void;
            addNote(arg0: string_t): object_t;
            addNoteP(arg0: string_t): Promise<object_t>;
            addNoteA(arg0: object_t, cb: Callback<void>): void;
            addNote(arg0: object_t): void;
            addNoteP(arg0: object_t): Promise<void>;
            addNoteAltA(arg0: object_array_t, cb: Callback<void>): void;
            addNoteAlt(...arg0: object_t[]): void;
            addNoteAlt(arg0: object_array_t): void;
            addNoteAltP(...arg0: object_t[]): Promise<void>;
            addNoteAltP(arg0: object_array_t): Promise<void>;
            addOrganizationA(arg0: object_t, cb: Callback<void>): void;
            addOrganization(arg0: object_t): void;
            addOrganizationP(arg0: object_t): Promise<void>;
            addOrganizationAltA(arg0: object_array_t, cb: Callback<void>): void;
            addOrganizationAlt(...arg0: object_t[]): void;
            addOrganizationAlt(arg0: object_array_t): void;
            addOrganizationAltP(...arg0: object_t[]): Promise<void>;
            addOrganizationAltP(arg0: object_array_t): Promise<void>;
            addOrgDirectoryA(arg0: string_t, cb: Callback<object_t>): void;
            addOrgDirectory(arg0: string_t): object_t;
            addOrgDirectoryP(arg0: string_t): Promise<object_t>;
            addOrgDirectoryA(arg0: object_t, cb: Callback<void>): void;
            addOrgDirectory(arg0: object_t): void;
            addOrgDirectoryP(arg0: object_t): Promise<void>;
            addOrgDirectoryAltA(arg0: object_array_t, cb: Callback<void>): void;
            addOrgDirectoryAlt(...arg0: object_t[]): void;
            addOrgDirectoryAlt(arg0: object_array_t): void;
            addOrgDirectoryAltP(...arg0: object_t[]): Promise<void>;
            addOrgDirectoryAltP(arg0: object_array_t): Promise<void>;
            addOrphanedLabelA(arg0: object_t, cb: Callback<void>): void;
            addOrphanedLabel(arg0: object_t): void;
            addOrphanedLabelP(arg0: object_t): Promise<void>;
            addPhotoA(arg0: Java.Photo, cb: Callback<void>): void;
            addPhoto(arg0: Java.Photo): void;
            addPhotoP(arg0: Java.Photo): Promise<void>;
            addPhotoAltA(arg0: array_t<Java.Photo>, cb: Callback<void>): void;
            addPhotoAlt(...arg0: Java.Photo[]): void;
            addPhotoAlt(arg0: array_t<Java.Photo>): void;
            addPhotoAltP(...arg0: Java.Photo[]): Promise<void>;
            addPhotoAltP(arg0: array_t<Java.Photo>): Promise<void>;
            addPropertyA(arg0: object_t, cb: Callback<void>): void;
            addProperty(arg0: object_t): void;
            addPropertyP(arg0: object_t): Promise<void>;
            addPropertyAltA(arg0: object_t, arg1: object_array_t, cb: Callback<void>): void;
            addPropertyAlt(arg0: object_t, ...arg1: object_t[]): void;
            addPropertyAlt(arg0: object_t, arg1: object_array_t): void;
            addPropertyAltP(arg0: object_t, ...arg1: object_t[]): Promise<void>;
            addPropertyAltP(arg0: object_t, arg1: object_array_t): Promise<void>;
            addPropertyAltA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            addPropertyAlt(arg0: object_t, arg1: object_t): void;
            addPropertyAltP(arg0: object_t, arg1: object_t): Promise<void>;
            addRelatedA(arg0: object_t, cb: Callback<void>): void;
            addRelated(arg0: object_t): void;
            addRelatedP(arg0: object_t): Promise<void>;
            addRelatedAltA(arg0: object_array_t, cb: Callback<void>): void;
            addRelatedAlt(...arg0: object_t[]): void;
            addRelatedAlt(arg0: object_array_t): void;
            addRelatedAltP(...arg0: object_t[]): Promise<void>;
            addRelatedAltP(arg0: object_array_t): Promise<void>;
            addRoleA(arg0: string_t, cb: Callback<object_t>): void;
            addRole(arg0: string_t): object_t;
            addRoleP(arg0: string_t): Promise<object_t>;
            addRoleA(arg0: object_t, cb: Callback<void>): void;
            addRole(arg0: object_t): void;
            addRoleP(arg0: object_t): Promise<void>;
            addRoleAltA(arg0: object_array_t, cb: Callback<void>): void;
            addRoleAlt(...arg0: object_t[]): void;
            addRoleAlt(arg0: object_array_t): void;
            addRoleAltP(...arg0: object_t[]): Promise<void>;
            addRoleAltP(arg0: object_array_t): Promise<void>;
            addSoundA(arg0: object_t, cb: Callback<void>): void;
            addSound(arg0: object_t): void;
            addSoundP(arg0: object_t): Promise<void>;
            addSoundAltA(arg0: object_array_t, cb: Callback<void>): void;
            addSoundAlt(...arg0: object_t[]): void;
            addSoundAlt(arg0: object_array_t): void;
            addSoundAltP(...arg0: object_t[]): Promise<void>;
            addSoundAltP(arg0: object_array_t): Promise<void>;
            addSourceA(arg0: string_t, cb: Callback<object_t>): void;
            addSource(arg0: string_t): object_t;
            addSourceP(arg0: string_t): Promise<object_t>;
            addSourceA(arg0: object_t, cb: Callback<void>): void;
            addSource(arg0: object_t): void;
            addSourceP(arg0: object_t): Promise<void>;
            addSourceAltA(arg0: object_array_t, cb: Callback<void>): void;
            addSourceAlt(...arg0: object_t[]): void;
            addSourceAlt(arg0: object_array_t): void;
            addSourceAltP(...arg0: object_t[]): Promise<void>;
            addSourceAltP(arg0: object_array_t): Promise<void>;
            addTelephoneNumberA(arg0: string_t, arg1: array_t<Java.TelephoneType>, cb: Callback<object_t>): void;
            addTelephoneNumber(arg0: string_t, ...arg1: Java.TelephoneType[]): object_t;
            addTelephoneNumber(arg0: string_t, arg1: array_t<Java.TelephoneType>): object_t;
            addTelephoneNumberP(arg0: string_t, ...arg1: Java.TelephoneType[]): Promise<object_t>;
            addTelephoneNumberP(arg0: string_t, arg1: array_t<Java.TelephoneType>): Promise<object_t>;
            addTelephoneNumberA(arg0: object_t, cb: Callback<void>): void;
            addTelephoneNumber(arg0: object_t): void;
            addTelephoneNumberP(arg0: object_t): Promise<void>;
            addTelephoneNumberAltA(arg0: object_array_t, cb: Callback<void>): void;
            addTelephoneNumberAlt(...arg0: object_t[]): void;
            addTelephoneNumberAlt(arg0: object_array_t): void;
            addTelephoneNumberAltP(...arg0: object_t[]): Promise<void>;
            addTelephoneNumberAltP(arg0: object_array_t): Promise<void>;
            addTimezoneA(arg0: Java.Timezone, cb: Callback<void>): void;
            addTimezone(arg0: Java.Timezone): void;
            addTimezoneP(arg0: Java.Timezone): Promise<void>;
            addTimezoneAltA(arg0: array_t<Java.Timezone>, cb: Callback<void>): void;
            addTimezoneAlt(...arg0: Java.Timezone[]): void;
            addTimezoneAlt(arg0: array_t<Java.Timezone>): void;
            addTimezoneAltP(...arg0: Java.Timezone[]): Promise<void>;
            addTimezoneAltP(arg0: array_t<Java.Timezone>): Promise<void>;
            addTitleA(arg0: string_t, cb: Callback<object_t>): void;
            addTitle(arg0: string_t): object_t;
            addTitleP(arg0: string_t): Promise<object_t>;
            addTitleA(arg0: object_t, cb: Callback<void>): void;
            addTitle(arg0: object_t): void;
            addTitleP(arg0: object_t): Promise<void>;
            addTitleAltA(arg0: object_array_t, cb: Callback<void>): void;
            addTitleAlt(...arg0: object_t[]): void;
            addTitleAlt(arg0: object_array_t): void;
            addTitleAltP(...arg0: object_t[]): Promise<void>;
            addTitleAltP(arg0: object_array_t): Promise<void>;
            addUrlA(arg0: string_t, cb: Callback<object_t>): void;
            addUrl(arg0: string_t): object_t;
            addUrlP(arg0: string_t): Promise<object_t>;
            addUrlA(arg0: object_t, cb: Callback<void>): void;
            addUrl(arg0: object_t): void;
            addUrlP(arg0: object_t): Promise<void>;
            addUrlAltA(arg0: object_array_t, cb: Callback<void>): void;
            addUrlAlt(...arg0: object_t[]): void;
            addUrlAlt(arg0: object_array_t): void;
            addUrlAltP(...arg0: object_t[]): Promise<void>;
            addUrlAltP(arg0: object_array_t): Promise<void>;
            addXmlA(arg0: object_t, cb: Callback<void>): void;
            addXml(arg0: object_t): void;
            addXmlP(arg0: object_t): Promise<void>;
            addXmlAltA(arg0: object_array_t, cb: Callback<void>): void;
            addXmlAlt(...arg0: object_t[]): void;
            addXmlAlt(arg0: object_array_t): void;
            addXmlAltP(...arg0: object_t[]): Promise<void>;
            addXmlAltP(arg0: object_array_t): Promise<void>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            forEachA(arg0: object_t, cb: Callback<void>): void;
            forEach(arg0: object_t): void;
            forEachP(arg0: object_t): Promise<void>;
            getAddressesA(cb: Callback<Java.List>): void;
            getAddresses(): Java.List;
            getAddressesP(): Promise<Java.List>;
            getAgentA(cb: Callback<object_t>): void;
            getAgent(): object_t;
            getAgentP(): Promise<object_t>;
            getAnniversariesA(cb: Callback<Java.List>): void;
            getAnniversaries(): Java.List;
            getAnniversariesP(): Promise<Java.List>;
            getAnniversaryA(cb: Callback<object_t>): void;
            getAnniversary(): object_t;
            getAnniversaryP(): Promise<object_t>;
            getBirthdayA(cb: Callback<Java.Birthday>): void;
            getBirthday(): Java.Birthday;
            getBirthdayP(): Promise<Java.Birthday>;
            getBirthdaysA(cb: Callback<Java.List>): void;
            getBirthdays(): Java.List;
            getBirthdaysP(): Promise<Java.List>;
            getBirthplaceA(cb: Callback<object_t>): void;
            getBirthplace(): object_t;
            getBirthplaceP(): Promise<object_t>;
            getBirthplacesA(cb: Callback<Java.List>): void;
            getBirthplaces(): Java.List;
            getBirthplacesP(): Promise<Java.List>;
            getCalendarRequestUrisA(cb: Callback<Java.List>): void;
            getCalendarRequestUris(): Java.List;
            getCalendarRequestUrisP(): Promise<Java.List>;
            getCalendarUrisA(cb: Callback<Java.List>): void;
            getCalendarUris(): Java.List;
            getCalendarUrisP(): Promise<Java.List>;
            getCategoriesA(cb: Callback<object_t>): void;
            getCategories(): object_t;
            getCategoriesP(): Promise<object_t>;
            getCategoriesListA(cb: Callback<Java.List>): void;
            getCategoriesList(): Java.List;
            getCategoriesListP(): Promise<Java.List>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getClassificationA(cb: Callback<object_t>): void;
            getClassification(): object_t;
            getClassificationP(): Promise<object_t>;
            getClientPidMapsA(cb: Callback<Java.List>): void;
            getClientPidMaps(): Java.List;
            getClientPidMapsP(): Promise<Java.List>;
            getDeathdateA(cb: Callback<object_t>): void;
            getDeathdate(): object_t;
            getDeathdateP(): Promise<object_t>;
            getDeathdatesA(cb: Callback<Java.List>): void;
            getDeathdates(): Java.List;
            getDeathdatesP(): Promise<Java.List>;
            getDeathplaceA(cb: Callback<object_t>): void;
            getDeathplace(): object_t;
            getDeathplaceP(): Promise<object_t>;
            getDeathplacesA(cb: Callback<Java.List>): void;
            getDeathplaces(): Java.List;
            getDeathplacesP(): Promise<Java.List>;
            getEmailsA(cb: Callback<Java.List>): void;
            getEmails(): Java.List;
            getEmailsP(): Promise<Java.List>;
            getExpertiseA(cb: Callback<Java.List>): void;
            getExpertise(): Java.List;
            getExpertiseP(): Promise<Java.List>;
            getExtendedPropertiesA(arg0: string_t, cb: Callback<Java.List>): void;
            getExtendedProperties(arg0: string_t): Java.List;
            getExtendedPropertiesP(arg0: string_t): Promise<Java.List>;
            getExtendedPropertiesA(cb: Callback<Java.List>): void;
            getExtendedProperties(): Java.List;
            getExtendedPropertiesP(): Promise<Java.List>;
            getExtendedPropertyA(arg0: string_t, cb: Callback<object_t>): void;
            getExtendedProperty(arg0: string_t): object_t;
            getExtendedPropertyP(arg0: string_t): Promise<object_t>;
            getFbUrlsA(cb: Callback<Java.List>): void;
            getFbUrls(): Java.List;
            getFbUrlsP(): Promise<Java.List>;
            getFormattedNameA(cb: Callback<object_t>): void;
            getFormattedName(): object_t;
            getFormattedNameP(): Promise<object_t>;
            getFormattedNamesA(cb: Callback<Java.List>): void;
            getFormattedNames(): Java.List;
            getFormattedNamesP(): Promise<Java.List>;
            getGenderA(cb: Callback<object_t>): void;
            getGender(): object_t;
            getGenderP(): Promise<object_t>;
            getGeoA(cb: Callback<object_t>): void;
            getGeo(): object_t;
            getGeoP(): Promise<object_t>;
            getGeosA(cb: Callback<Java.List>): void;
            getGeos(): Java.List;
            getGeosP(): Promise<Java.List>;
            getHobbiesA(cb: Callback<Java.List>): void;
            getHobbies(): Java.List;
            getHobbiesP(): Promise<Java.List>;
            getImppsA(cb: Callback<Java.List>): void;
            getImpps(): Java.List;
            getImppsP(): Promise<Java.List>;
            getInterestsA(cb: Callback<Java.List>): void;
            getInterests(): Java.List;
            getInterestsP(): Promise<Java.List>;
            getKeysA(cb: Callback<Java.List>): void;
            getKeys(): Java.List;
            getKeysP(): Promise<Java.List>;
            getKindA(cb: Callback<object_t>): void;
            getKind(): object_t;
            getKindP(): Promise<object_t>;
            getLanguagesA(cb: Callback<Java.List>): void;
            getLanguages(): Java.List;
            getLanguagesP(): Promise<Java.List>;
            getLogosA(cb: Callback<Java.List>): void;
            getLogos(): Java.List;
            getLogosP(): Promise<Java.List>;
            getMailerA(cb: Callback<object_t>): void;
            getMailer(): object_t;
            getMailerP(): Promise<object_t>;
            getMembersA(cb: Callback<Java.List>): void;
            getMembers(): Java.List;
            getMembersP(): Promise<Java.List>;
            getNicknameA(cb: Callback<object_t>): void;
            getNickname(): object_t;
            getNicknameP(): Promise<object_t>;
            getNicknamesA(cb: Callback<Java.List>): void;
            getNicknames(): Java.List;
            getNicknamesP(): Promise<Java.List>;
            getNotesA(cb: Callback<Java.List>): void;
            getNotes(): Java.List;
            getNotesP(): Promise<Java.List>;
            getOrganizationA(cb: Callback<object_t>): void;
            getOrganization(): object_t;
            getOrganizationP(): Promise<object_t>;
            getOrganizationsA(cb: Callback<Java.List>): void;
            getOrganizations(): Java.List;
            getOrganizationsP(): Promise<Java.List>;
            getOrgDirectoriesA(cb: Callback<Java.List>): void;
            getOrgDirectories(): Java.List;
            getOrgDirectoriesP(): Promise<Java.List>;
            getOrphanedLabelsA(cb: Callback<Java.List>): void;
            getOrphanedLabels(): Java.List;
            getOrphanedLabelsP(): Promise<Java.List>;
            getPhotosA(cb: Callback<Java.List>): void;
            getPhotos(): Java.List;
            getPhotosP(): Promise<Java.List>;
            getProductIdA(cb: Callback<object_t>): void;
            getProductId(): object_t;
            getProductIdP(): Promise<object_t>;
            getProfileA(cb: Callback<object_t>): void;
            getProfile(): object_t;
            getProfileP(): Promise<object_t>;
            getPropertiesA(arg0: object_t, cb: Callback<Java.List>): void;
            getProperties(arg0: object_t): Java.List;
            getPropertiesP(arg0: object_t): Promise<Java.List>;
            getPropertiesA(cb: Callback<object_t>): void;
            getProperties(): object_t;
            getPropertiesP(): Promise<object_t>;
            getPropertiesAltA(arg0: object_t, cb: Callback<Java.List>): void;
            getPropertiesAlt(arg0: object_t): Java.List;
            getPropertiesAltP(arg0: object_t): Promise<Java.List>;
            getPropertyA(arg0: object_t, cb: Callback<object_t>): void;
            getProperty(arg0: object_t): object_t;
            getPropertyP(arg0: object_t): Promise<object_t>;
            getRelationsA(cb: Callback<Java.List>): void;
            getRelations(): Java.List;
            getRelationsP(): Promise<Java.List>;
            getRevisionA(cb: Callback<Java.Revision>): void;
            getRevision(): Java.Revision;
            getRevisionP(): Promise<Java.Revision>;
            getRolesA(cb: Callback<Java.List>): void;
            getRoles(): Java.List;
            getRolesP(): Promise<Java.List>;
            getSortStringA(cb: Callback<object_t>): void;
            getSortString(): object_t;
            getSortStringP(): Promise<object_t>;
            getSoundsA(cb: Callback<Java.List>): void;
            getSounds(): Java.List;
            getSoundsP(): Promise<Java.List>;
            getSourceDisplayTextA(cb: Callback<object_t>): void;
            getSourceDisplayText(): object_t;
            getSourceDisplayTextP(): Promise<object_t>;
            getSourcesA(cb: Callback<Java.List>): void;
            getSources(): Java.List;
            getSourcesP(): Promise<Java.List>;
            getStructuredNameA(cb: Callback<Java.StructuredName>): void;
            getStructuredName(): Java.StructuredName;
            getStructuredNameP(): Promise<Java.StructuredName>;
            getStructuredNamesA(cb: Callback<Java.List>): void;
            getStructuredNames(): Java.List;
            getStructuredNamesP(): Promise<Java.List>;
            getTelephoneNumbersA(cb: Callback<Java.List>): void;
            getTelephoneNumbers(): Java.List;
            getTelephoneNumbersP(): Promise<Java.List>;
            getTimezoneA(cb: Callback<Java.Timezone>): void;
            getTimezone(): Java.Timezone;
            getTimezoneP(): Promise<Java.Timezone>;
            getTimezonesA(cb: Callback<Java.List>): void;
            getTimezones(): Java.List;
            getTimezonesP(): Promise<Java.List>;
            getTitlesA(cb: Callback<Java.List>): void;
            getTitles(): Java.List;
            getTitlesP(): Promise<Java.List>;
            getUidA(cb: Callback<Java.Uid>): void;
            getUid(): Java.Uid;
            getUidP(): Promise<Java.Uid>;
            getUrlsA(cb: Callback<Java.List>): void;
            getUrls(): Java.List;
            getUrlsP(): Promise<Java.List>;
            getVersionA(cb: Callback<Java.VCardVersion>): void;
            getVersion(): Java.VCardVersion;
            getVersionP(): Promise<Java.VCardVersion>;
            getXmlsA(cb: Callback<Java.List>): void;
            getXmls(): Java.List;
            getXmlsP(): Promise<Java.List>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            iteratorA(cb: Callback<object_t>): void;
            iterator(): object_t;
            iteratorP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            removeExtendedPropertyA(arg0: string_t, cb: Callback<Java.List>): void;
            removeExtendedProperty(arg0: string_t): Java.List;
            removeExtendedPropertyP(arg0: string_t): Promise<Java.List>;
            removePropertiesA(arg0: object_t, cb: Callback<Java.List>): void;
            removeProperties(arg0: object_t): Java.List;
            removePropertiesP(arg0: object_t): Promise<Java.List>;
            removePropertyA(arg0: object_t, cb: Callback<object_t>): void;
            removeProperty(arg0: object_t): object_t;
            removePropertyP(arg0: object_t): Promise<object_t>;
            setAgentA(arg0: object_t, cb: Callback<void>): void;
            setAgent(arg0: object_t): void;
            setAgentP(arg0: object_t): Promise<void>;
            setAnniversaryA(arg0: object_t, cb: Callback<void>): void;
            setAnniversary(arg0: object_t): void;
            setAnniversaryP(arg0: object_t): Promise<void>;
            setAnniversaryAltA(arg0: object_array_t, cb: Callback<void>): void;
            setAnniversaryAlt(...arg0: object_t[]): void;
            setAnniversaryAlt(arg0: object_array_t): void;
            setAnniversaryAltP(...arg0: object_t[]): Promise<void>;
            setAnniversaryAltP(arg0: object_array_t): Promise<void>;
            setBirthdayA(arg0: Java.Birthday, cb: Callback<void>): void;
            setBirthday(arg0: Java.Birthday): void;
            setBirthdayP(arg0: Java.Birthday): Promise<void>;
            setBirthdayAltA(arg0: array_t<Java.Birthday>, cb: Callback<void>): void;
            setBirthdayAlt(...arg0: Java.Birthday[]): void;
            setBirthdayAlt(arg0: array_t<Java.Birthday>): void;
            setBirthdayAltP(...arg0: Java.Birthday[]): Promise<void>;
            setBirthdayAltP(arg0: array_t<Java.Birthday>): Promise<void>;
            setBirthplaceA(arg0: object_t, cb: Callback<void>): void;
            setBirthplace(arg0: object_t): void;
            setBirthplaceP(arg0: object_t): Promise<void>;
            setBirthplaceAltA(arg0: object_array_t, cb: Callback<void>): void;
            setBirthplaceAlt(...arg0: object_t[]): void;
            setBirthplaceAlt(arg0: object_array_t): void;
            setBirthplaceAltP(...arg0: object_t[]): Promise<void>;
            setBirthplaceAltP(arg0: object_array_t): Promise<void>;
            setCategoriesA(arg0: array_t<string_t>, cb: Callback<object_t>): void;
            setCategories(...arg0: string_t[]): object_t;
            setCategories(arg0: array_t<string_t>): object_t;
            setCategoriesP(...arg0: string_t[]): Promise<object_t>;
            setCategoriesP(arg0: array_t<string_t>): Promise<object_t>;
            setCategoriesA(arg0: object_t, cb: Callback<void>): void;
            setCategories(arg0: object_t): void;
            setCategoriesP(arg0: object_t): Promise<void>;
            setCategoriesAltA(arg0: object_array_t, cb: Callback<void>): void;
            setCategoriesAlt(...arg0: object_t[]): void;
            setCategoriesAlt(arg0: object_array_t): void;
            setCategoriesAltP(...arg0: object_t[]): Promise<void>;
            setCategoriesAltP(arg0: object_array_t): Promise<void>;
            setClassificationA(arg0: string_t, cb: Callback<object_t>): void;
            setClassification(arg0: string_t): object_t;
            setClassificationP(arg0: string_t): Promise<object_t>;
            setClassificationA(arg0: object_t, cb: Callback<void>): void;
            setClassification(arg0: object_t): void;
            setClassificationP(arg0: object_t): Promise<void>;
            setDeathdateA(arg0: object_t, cb: Callback<void>): void;
            setDeathdate(arg0: object_t): void;
            setDeathdateP(arg0: object_t): Promise<void>;
            setDeathdateAltA(arg0: object_array_t, cb: Callback<void>): void;
            setDeathdateAlt(...arg0: object_t[]): void;
            setDeathdateAlt(arg0: object_array_t): void;
            setDeathdateAltP(...arg0: object_t[]): Promise<void>;
            setDeathdateAltP(arg0: object_array_t): Promise<void>;
            setDeathplaceA(arg0: object_t, cb: Callback<void>): void;
            setDeathplace(arg0: object_t): void;
            setDeathplaceP(arg0: object_t): Promise<void>;
            setDeathplaceAltA(arg0: object_array_t, cb: Callback<void>): void;
            setDeathplaceAlt(...arg0: object_t[]): void;
            setDeathplaceAlt(arg0: object_array_t): void;
            setDeathplaceAltP(...arg0: object_t[]): Promise<void>;
            setDeathplaceAltP(arg0: object_array_t): Promise<void>;
            setExtendedPropertyA(arg0: string_t, arg1: string_t, arg2: Java.VCardDataType, cb: Callback<object_t>): void;
            setExtendedProperty(arg0: string_t, arg1: string_t, arg2: Java.VCardDataType): object_t;
            setExtendedPropertyP(arg0: string_t, arg1: string_t, arg2: Java.VCardDataType): Promise<object_t>;
            setExtendedPropertyA(arg0: string_t, arg1: string_t, cb: Callback<object_t>): void;
            setExtendedProperty(arg0: string_t, arg1: string_t): object_t;
            setExtendedPropertyP(arg0: string_t, arg1: string_t): Promise<object_t>;
            setFormattedNameA(arg0: string_t, cb: Callback<object_t>): void;
            setFormattedName(arg0: string_t): object_t;
            setFormattedNameP(arg0: string_t): Promise<object_t>;
            setFormattedNameA(arg0: object_t, cb: Callback<void>): void;
            setFormattedName(arg0: object_t): void;
            setFormattedNameP(arg0: object_t): Promise<void>;
            setFormattedNameAltA(arg0: object_array_t, cb: Callback<void>): void;
            setFormattedNameAlt(...arg0: object_t[]): void;
            setFormattedNameAlt(arg0: object_array_t): void;
            setFormattedNameAltP(...arg0: object_t[]): Promise<void>;
            setFormattedNameAltP(arg0: object_array_t): Promise<void>;
            setGenderA(arg0: object_t, cb: Callback<void>): void;
            setGender(arg0: object_t): void;
            setGenderP(arg0: object_t): Promise<void>;
            setGeoA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            setGeo(arg0: object_t, arg1: object_t): object_t;
            setGeoP(arg0: object_t, arg1: object_t): Promise<object_t>;
            setGeoA(arg0: object_t, cb: Callback<void>): void;
            setGeo(arg0: object_t): void;
            setGeoP(arg0: object_t): Promise<void>;
            setGeoAltA(arg0: object_array_t, cb: Callback<void>): void;
            setGeoAlt(...arg0: object_t[]): void;
            setGeoAlt(arg0: object_array_t): void;
            setGeoAltP(...arg0: object_t[]): Promise<void>;
            setGeoAltP(arg0: object_array_t): Promise<void>;
            setKindA(arg0: object_t, cb: Callback<void>): void;
            setKind(arg0: object_t): void;
            setKindP(arg0: object_t): Promise<void>;
            setMailerA(arg0: string_t, cb: Callback<object_t>): void;
            setMailer(arg0: string_t): object_t;
            setMailerP(arg0: string_t): Promise<object_t>;
            setMailerA(arg0: object_t, cb: Callback<void>): void;
            setMailer(arg0: object_t): void;
            setMailerP(arg0: object_t): Promise<void>;
            setNicknameA(arg0: array_t<string_t>, cb: Callback<object_t>): void;
            setNickname(...arg0: string_t[]): object_t;
            setNickname(arg0: array_t<string_t>): object_t;
            setNicknameP(...arg0: string_t[]): Promise<object_t>;
            setNicknameP(arg0: array_t<string_t>): Promise<object_t>;
            setNicknameA(arg0: object_t, cb: Callback<void>): void;
            setNickname(arg0: object_t): void;
            setNicknameP(arg0: object_t): Promise<void>;
            setNicknameAltA(arg0: object_array_t, cb: Callback<void>): void;
            setNicknameAlt(...arg0: object_t[]): void;
            setNicknameAlt(arg0: object_array_t): void;
            setNicknameAltP(...arg0: object_t[]): Promise<void>;
            setNicknameAltP(arg0: object_array_t): Promise<void>;
            setOrganizationA(arg0: array_t<string_t>, cb: Callback<object_t>): void;
            setOrganization(...arg0: string_t[]): object_t;
            setOrganization(arg0: array_t<string_t>): object_t;
            setOrganizationP(...arg0: string_t[]): Promise<object_t>;
            setOrganizationP(arg0: array_t<string_t>): Promise<object_t>;
            setOrganizationA(arg0: object_t, cb: Callback<void>): void;
            setOrganization(arg0: object_t): void;
            setOrganizationP(arg0: object_t): Promise<void>;
            setOrganizationAltA(arg0: object_array_t, cb: Callback<void>): void;
            setOrganizationAlt(...arg0: object_t[]): void;
            setOrganizationAlt(arg0: object_array_t): void;
            setOrganizationAltP(...arg0: object_t[]): Promise<void>;
            setOrganizationAltP(arg0: object_array_t): Promise<void>;
            setProductIdA(arg0: string_t, cb: Callback<object_t>): void;
            setProductId(arg0: string_t): object_t;
            setProductIdP(arg0: string_t): Promise<object_t>;
            setProductIdA(arg0: object_t, cb: Callback<void>): void;
            setProductId(arg0: object_t): void;
            setProductIdP(arg0: object_t): Promise<void>;
            setProfileA(arg0: object_t, cb: Callback<void>): void;
            setProfile(arg0: object_t): void;
            setProfileP(arg0: object_t): Promise<void>;
            setPropertyA(arg0: object_t, arg1: object_t, cb: Callback<Java.List>): void;
            setProperty(arg0: object_t, arg1: object_t): Java.List;
            setPropertyP(arg0: object_t, arg1: object_t): Promise<Java.List>;
            setPropertyA(arg0: object_t, cb: Callback<Java.List>): void;
            setProperty(arg0: object_t): Java.List;
            setPropertyP(arg0: object_t): Promise<Java.List>;
            setPropertyAltA(arg0: object_t, arg1: object_array_t, cb: Callback<Java.List>): void;
            setPropertyAlt(arg0: object_t, ...arg1: object_t[]): Java.List;
            setPropertyAlt(arg0: object_t, arg1: object_array_t): Java.List;
            setPropertyAltP(arg0: object_t, ...arg1: object_t[]): Promise<Java.List>;
            setPropertyAltP(arg0: object_t, arg1: object_array_t): Promise<Java.List>;
            setPropertyAltA(arg0: object_t, arg1: object_t, cb: Callback<Java.List>): void;
            setPropertyAlt(arg0: object_t, arg1: object_t): Java.List;
            setPropertyAltP(arg0: object_t, arg1: object_t): Promise<Java.List>;
            setRevisionA(arg0: object_t, cb: Callback<Java.Revision>): void;
            setRevision(arg0: object_t): Java.Revision;
            setRevisionP(arg0: object_t): Promise<Java.Revision>;
            setRevisionA(arg0: Java.Revision, cb: Callback<void>): void;
            setRevision(arg0: Java.Revision): void;
            setRevisionP(arg0: Java.Revision): Promise<void>;
            setSortStringA(arg0: string_t, cb: Callback<object_t>): void;
            setSortString(arg0: string_t): object_t;
            setSortStringP(arg0: string_t): Promise<object_t>;
            setSortStringA(arg0: object_t, cb: Callback<void>): void;
            setSortString(arg0: object_t): void;
            setSortStringP(arg0: object_t): Promise<void>;
            setSourceDisplayTextA(arg0: string_t, cb: Callback<object_t>): void;
            setSourceDisplayText(arg0: string_t): object_t;
            setSourceDisplayTextP(arg0: string_t): Promise<object_t>;
            setSourceDisplayTextA(arg0: object_t, cb: Callback<void>): void;
            setSourceDisplayText(arg0: object_t): void;
            setSourceDisplayTextP(arg0: object_t): Promise<void>;
            setStructuredNameA(arg0: Java.StructuredName, cb: Callback<void>): void;
            setStructuredName(arg0: Java.StructuredName): void;
            setStructuredNameP(arg0: Java.StructuredName): Promise<void>;
            setStructuredNameAltA(arg0: array_t<Java.StructuredName>, cb: Callback<void>): void;
            setStructuredNameAlt(...arg0: Java.StructuredName[]): void;
            setStructuredNameAlt(arg0: array_t<Java.StructuredName>): void;
            setStructuredNameAltP(...arg0: Java.StructuredName[]): Promise<void>;
            setStructuredNameAltP(arg0: array_t<Java.StructuredName>): Promise<void>;
            setTimezoneA(arg0: Java.Timezone, cb: Callback<void>): void;
            setTimezone(arg0: Java.Timezone): void;
            setTimezoneP(arg0: Java.Timezone): Promise<void>;
            setTimezoneAltA(arg0: array_t<Java.Timezone>, cb: Callback<void>): void;
            setTimezoneAlt(...arg0: Java.Timezone[]): void;
            setTimezoneAlt(arg0: array_t<Java.Timezone>): void;
            setTimezoneAltP(...arg0: Java.Timezone[]): Promise<void>;
            setTimezoneAltP(arg0: array_t<Java.Timezone>): Promise<void>;
            setUidA(arg0: Java.Uid, cb: Callback<void>): void;
            setUid(arg0: Java.Uid): void;
            setUidP(arg0: Java.Uid): Promise<void>;
            setVersionA(arg0: Java.VCardVersion, cb: Callback<void>): void;
            setVersion(arg0: Java.VCardVersion): void;
            setVersionP(arg0: Java.VCardVersion): Promise<void>;
            spliteratorA(cb: Callback<object_t>): void;
            spliterator(): object_t;
            spliteratorP(): Promise<object_t>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            validateA(arg0: Java.VCardVersion, cb: Callback<Java.ValidationWarnings>): void;
            validate(arg0: Java.VCardVersion): Java.ValidationWarnings;
            validateP(arg0: Java.VCardVersion): Promise<Java.ValidationWarnings>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
            writeA(arg0: object_t, cb: Callback<void>): void;
            write(arg0: object_t): void;
            writeP(arg0: object_t): Promise<void>;
            writeA(arg0: object_t, cb: Callback<void>): void;
            write(arg0: object_t): void;
            writeP(arg0: object_t): Promise<void>;
            writeA(arg0: Java.File, cb: Callback<void>): void;
            write(arg0: Java.File): void;
            writeP(arg0: Java.File): Promise<void>;
            writeA(cb: Callback<string>): void;
            write(): string;
            writeP(): Promise<string>;
            writeHtmlA(arg0: object_t, cb: Callback<void>): void;
            writeHtml(arg0: object_t): void;
            writeHtmlP(arg0: object_t): Promise<void>;
            writeHtmlA(arg0: object_t, cb: Callback<void>): void;
            writeHtml(arg0: object_t): void;
            writeHtmlP(arg0: object_t): Promise<void>;
            writeHtmlA(arg0: Java.File, cb: Callback<void>): void;
            writeHtml(arg0: Java.File): void;
            writeHtmlP(arg0: Java.File): Promise<void>;
            writeHtmlA(cb: Callback<string>): void;
            writeHtml(): string;
            writeHtmlP(): Promise<string>;
            writeJsonA(arg0: object_t, cb: Callback<void>): void;
            writeJson(arg0: object_t): void;
            writeJsonP(arg0: object_t): Promise<void>;
            writeJsonA(arg0: object_t, cb: Callback<void>): void;
            writeJson(arg0: object_t): void;
            writeJsonP(arg0: object_t): Promise<void>;
            writeJsonA(arg0: Java.File, cb: Callback<void>): void;
            writeJson(arg0: Java.File): void;
            writeJsonP(arg0: Java.File): Promise<void>;
            writeJsonA(cb: Callback<string>): void;
            writeJson(): string;
            writeJsonP(): Promise<string>;
            writeXmlA(arg0: object_t, cb: Callback<void>): void;
            writeXml(arg0: object_t): void;
            writeXmlP(arg0: object_t): Promise<void>;
            writeXmlA(arg0: object_t, cb: Callback<void>): void;
            writeXml(arg0: object_t): void;
            writeXmlP(arg0: object_t): Promise<void>;
            writeXmlA(arg0: Java.File, cb: Callback<void>): void;
            writeXml(arg0: Java.File): void;
            writeXmlP(arg0: Java.File): Promise<void>;
            writeXmlA(cb: Callback<string>): void;
            writeXml(): string;
            writeXmlP(): Promise<string>;
        }
        module VCard {
            interface Static {
                class: Java.Object;
                new (arg0: Java.VCardVersion): ezvcard.VCard;
                new (arg0: Java.VCard): ezvcard.VCard;
                new (): ezvcard.VCard;
            }
        }
    }
    module ezvcard {
        interface VCardDataType extends Java.java.lang.Object {
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getNameA(cb: Callback<string>): void;
            getName(): string;
            getNameP(): Promise<string>;
            getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
            getSupportedVersions(): Java.VCardVersion[];
            getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
            isSupportedBy(arg0: Java.VCardVersion): object_t;
            isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module VCardDataType {
            interface Static {
                URL: Java.VCardDataType;
                CONTENT_ID: Java.VCardDataType;
                BINARY: Java.VCardDataType;
                URI: Java.VCardDataType;
                TEXT: Java.VCardDataType;
                DATE: Java.VCardDataType;
                TIME: Java.VCardDataType;
                DATE_TIME: Java.VCardDataType;
                DATE_AND_OR_TIME: Java.VCardDataType;
                TIMESTAMP: Java.VCardDataType;
                BOOLEAN: Java.VCardDataType;
                INTEGER: Java.VCardDataType;
                FLOAT: Java.VCardDataType;
                UTC_OFFSET: Java.VCardDataType;
                LANGUAGE_TAG: Java.VCardDataType;
                class: Java.Object;
                allA(cb: Callback<object_t>): void;
                all(): object_t;
                allP(): Promise<object_t>;
                findA(arg0: string_t, cb: Callback<Java.VCardDataType>): void;
                find(arg0: string_t): Java.VCardDataType;
                findP(arg0: string_t): Promise<Java.VCardDataType>;
                getA(arg0: string_t, cb: Callback<Java.VCardDataType>): void;
                get(arg0: string_t): Java.VCardDataType;
                getP(arg0: string_t): Promise<Java.VCardDataType>;
            }
        }
    }
    module ezvcard {
        interface VCardVersion extends Java.java.lang.Object {
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            describeConstableA(cb: Callback<object_t>): void;
            describeConstable(): object_t;
            describeConstableP(): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getDeclaringClassA(cb: Callback<object_t>): void;
            getDeclaringClass(): object_t;
            getDeclaringClassP(): Promise<object_t>;
            getSyntaxStyleA(cb: Callback<object_t>): void;
            getSyntaxStyle(): object_t;
            getSyntaxStyleP(): Promise<object_t>;
            getVersionA(cb: Callback<string>): void;
            getVersion(): string;
            getVersionP(): Promise<string>;
            getXmlNamespaceA(cb: Callback<string>): void;
            getXmlNamespace(): string;
            getXmlNamespaceP(): Promise<string>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            nameA(cb: Callback<string>): void;
            name(): string;
            nameP(): Promise<string>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            ordinalA(cb: Callback<number>): void;
            ordinal(): number;
            ordinalP(): Promise<number>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module VCardVersion {
            interface Static {
                V2_1: Java.VCardVersion;
                V3_0: Java.VCardVersion;
                V4_0: Java.VCardVersion;
                class: Java.Object;
                valueOfA(arg0: object_t, arg1: string_t, cb: Callback<object_t>): void;
                valueOf(arg0: object_t, arg1: string_t): object_t;
                valueOfP(arg0: object_t, arg1: string_t): Promise<object_t>;
                valueOfA(arg0: string_t, cb: Callback<Java.VCardVersion>): void;
                valueOf(arg0: string_t): Java.VCardVersion;
                valueOfP(arg0: string_t): Promise<Java.VCardVersion>;
                valueOfByStrA(arg0: string_t, cb: Callback<Java.VCardVersion>): void;
                valueOfByStr(arg0: string_t): Java.VCardVersion;
                valueOfByStrP(arg0: string_t): Promise<Java.VCardVersion>;
                valueOfByXmlNamespaceA(arg0: string_t, cb: Callback<Java.VCardVersion>): void;
                valueOfByXmlNamespace(arg0: string_t): Java.VCardVersion;
                valueOfByXmlNamespaceP(arg0: string_t): Promise<Java.VCardVersion>;
                valuesA(cb: Callback<Java.VCardVersion[]>): void;
                values(): Java.VCardVersion[];
                valuesP(): Promise<Java.VCardVersion[]>;
            }
        }
    }
    module java.io {
        interface File extends Java.java.lang.Object {
            canExecuteA(cb: Callback<object_t>): void;
            canExecute(): object_t;
            canExecuteP(): Promise<object_t>;
            canReadA(cb: Callback<object_t>): void;
            canRead(): object_t;
            canReadP(): Promise<object_t>;
            canWriteA(cb: Callback<object_t>): void;
            canWrite(): object_t;
            canWriteP(): Promise<object_t>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToA(arg0: Java.File, cb: Callback<number>): void;
            compareTo(arg0: Java.File): number;
            compareToP(arg0: Java.File): Promise<number>;
            createNewFileA(cb: Callback<object_t>): void;
            createNewFile(): object_t;
            createNewFileP(): Promise<object_t>;
            deleteA(cb: Callback<object_t>): void;
            delete(): object_t;
            deleteP(): Promise<object_t>;
            deleteOnExitA(cb: Callback<void>): void;
            deleteOnExit(): void;
            deleteOnExitP(): Promise<void>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            existsA(cb: Callback<object_t>): void;
            exists(): object_t;
            existsP(): Promise<object_t>;
            getAbsoluteFileA(cb: Callback<Java.File>): void;
            getAbsoluteFile(): Java.File;
            getAbsoluteFileP(): Promise<Java.File>;
            getAbsolutePathA(cb: Callback<string>): void;
            getAbsolutePath(): string;
            getAbsolutePathP(): Promise<string>;
            getCanonicalFileA(cb: Callback<Java.File>): void;
            getCanonicalFile(): Java.File;
            getCanonicalFileP(): Promise<Java.File>;
            getCanonicalPathA(cb: Callback<string>): void;
            getCanonicalPath(): string;
            getCanonicalPathP(): Promise<string>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getFreeSpaceA(cb: Callback<object_t>): void;
            getFreeSpace(): object_t;
            getFreeSpaceP(): Promise<object_t>;
            getNameA(cb: Callback<string>): void;
            getName(): string;
            getNameP(): Promise<string>;
            getParentA(cb: Callback<string>): void;
            getParent(): string;
            getParentP(): Promise<string>;
            getParentFileA(cb: Callback<Java.File>): void;
            getParentFile(): Java.File;
            getParentFileP(): Promise<Java.File>;
            getPathA(cb: Callback<string>): void;
            getPath(): string;
            getPathP(): Promise<string>;
            getTotalSpaceA(cb: Callback<object_t>): void;
            getTotalSpace(): object_t;
            getTotalSpaceP(): Promise<object_t>;
            getUsableSpaceA(cb: Callback<object_t>): void;
            getUsableSpace(): object_t;
            getUsableSpaceP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isAbsoluteA(cb: Callback<object_t>): void;
            isAbsolute(): object_t;
            isAbsoluteP(): Promise<object_t>;
            isDirectoryA(cb: Callback<object_t>): void;
            isDirectory(): object_t;
            isDirectoryP(): Promise<object_t>;
            isFileA(cb: Callback<object_t>): void;
            isFile(): object_t;
            isFileP(): Promise<object_t>;
            isHiddenA(cb: Callback<object_t>): void;
            isHidden(): object_t;
            isHiddenP(): Promise<object_t>;
            lastModifiedA(cb: Callback<object_t>): void;
            lastModified(): object_t;
            lastModifiedP(): Promise<object_t>;
            lengthA(cb: Callback<object_t>): void;
            length(): object_t;
            lengthP(): Promise<object_t>;
            listA(arg0: object_t, cb: Callback<string[]>): void;
            list(arg0: object_t): string[];
            listP(arg0: object_t): Promise<string[]>;
            listA(cb: Callback<string[]>): void;
            list(): string[];
            listP(): Promise<string[]>;
            listFilesA(arg0: object_t, cb: Callback<Java.File[]>): void;
            listFiles(arg0: object_t): Java.File[];
            listFilesP(arg0: object_t): Promise<Java.File[]>;
            listFilesA(arg0: object_t, cb: Callback<Java.File[]>): void;
            listFiles(arg0: object_t): Java.File[];
            listFilesP(arg0: object_t): Promise<Java.File[]>;
            listFilesA(cb: Callback<Java.File[]>): void;
            listFiles(): Java.File[];
            listFilesP(): Promise<Java.File[]>;
            mkdirA(cb: Callback<object_t>): void;
            mkdir(): object_t;
            mkdirP(): Promise<object_t>;
            mkdirsA(cb: Callback<object_t>): void;
            mkdirs(): object_t;
            mkdirsP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            renameToA(arg0: Java.File, cb: Callback<object_t>): void;
            renameTo(arg0: Java.File): object_t;
            renameToP(arg0: Java.File): Promise<object_t>;
            setExecutableA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            setExecutable(arg0: object_t, arg1: object_t): object_t;
            setExecutableP(arg0: object_t, arg1: object_t): Promise<object_t>;
            setExecutableA(arg0: object_t, cb: Callback<object_t>): void;
            setExecutable(arg0: object_t): object_t;
            setExecutableP(arg0: object_t): Promise<object_t>;
            setLastModifiedA(arg0: object_t, cb: Callback<object_t>): void;
            setLastModified(arg0: object_t): object_t;
            setLastModifiedP(arg0: object_t): Promise<object_t>;
            setReadableA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            setReadable(arg0: object_t, arg1: object_t): object_t;
            setReadableP(arg0: object_t, arg1: object_t): Promise<object_t>;
            setReadableA(arg0: object_t, cb: Callback<object_t>): void;
            setReadable(arg0: object_t): object_t;
            setReadableP(arg0: object_t): Promise<object_t>;
            setReadOnlyA(cb: Callback<object_t>): void;
            setReadOnly(): object_t;
            setReadOnlyP(): Promise<object_t>;
            setWritableA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            setWritable(arg0: object_t, arg1: object_t): object_t;
            setWritableP(arg0: object_t, arg1: object_t): Promise<object_t>;
            setWritableA(arg0: object_t, cb: Callback<object_t>): void;
            setWritable(arg0: object_t): object_t;
            setWritableP(arg0: object_t): Promise<object_t>;
            toPathA(cb: Callback<object_t>): void;
            toPath(): object_t;
            toPathP(): Promise<object_t>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            toURIA(cb: Callback<object_t>): void;
            toURI(): object_t;
            toURIP(): Promise<object_t>;
            toURLA(cb: Callback<object_t>): void;
            toURL(): object_t;
            toURLP(): Promise<object_t>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module File {
            interface Static {
                separatorChar: object_t;
                separator: string;
                pathSeparatorChar: object_t;
                pathSeparator: string;
                class: Java.Object;
                new (arg0: string_t, arg1: string_t): java.io.File;
                new (arg0: Java.File, arg1: string_t): java.io.File;
                new (arg0: string_t): java.io.File;
                new (arg0: object_t): java.io.File;
                createTempFileA(arg0: string_t, arg1: string_t, arg2: Java.File, cb: Callback<Java.File>): void;
                createTempFile(arg0: string_t, arg1: string_t, arg2: Java.File): Java.File;
                createTempFileP(arg0: string_t, arg1: string_t, arg2: Java.File): Promise<Java.File>;
                createTempFileA(arg0: string_t, arg1: string_t, cb: Callback<Java.File>): void;
                createTempFile(arg0: string_t, arg1: string_t): Java.File;
                createTempFileP(arg0: string_t, arg1: string_t): Promise<Java.File>;
                listRootsA(cb: Callback<Java.File[]>): void;
                listRoots(): Java.File[];
                listRootsP(): Promise<Java.File[]>;
            }
        }
    }
    module java.lang {
        interface Integer extends Java.java.lang.Object {
            byteValueA(cb: Callback<object_t>): void;
            byteValue(): object_t;
            byteValueP(): Promise<object_t>;
            compareToA(arg0: integer_t, cb: Callback<number>): void;
            compareTo(arg0: integer_t): number;
            compareToP(arg0: integer_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            describeConstableA(cb: Callback<object_t>): void;
            describeConstable(): object_t;
            describeConstableP(): Promise<object_t>;
            doubleValueA(cb: Callback<object_t>): void;
            doubleValue(): object_t;
            doubleValueP(): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            floatValueA(cb: Callback<object_t>): void;
            floatValue(): object_t;
            floatValueP(): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            intValueA(cb: Callback<number>): void;
            intValue(): number;
            intValueP(): Promise<number>;
            longValueA(cb: Callback<object_t>): void;
            longValue(): object_t;
            longValueP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            resolveConstantDescA(arg0: object_t, cb: Callback<number>): void;
            resolveConstantDesc(arg0: object_t): number;
            resolveConstantDescP(arg0: object_t): Promise<number>;
            resolveConstantDescA(arg0: object_t, cb: Callback<object_t>): void;
            resolveConstantDesc(arg0: object_t): object_t;
            resolveConstantDescP(arg0: object_t): Promise<object_t>;
            shortValueA(cb: Callback<object_t>): void;
            shortValue(): object_t;
            shortValueP(): Promise<object_t>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Integer {
            interface Static {
                MIN_VALUE: number;
                MAX_VALUE: number;
                TYPE: object_t;
                SIZE: number;
                BYTES: number;
                class: Java.Object;
                new (arg0: string_t): java.lang.Integer;
                new (arg0: integer_t): java.lang.Integer;
                bitCountA(arg0: integer_t, cb: Callback<number>): void;
                bitCount(arg0: integer_t): number;
                bitCountP(arg0: integer_t): Promise<number>;
                compareA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                compare(arg0: integer_t, arg1: integer_t): number;
                compareP(arg0: integer_t, arg1: integer_t): Promise<number>;
                compareUnsignedA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                compareUnsigned(arg0: integer_t, arg1: integer_t): number;
                compareUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
                decodeA(arg0: string_t, cb: Callback<number>): void;
                decode(arg0: string_t): number;
                decodeP(arg0: string_t): Promise<number>;
                divideUnsignedA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                divideUnsigned(arg0: integer_t, arg1: integer_t): number;
                divideUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
                getIntegerA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
                getInteger(arg0: string_t, arg1: integer_t): number;
                getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
                getIntegerA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
                getInteger(arg0: string_t, arg1: integer_t): number;
                getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
                getIntegerA(arg0: string_t, cb: Callback<number>): void;
                getInteger(arg0: string_t): number;
                getIntegerP(arg0: string_t): Promise<number>;
                hashCodeA(arg0: integer_t, cb: Callback<number>): void;
                hashCode(arg0: integer_t): number;
                hashCodeP(arg0: integer_t): Promise<number>;
                highestOneBitA(arg0: integer_t, cb: Callback<number>): void;
                highestOneBit(arg0: integer_t): number;
                highestOneBitP(arg0: integer_t): Promise<number>;
                lowestOneBitA(arg0: integer_t, cb: Callback<number>): void;
                lowestOneBit(arg0: integer_t): number;
                lowestOneBitP(arg0: integer_t): Promise<number>;
                maxA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                max(arg0: integer_t, arg1: integer_t): number;
                maxP(arg0: integer_t, arg1: integer_t): Promise<number>;
                minA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                min(arg0: integer_t, arg1: integer_t): number;
                minP(arg0: integer_t, arg1: integer_t): Promise<number>;
                numberOfLeadingZerosA(arg0: integer_t, cb: Callback<number>): void;
                numberOfLeadingZeros(arg0: integer_t): number;
                numberOfLeadingZerosP(arg0: integer_t): Promise<number>;
                numberOfTrailingZerosA(arg0: integer_t, cb: Callback<number>): void;
                numberOfTrailingZeros(arg0: integer_t): number;
                numberOfTrailingZerosP(arg0: integer_t): Promise<number>;
                parseIntA(arg0: object_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<number>): void;
                parseInt(arg0: object_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): number;
                parseIntP(arg0: object_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<number>;
                parseIntA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
                parseInt(arg0: string_t, arg1: integer_t): number;
                parseIntP(arg0: string_t, arg1: integer_t): Promise<number>;
                parseIntA(arg0: string_t, cb: Callback<number>): void;
                parseInt(arg0: string_t): number;
                parseIntP(arg0: string_t): Promise<number>;
                parseUnsignedIntA(arg0: object_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<number>): void;
                parseUnsignedInt(arg0: object_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): number;
                parseUnsignedIntP(arg0: object_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<number>;
                parseUnsignedIntA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
                parseUnsignedInt(arg0: string_t, arg1: integer_t): number;
                parseUnsignedIntP(arg0: string_t, arg1: integer_t): Promise<number>;
                parseUnsignedIntA(arg0: string_t, cb: Callback<number>): void;
                parseUnsignedInt(arg0: string_t): number;
                parseUnsignedIntP(arg0: string_t): Promise<number>;
                remainderUnsignedA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                remainderUnsigned(arg0: integer_t, arg1: integer_t): number;
                remainderUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
                reverseA(arg0: integer_t, cb: Callback<number>): void;
                reverse(arg0: integer_t): number;
                reverseP(arg0: integer_t): Promise<number>;
                reverseBytesA(arg0: integer_t, cb: Callback<number>): void;
                reverseBytes(arg0: integer_t): number;
                reverseBytesP(arg0: integer_t): Promise<number>;
                rotateLeftA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                rotateLeft(arg0: integer_t, arg1: integer_t): number;
                rotateLeftP(arg0: integer_t, arg1: integer_t): Promise<number>;
                rotateRightA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                rotateRight(arg0: integer_t, arg1: integer_t): number;
                rotateRightP(arg0: integer_t, arg1: integer_t): Promise<number>;
                signumA(arg0: integer_t, cb: Callback<number>): void;
                signum(arg0: integer_t): number;
                signumP(arg0: integer_t): Promise<number>;
                sumA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
                sum(arg0: integer_t, arg1: integer_t): number;
                sumP(arg0: integer_t, arg1: integer_t): Promise<number>;
                toBinaryStringA(arg0: integer_t, cb: Callback<string>): void;
                toBinaryString(arg0: integer_t): string;
                toBinaryStringP(arg0: integer_t): Promise<string>;
                toHexStringA(arg0: integer_t, cb: Callback<string>): void;
                toHexString(arg0: integer_t): string;
                toHexStringP(arg0: integer_t): Promise<string>;
                toOctalStringA(arg0: integer_t, cb: Callback<string>): void;
                toOctalString(arg0: integer_t): string;
                toOctalStringP(arg0: integer_t): Promise<string>;
                toStringA(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
                toString(arg0: integer_t, arg1: integer_t): string;
                toStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
                toStringA(arg0: integer_t, cb: Callback<string>): void;
                toString(arg0: integer_t): string;
                toStringP(arg0: integer_t): Promise<string>;
                toUnsignedLongA(arg0: integer_t, cb: Callback<object_t>): void;
                toUnsignedLong(arg0: integer_t): object_t;
                toUnsignedLongP(arg0: integer_t): Promise<object_t>;
                toUnsignedStringA(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
                toUnsignedString(arg0: integer_t, arg1: integer_t): string;
                toUnsignedStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
                toUnsignedStringA(arg0: integer_t, cb: Callback<string>): void;
                toUnsignedString(arg0: integer_t): string;
                toUnsignedStringP(arg0: integer_t): Promise<string>;
                valueOfA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
                valueOf(arg0: string_t, arg1: integer_t): number;
                valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
                valueOfA(arg0: string_t, cb: Callback<number>): void;
                valueOf(arg0: string_t): number;
                valueOfP(arg0: string_t): Promise<number>;
                valueOfA(arg0: integer_t, cb: Callback<number>): void;
                valueOf(arg0: integer_t): number;
                valueOfP(arg0: integer_t): Promise<number>;
            }
        }
    }
    module java.lang {
        interface Object {
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Object {
            interface Static {
                class: Java.Object;
                new (): java.lang.Object;
            }
        }
    }
    module java.lang.reflect {
        interface Field extends Java.java.lang.Object {
            canAccessA(arg0: object_t, cb: Callback<object_t>): void;
            canAccess(arg0: object_t): object_t;
            canAccessP(arg0: object_t): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getA(arg0: object_t, cb: Callback<object_t>): void;
            get(arg0: object_t): object_t;
            getP(arg0: object_t): Promise<object_t>;
            getAnnotatedTypeA(cb: Callback<object_t>): void;
            getAnnotatedType(): object_t;
            getAnnotatedTypeP(): Promise<object_t>;
            getAnnotationA(arg0: object_t, cb: Callback<object_t>): void;
            getAnnotation(arg0: object_t): object_t;
            getAnnotationP(arg0: object_t): Promise<object_t>;
            getAnnotationsA(cb: Callback<object_t[]>): void;
            getAnnotations(): object_t[];
            getAnnotationsP(): Promise<object_t[]>;
            getAnnotationsByTypeA(arg0: object_t, cb: Callback<object_t[]>): void;
            getAnnotationsByType(arg0: object_t): object_t[];
            getAnnotationsByTypeP(arg0: object_t): Promise<object_t[]>;
            getBooleanA(arg0: object_t, cb: Callback<object_t>): void;
            getBoolean(arg0: object_t): object_t;
            getBooleanP(arg0: object_t): Promise<object_t>;
            getByteA(arg0: object_t, cb: Callback<object_t>): void;
            getByte(arg0: object_t): object_t;
            getByteP(arg0: object_t): Promise<object_t>;
            getCharA(arg0: object_t, cb: Callback<object_t>): void;
            getChar(arg0: object_t): object_t;
            getCharP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getDeclaredAnnotationA(arg0: object_t, cb: Callback<object_t>): void;
            getDeclaredAnnotation(arg0: object_t): object_t;
            getDeclaredAnnotationP(arg0: object_t): Promise<object_t>;
            getDeclaredAnnotationsA(cb: Callback<object_t[]>): void;
            getDeclaredAnnotations(): object_t[];
            getDeclaredAnnotationsP(): Promise<object_t[]>;
            getDeclaredAnnotationsByTypeA(arg0: object_t, cb: Callback<object_t[]>): void;
            getDeclaredAnnotationsByType(arg0: object_t): object_t[];
            getDeclaredAnnotationsByTypeP(arg0: object_t): Promise<object_t[]>;
            getDeclaringClassA(cb: Callback<object_t>): void;
            getDeclaringClass(): object_t;
            getDeclaringClassP(): Promise<object_t>;
            getDoubleA(arg0: object_t, cb: Callback<object_t>): void;
            getDouble(arg0: object_t): object_t;
            getDoubleP(arg0: object_t): Promise<object_t>;
            getFloatA(arg0: object_t, cb: Callback<object_t>): void;
            getFloat(arg0: object_t): object_t;
            getFloatP(arg0: object_t): Promise<object_t>;
            getGenericTypeA(cb: Callback<object_t>): void;
            getGenericType(): object_t;
            getGenericTypeP(): Promise<object_t>;
            getIntA(arg0: object_t, cb: Callback<number>): void;
            getInt(arg0: object_t): number;
            getIntP(arg0: object_t): Promise<number>;
            getLongA(arg0: object_t, cb: Callback<object_t>): void;
            getLong(arg0: object_t): object_t;
            getLongP(arg0: object_t): Promise<object_t>;
            getModifiersA(cb: Callback<number>): void;
            getModifiers(): number;
            getModifiersP(): Promise<number>;
            getNameA(cb: Callback<string>): void;
            getName(): string;
            getNameP(): Promise<string>;
            getShortA(arg0: object_t, cb: Callback<object_t>): void;
            getShort(arg0: object_t): object_t;
            getShortP(arg0: object_t): Promise<object_t>;
            getTypeA(cb: Callback<object_t>): void;
            getType(): object_t;
            getTypeP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isAccessibleA(cb: Callback<object_t>): void;
            isAccessible(): object_t;
            isAccessibleP(): Promise<object_t>;
            isAnnotationPresentA(arg0: object_t, cb: Callback<object_t>): void;
            isAnnotationPresent(arg0: object_t): object_t;
            isAnnotationPresentP(arg0: object_t): Promise<object_t>;
            isEnumConstantA(cb: Callback<object_t>): void;
            isEnumConstant(): object_t;
            isEnumConstantP(): Promise<object_t>;
            isSyntheticA(cb: Callback<object_t>): void;
            isSynthetic(): object_t;
            isSyntheticP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            setA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            set(arg0: object_t, arg1: object_t): void;
            setP(arg0: object_t, arg1: object_t): Promise<void>;
            setAccessibleA(arg0: object_t, cb: Callback<void>): void;
            setAccessible(arg0: object_t): void;
            setAccessibleP(arg0: object_t): Promise<void>;
            setBooleanA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setBoolean(arg0: object_t, arg1: object_t): void;
            setBooleanP(arg0: object_t, arg1: object_t): Promise<void>;
            setByteA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setByte(arg0: object_t, arg1: object_t): void;
            setByteP(arg0: object_t, arg1: object_t): Promise<void>;
            setCharA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setChar(arg0: object_t, arg1: object_t): void;
            setCharP(arg0: object_t, arg1: object_t): Promise<void>;
            setDoubleA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setDouble(arg0: object_t, arg1: object_t): void;
            setDoubleP(arg0: object_t, arg1: object_t): Promise<void>;
            setFloatA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setFloat(arg0: object_t, arg1: object_t): void;
            setFloatP(arg0: object_t, arg1: object_t): Promise<void>;
            setIntA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            setInt(arg0: object_t, arg1: integer_t): void;
            setIntP(arg0: object_t, arg1: integer_t): Promise<void>;
            setLongA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setLong(arg0: object_t, arg1: object_t): void;
            setLongP(arg0: object_t, arg1: object_t): Promise<void>;
            setShortA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
            setShort(arg0: object_t, arg1: object_t): void;
            setShortP(arg0: object_t, arg1: object_t): Promise<void>;
            toGenericStringA(cb: Callback<string>): void;
            toGenericString(): string;
            toGenericStringP(): Promise<string>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            trySetAccessibleA(cb: Callback<object_t>): void;
            trySetAccessible(): object_t;
            trySetAccessibleP(): Promise<object_t>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Field {
            interface Static {
                PUBLIC: number;
                DECLARED: number;
                class: Java.Object;
                setAccessibleA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
                setAccessible(arg0: object_array_t, arg1: object_t): void;
                setAccessibleP(arg0: object_array_t, arg1: object_t): Promise<void>;
            }
        }
    }
    module java.lang {
        interface String extends Java.java.lang.Object {
            charAtA(arg0: integer_t, cb: Callback<object_t>): void;
            charAt(arg0: integer_t): object_t;
            charAtP(arg0: integer_t): Promise<object_t>;
            charsA(cb: Callback<object_t>): void;
            chars(): object_t;
            charsP(): Promise<object_t>;
            codePointAtA(arg0: integer_t, cb: Callback<number>): void;
            codePointAt(arg0: integer_t): number;
            codePointAtP(arg0: integer_t): Promise<number>;
            codePointBeforeA(arg0: integer_t, cb: Callback<number>): void;
            codePointBefore(arg0: integer_t): number;
            codePointBeforeP(arg0: integer_t): Promise<number>;
            codePointCountA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
            codePointCount(arg0: integer_t, arg1: integer_t): number;
            codePointCountP(arg0: integer_t, arg1: integer_t): Promise<number>;
            codePointsA(cb: Callback<object_t>): void;
            codePoints(): object_t;
            codePointsP(): Promise<object_t>;
            compareToA(arg0: string_t, cb: Callback<number>): void;
            compareTo(arg0: string_t): number;
            compareToP(arg0: string_t): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            compareToIgnoreCaseA(arg0: string_t, cb: Callback<number>): void;
            compareToIgnoreCase(arg0: string_t): number;
            compareToIgnoreCaseP(arg0: string_t): Promise<number>;
            concatA(arg0: string_t, cb: Callback<string>): void;
            concat(arg0: string_t): string;
            concatP(arg0: string_t): Promise<string>;
            containsA(arg0: object_t, cb: Callback<object_t>): void;
            contains(arg0: object_t): object_t;
            containsP(arg0: object_t): Promise<object_t>;
            contentEqualsA(arg0: object_t, cb: Callback<object_t>): void;
            contentEquals(arg0: object_t): object_t;
            contentEqualsP(arg0: object_t): Promise<object_t>;
            contentEqualsA(arg0: object_t, cb: Callback<object_t>): void;
            contentEquals(arg0: object_t): object_t;
            contentEqualsP(arg0: object_t): Promise<object_t>;
            describeConstableA(cb: Callback<object_t>): void;
            describeConstable(): object_t;
            describeConstableP(): Promise<object_t>;
            endsWithA(arg0: string_t, cb: Callback<object_t>): void;
            endsWith(arg0: string_t): object_t;
            endsWithP(arg0: string_t): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            equalsIgnoreCaseA(arg0: string_t, cb: Callback<object_t>): void;
            equalsIgnoreCase(arg0: string_t): object_t;
            equalsIgnoreCaseP(arg0: string_t): Promise<object_t>;
            formattedA(arg0: object_array_t, cb: Callback<string>): void;
            formatted(...arg0: object_t[]): string;
            formatted(arg0: object_array_t): string;
            formattedP(...arg0: object_t[]): Promise<string>;
            formattedP(arg0: object_array_t): Promise<string>;
            getBytesA(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t, cb: Callback<void>): void;
            getBytes(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
            getBytesP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
            getBytesA(arg0: object_t, cb: Callback<object_t[]>): void;
            getBytes(arg0: object_t): object_t[];
            getBytesP(arg0: object_t): Promise<object_t[]>;
            getBytesA(arg0: string_t, cb: Callback<object_t[]>): void;
            getBytes(arg0: string_t): object_t[];
            getBytesP(arg0: string_t): Promise<object_t[]>;
            getBytesA(cb: Callback<object_t[]>): void;
            getBytes(): object_t[];
            getBytesP(): Promise<object_t[]>;
            getCharsA(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t, cb: Callback<void>): void;
            getChars(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
            getCharsP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            indentA(arg0: integer_t, cb: Callback<string>): void;
            indent(arg0: integer_t): string;
            indentP(arg0: integer_t): Promise<string>;
            indexOfA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
            indexOf(arg0: string_t, arg1: integer_t): number;
            indexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
            indexOfA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
            indexOf(arg0: integer_t, arg1: integer_t): number;
            indexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
            indexOfA(arg0: string_t, cb: Callback<number>): void;
            indexOf(arg0: string_t): number;
            indexOfP(arg0: string_t): Promise<number>;
            indexOfA(arg0: integer_t, cb: Callback<number>): void;
            indexOf(arg0: integer_t): number;
            indexOfP(arg0: integer_t): Promise<number>;
            internA(cb: Callback<string>): void;
            intern(): string;
            internP(): Promise<string>;
            isBlankA(cb: Callback<object_t>): void;
            isBlank(): object_t;
            isBlankP(): Promise<object_t>;
            isEmptyA(cb: Callback<object_t>): void;
            isEmpty(): object_t;
            isEmptyP(): Promise<object_t>;
            lastIndexOfA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
            lastIndexOf(arg0: string_t, arg1: integer_t): number;
            lastIndexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
            lastIndexOfA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
            lastIndexOf(arg0: integer_t, arg1: integer_t): number;
            lastIndexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
            lastIndexOfA(arg0: string_t, cb: Callback<number>): void;
            lastIndexOf(arg0: string_t): number;
            lastIndexOfP(arg0: string_t): Promise<number>;
            lastIndexOfA(arg0: integer_t, cb: Callback<number>): void;
            lastIndexOf(arg0: integer_t): number;
            lastIndexOfP(arg0: integer_t): Promise<number>;
            lengthA(cb: Callback<number>): void;
            length(): number;
            lengthP(): Promise<number>;
            linesA(cb: Callback<object_t>): void;
            lines(): object_t;
            linesP(): Promise<object_t>;
            matchesA(arg0: string_t, cb: Callback<object_t>): void;
            matches(arg0: string_t): object_t;
            matchesP(arg0: string_t): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            offsetByCodePointsA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
            offsetByCodePoints(arg0: integer_t, arg1: integer_t): number;
            offsetByCodePointsP(arg0: integer_t, arg1: integer_t): Promise<number>;
            regionMatchesA(arg0: object_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t, cb: Callback<object_t>): void;
            regionMatches(arg0: object_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): object_t;
            regionMatchesP(arg0: object_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): Promise<object_t>;
            regionMatchesA(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, cb: Callback<object_t>): void;
            regionMatches(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): object_t;
            regionMatchesP(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): Promise<object_t>;
            repeatA(arg0: integer_t, cb: Callback<string>): void;
            repeat(arg0: integer_t): string;
            repeatP(arg0: integer_t): Promise<string>;
            replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
            replace(arg0: object_t, arg1: object_t): string;
            replaceP(arg0: object_t, arg1: object_t): Promise<string>;
            replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
            replace(arg0: object_t, arg1: object_t): string;
            replaceP(arg0: object_t, arg1: object_t): Promise<string>;
            replaceAllA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
            replaceAll(arg0: string_t, arg1: string_t): string;
            replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
            replaceFirstA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
            replaceFirst(arg0: string_t, arg1: string_t): string;
            replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
            resolveConstantDescA(arg0: object_t, cb: Callback<string>): void;
            resolveConstantDesc(arg0: object_t): string;
            resolveConstantDescP(arg0: object_t): Promise<string>;
            resolveConstantDescA(arg0: object_t, cb: Callback<object_t>): void;
            resolveConstantDesc(arg0: object_t): object_t;
            resolveConstantDescP(arg0: object_t): Promise<object_t>;
            splitA(arg0: string_t, arg1: integer_t, cb: Callback<string[]>): void;
            split(arg0: string_t, arg1: integer_t): string[];
            splitP(arg0: string_t, arg1: integer_t): Promise<string[]>;
            splitA(arg0: string_t, cb: Callback<string[]>): void;
            split(arg0: string_t): string[];
            splitP(arg0: string_t): Promise<string[]>;
            startsWithA(arg0: string_t, arg1: integer_t, cb: Callback<object_t>): void;
            startsWith(arg0: string_t, arg1: integer_t): object_t;
            startsWithP(arg0: string_t, arg1: integer_t): Promise<object_t>;
            startsWithA(arg0: string_t, cb: Callback<object_t>): void;
            startsWith(arg0: string_t): object_t;
            startsWithP(arg0: string_t): Promise<object_t>;
            stripA(cb: Callback<string>): void;
            strip(): string;
            stripP(): Promise<string>;
            stripIndentA(cb: Callback<string>): void;
            stripIndent(): string;
            stripIndentP(): Promise<string>;
            stripLeadingA(cb: Callback<string>): void;
            stripLeading(): string;
            stripLeadingP(): Promise<string>;
            stripTrailingA(cb: Callback<string>): void;
            stripTrailing(): string;
            stripTrailingP(): Promise<string>;
            subSequenceA(arg0: integer_t, arg1: integer_t, cb: Callback<object_t>): void;
            subSequence(arg0: integer_t, arg1: integer_t): object_t;
            subSequenceP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
            substringA(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
            substring(arg0: integer_t, arg1: integer_t): string;
            substringP(arg0: integer_t, arg1: integer_t): Promise<string>;
            substringA(arg0: integer_t, cb: Callback<string>): void;
            substring(arg0: integer_t): string;
            substringP(arg0: integer_t): Promise<string>;
            toCharArrayA(cb: Callback<object_t[]>): void;
            toCharArray(): object_t[];
            toCharArrayP(): Promise<object_t[]>;
            toLowerCaseA(arg0: object_t, cb: Callback<string>): void;
            toLowerCase(arg0: object_t): string;
            toLowerCaseP(arg0: object_t): Promise<string>;
            toLowerCaseA(cb: Callback<string>): void;
            toLowerCase(): string;
            toLowerCaseP(): Promise<string>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            toUpperCaseA(arg0: object_t, cb: Callback<string>): void;
            toUpperCase(arg0: object_t): string;
            toUpperCaseP(arg0: object_t): Promise<string>;
            toUpperCaseA(cb: Callback<string>): void;
            toUpperCase(): string;
            toUpperCaseP(): Promise<string>;
            transformA(arg0: object_t, cb: Callback<object_t>): void;
            transform(arg0: object_t): object_t;
            transformP(arg0: object_t): Promise<object_t>;
            translateEscapesA(cb: Callback<string>): void;
            translateEscapes(): string;
            translateEscapesP(): Promise<string>;
            trimA(cb: Callback<string>): void;
            trim(): string;
            trimP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module String {
            interface Static {
                CASE_INSENSITIVE_ORDER: object_t;
                class: Java.Object;
                new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
                new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
                new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
                new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
                new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: string_t): java.lang.String;
                new (arg0: object_array_t, arg1: integer_t): java.lang.String;
                new (arg0: object_t): java.lang.String;
                new (arg0: object_t): java.lang.String;
                new (arg0: string_t): java.lang.String;
                new (arg0: object_array_t): java.lang.String;
                new (arg0: object_array_t): java.lang.String;
                new (): java.lang.String;
                copyValueOfA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
                copyValueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
                copyValueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
                copyValueOfA(arg0: object_array_t, cb: Callback<string>): void;
                copyValueOf(arg0: object_array_t): string;
                copyValueOfP(arg0: object_array_t): Promise<string>;
                formatA(arg0: object_t, arg1: string_t, arg2: object_array_t, cb: Callback<string>): void;
                format(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
                format(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
                formatP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<string>;
                formatP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<string>;
                formatA(arg0: string_t, arg1: object_array_t, cb: Callback<string>): void;
                format(arg0: string_t, ...arg1: object_t[]): string;
                format(arg0: string_t, arg1: object_array_t): string;
                formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
                formatP(arg0: string_t, arg1: object_array_t): Promise<string>;
                joinA(arg0: object_t, arg1: object_array_t, cb: Callback<string>): void;
                join(arg0: object_t, ...arg1: object_t[]): string;
                join(arg0: object_t, arg1: object_array_t): string;
                joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
                joinP(arg0: object_t, arg1: object_array_t): Promise<string>;
                joinA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
                join(arg0: object_t, arg1: object_t): string;
                joinP(arg0: object_t, arg1: object_t): Promise<string>;
                valueOfA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
                valueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
                valueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_array_t, cb: Callback<string>): void;
                valueOf(arg0: object_array_t): string;
                valueOfP(arg0: object_array_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: integer_t, cb: Callback<string>): void;
                valueOf(arg0: integer_t): string;
                valueOfP(arg0: integer_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
            }
        }
    }
    module java.util {
        interface Calendar extends Java.java.lang.Object {
            addA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
            add(arg0: integer_t, arg1: integer_t): void;
            addP(arg0: integer_t, arg1: integer_t): Promise<void>;
            afterA(arg0: object_t, cb: Callback<object_t>): void;
            after(arg0: object_t): object_t;
            afterP(arg0: object_t): Promise<object_t>;
            beforeA(arg0: object_t, cb: Callback<object_t>): void;
            before(arg0: object_t): object_t;
            beforeP(arg0: object_t): Promise<object_t>;
            clearA(arg0: integer_t, cb: Callback<void>): void;
            clear(arg0: integer_t): void;
            clearP(arg0: integer_t): Promise<void>;
            clearA(cb: Callback<void>): void;
            clear(): void;
            clearP(): Promise<void>;
            cloneA(cb: Callback<object_t>): void;
            clone(): object_t;
            cloneP(): Promise<object_t>;
            compareToA(arg0: Java.Calendar, cb: Callback<number>): void;
            compareTo(arg0: Java.Calendar): number;
            compareToP(arg0: Java.Calendar): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getA(arg0: integer_t, cb: Callback<number>): void;
            get(arg0: integer_t): number;
            getP(arg0: integer_t): Promise<number>;
            getActualMaximumA(arg0: integer_t, cb: Callback<number>): void;
            getActualMaximum(arg0: integer_t): number;
            getActualMaximumP(arg0: integer_t): Promise<number>;
            getActualMinimumA(arg0: integer_t, cb: Callback<number>): void;
            getActualMinimum(arg0: integer_t): number;
            getActualMinimumP(arg0: integer_t): Promise<number>;
            getCalendarTypeA(cb: Callback<string>): void;
            getCalendarType(): string;
            getCalendarTypeP(): Promise<string>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getDisplayNameA(arg0: integer_t, arg1: integer_t, arg2: object_t, cb: Callback<string>): void;
            getDisplayName(arg0: integer_t, arg1: integer_t, arg2: object_t): string;
            getDisplayNameP(arg0: integer_t, arg1: integer_t, arg2: object_t): Promise<string>;
            getDisplayNamesA(arg0: integer_t, arg1: integer_t, arg2: object_t, cb: Callback<object_t>): void;
            getDisplayNames(arg0: integer_t, arg1: integer_t, arg2: object_t): object_t;
            getDisplayNamesP(arg0: integer_t, arg1: integer_t, arg2: object_t): Promise<object_t>;
            getFirstDayOfWeekA(cb: Callback<number>): void;
            getFirstDayOfWeek(): number;
            getFirstDayOfWeekP(): Promise<number>;
            getGreatestMinimumA(arg0: integer_t, cb: Callback<number>): void;
            getGreatestMinimum(arg0: integer_t): number;
            getGreatestMinimumP(arg0: integer_t): Promise<number>;
            getLeastMaximumA(arg0: integer_t, cb: Callback<number>): void;
            getLeastMaximum(arg0: integer_t): number;
            getLeastMaximumP(arg0: integer_t): Promise<number>;
            getMaximumA(arg0: integer_t, cb: Callback<number>): void;
            getMaximum(arg0: integer_t): number;
            getMaximumP(arg0: integer_t): Promise<number>;
            getMinimalDaysInFirstWeekA(cb: Callback<number>): void;
            getMinimalDaysInFirstWeek(): number;
            getMinimalDaysInFirstWeekP(): Promise<number>;
            getMinimumA(arg0: integer_t, cb: Callback<number>): void;
            getMinimum(arg0: integer_t): number;
            getMinimumP(arg0: integer_t): Promise<number>;
            getTimeA(cb: Callback<object_t>): void;
            getTime(): object_t;
            getTimeP(): Promise<object_t>;
            getTimeInMillisA(cb: Callback<object_t>): void;
            getTimeInMillis(): object_t;
            getTimeInMillisP(): Promise<object_t>;
            getTimeZoneA(cb: Callback<Java.TimeZone>): void;
            getTimeZone(): Java.TimeZone;
            getTimeZoneP(): Promise<Java.TimeZone>;
            getWeeksInWeekYearA(cb: Callback<number>): void;
            getWeeksInWeekYear(): number;
            getWeeksInWeekYearP(): Promise<number>;
            getWeekYearA(cb: Callback<number>): void;
            getWeekYear(): number;
            getWeekYearP(): Promise<number>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isLenientA(cb: Callback<object_t>): void;
            isLenient(): object_t;
            isLenientP(): Promise<object_t>;
            isSetA(arg0: integer_t, cb: Callback<object_t>): void;
            isSet(arg0: integer_t): object_t;
            isSetP(arg0: integer_t): Promise<object_t>;
            isWeekDateSupportedA(cb: Callback<object_t>): void;
            isWeekDateSupported(): object_t;
            isWeekDateSupportedP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            rollA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
            roll(arg0: integer_t, arg1: object_t): void;
            rollP(arg0: integer_t, arg1: object_t): Promise<void>;
            rollA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
            roll(arg0: integer_t, arg1: integer_t): void;
            rollP(arg0: integer_t, arg1: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t): Promise<void>;
            setFirstDayOfWeekA(arg0: integer_t, cb: Callback<void>): void;
            setFirstDayOfWeek(arg0: integer_t): void;
            setFirstDayOfWeekP(arg0: integer_t): Promise<void>;
            setLenientA(arg0: object_t, cb: Callback<void>): void;
            setLenient(arg0: object_t): void;
            setLenientP(arg0: object_t): Promise<void>;
            setMinimalDaysInFirstWeekA(arg0: integer_t, cb: Callback<void>): void;
            setMinimalDaysInFirstWeek(arg0: integer_t): void;
            setMinimalDaysInFirstWeekP(arg0: integer_t): Promise<void>;
            setTimeA(arg0: object_t, cb: Callback<void>): void;
            setTime(arg0: object_t): void;
            setTimeP(arg0: object_t): Promise<void>;
            setTimeInMillisA(arg0: object_t, cb: Callback<void>): void;
            setTimeInMillis(arg0: object_t): void;
            setTimeInMillisP(arg0: object_t): Promise<void>;
            setTimeZoneA(arg0: Java.TimeZone, cb: Callback<void>): void;
            setTimeZone(arg0: Java.TimeZone): void;
            setTimeZoneP(arg0: Java.TimeZone): Promise<void>;
            setWeekDateA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
            setWeekDate(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
            setWeekDateP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
            toInstantA(cb: Callback<object_t>): void;
            toInstant(): object_t;
            toInstantP(): Promise<object_t>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Calendar {
            interface Static {
                ERA: number;
                YEAR: number;
                MONTH: number;
                WEEK_OF_YEAR: number;
                WEEK_OF_MONTH: number;
                DATE: number;
                DAY_OF_MONTH: number;
                DAY_OF_YEAR: number;
                DAY_OF_WEEK: number;
                DAY_OF_WEEK_IN_MONTH: number;
                AM_PM: number;
                HOUR: number;
                HOUR_OF_DAY: number;
                MINUTE: number;
                SECOND: number;
                MILLISECOND: number;
                ZONE_OFFSET: number;
                DST_OFFSET: number;
                FIELD_COUNT: number;
                SUNDAY: number;
                MONDAY: number;
                TUESDAY: number;
                WEDNESDAY: number;
                THURSDAY: number;
                FRIDAY: number;
                SATURDAY: number;
                JANUARY: number;
                FEBRUARY: number;
                MARCH: number;
                APRIL: number;
                MAY: number;
                JUNE: number;
                JULY: number;
                AUGUST: number;
                SEPTEMBER: number;
                OCTOBER: number;
                NOVEMBER: number;
                DECEMBER: number;
                UNDECIMBER: number;
                AM: number;
                PM: number;
                ALL_STYLES: number;
                SHORT: number;
                LONG: number;
                NARROW_FORMAT: number;
                NARROW_STANDALONE: number;
                SHORT_FORMAT: number;
                LONG_FORMAT: number;
                SHORT_STANDALONE: number;
                LONG_STANDALONE: number;
                class: Java.Object;
                getAvailableCalendarTypesA(cb: Callback<object_t>): void;
                getAvailableCalendarTypes(): object_t;
                getAvailableCalendarTypesP(): Promise<object_t>;
                getAvailableLocalesA(cb: Callback<object_t[]>): void;
                getAvailableLocales(): object_t[];
                getAvailableLocalesP(): Promise<object_t[]>;
                getInstanceA(arg0: Java.TimeZone, arg1: object_t, cb: Callback<Java.Calendar>): void;
                getInstance(arg0: Java.TimeZone, arg1: object_t): Java.Calendar;
                getInstanceP(arg0: Java.TimeZone, arg1: object_t): Promise<Java.Calendar>;
                getInstanceA(arg0: Java.TimeZone, cb: Callback<Java.Calendar>): void;
                getInstance(arg0: Java.TimeZone): Java.Calendar;
                getInstanceP(arg0: Java.TimeZone): Promise<Java.Calendar>;
                getInstanceA(arg0: object_t, cb: Callback<Java.Calendar>): void;
                getInstance(arg0: object_t): Java.Calendar;
                getInstanceP(arg0: object_t): Promise<Java.Calendar>;
                getInstanceA(cb: Callback<Java.Calendar>): void;
                getInstance(): Java.Calendar;
                getInstanceP(): Promise<Java.Calendar>;
            }
        }
    }
    module java.util {
        interface GregorianCalendar extends Java.java.util.Calendar {
            addA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
            add(arg0: integer_t, arg1: integer_t): void;
            addP(arg0: integer_t, arg1: integer_t): Promise<void>;
            afterA(arg0: object_t, cb: Callback<object_t>): void;
            after(arg0: object_t): object_t;
            afterP(arg0: object_t): Promise<object_t>;
            beforeA(arg0: object_t, cb: Callback<object_t>): void;
            before(arg0: object_t): object_t;
            beforeP(arg0: object_t): Promise<object_t>;
            clearA(arg0: integer_t, cb: Callback<void>): void;
            clear(arg0: integer_t): void;
            clearP(arg0: integer_t): Promise<void>;
            clearA(cb: Callback<void>): void;
            clear(): void;
            clearP(): Promise<void>;
            cloneA(cb: Callback<object_t>): void;
            clone(): object_t;
            cloneP(): Promise<object_t>;
            compareToA(arg0: Java.Calendar, cb: Callback<number>): void;
            compareTo(arg0: Java.Calendar): number;
            compareToP(arg0: Java.Calendar): Promise<number>;
            compareToA(arg0: object_t, cb: Callback<number>): void;
            compareTo(arg0: object_t): number;
            compareToP(arg0: object_t): Promise<number>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getA(arg0: integer_t, cb: Callback<number>): void;
            get(arg0: integer_t): number;
            getP(arg0: integer_t): Promise<number>;
            getActualMaximumA(arg0: integer_t, cb: Callback<number>): void;
            getActualMaximum(arg0: integer_t): number;
            getActualMaximumP(arg0: integer_t): Promise<number>;
            getActualMinimumA(arg0: integer_t, cb: Callback<number>): void;
            getActualMinimum(arg0: integer_t): number;
            getActualMinimumP(arg0: integer_t): Promise<number>;
            getCalendarTypeA(cb: Callback<string>): void;
            getCalendarType(): string;
            getCalendarTypeP(): Promise<string>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getDisplayNameA(arg0: integer_t, arg1: integer_t, arg2: object_t, cb: Callback<string>): void;
            getDisplayName(arg0: integer_t, arg1: integer_t, arg2: object_t): string;
            getDisplayNameP(arg0: integer_t, arg1: integer_t, arg2: object_t): Promise<string>;
            getDisplayNamesA(arg0: integer_t, arg1: integer_t, arg2: object_t, cb: Callback<object_t>): void;
            getDisplayNames(arg0: integer_t, arg1: integer_t, arg2: object_t): object_t;
            getDisplayNamesP(arg0: integer_t, arg1: integer_t, arg2: object_t): Promise<object_t>;
            getFirstDayOfWeekA(cb: Callback<number>): void;
            getFirstDayOfWeek(): number;
            getFirstDayOfWeekP(): Promise<number>;
            getGreatestMinimumA(arg0: integer_t, cb: Callback<number>): void;
            getGreatestMinimum(arg0: integer_t): number;
            getGreatestMinimumP(arg0: integer_t): Promise<number>;
            getGregorianChangeA(cb: Callback<object_t>): void;
            getGregorianChange(): object_t;
            getGregorianChangeP(): Promise<object_t>;
            getLeastMaximumA(arg0: integer_t, cb: Callback<number>): void;
            getLeastMaximum(arg0: integer_t): number;
            getLeastMaximumP(arg0: integer_t): Promise<number>;
            getMaximumA(arg0: integer_t, cb: Callback<number>): void;
            getMaximum(arg0: integer_t): number;
            getMaximumP(arg0: integer_t): Promise<number>;
            getMinimalDaysInFirstWeekA(cb: Callback<number>): void;
            getMinimalDaysInFirstWeek(): number;
            getMinimalDaysInFirstWeekP(): Promise<number>;
            getMinimumA(arg0: integer_t, cb: Callback<number>): void;
            getMinimum(arg0: integer_t): number;
            getMinimumP(arg0: integer_t): Promise<number>;
            getTimeA(cb: Callback<object_t>): void;
            getTime(): object_t;
            getTimeP(): Promise<object_t>;
            getTimeInMillisA(cb: Callback<object_t>): void;
            getTimeInMillis(): object_t;
            getTimeInMillisP(): Promise<object_t>;
            getTimeZoneA(cb: Callback<Java.TimeZone>): void;
            getTimeZone(): Java.TimeZone;
            getTimeZoneP(): Promise<Java.TimeZone>;
            getWeeksInWeekYearA(cb: Callback<number>): void;
            getWeeksInWeekYear(): number;
            getWeeksInWeekYearP(): Promise<number>;
            getWeekYearA(cb: Callback<number>): void;
            getWeekYear(): number;
            getWeekYearP(): Promise<number>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            isLeapYearA(arg0: integer_t, cb: Callback<object_t>): void;
            isLeapYear(arg0: integer_t): object_t;
            isLeapYearP(arg0: integer_t): Promise<object_t>;
            isLenientA(cb: Callback<object_t>): void;
            isLenient(): object_t;
            isLenientP(): Promise<object_t>;
            isSetA(arg0: integer_t, cb: Callback<object_t>): void;
            isSet(arg0: integer_t): object_t;
            isSetP(arg0: integer_t): Promise<object_t>;
            isWeekDateSupportedA(cb: Callback<object_t>): void;
            isWeekDateSupported(): object_t;
            isWeekDateSupportedP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            rollA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
            roll(arg0: integer_t, arg1: object_t): void;
            rollP(arg0: integer_t, arg1: object_t): Promise<void>;
            rollA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
            roll(arg0: integer_t, arg1: integer_t): void;
            rollP(arg0: integer_t, arg1: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
            setA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
            set(arg0: integer_t, arg1: integer_t): void;
            setP(arg0: integer_t, arg1: integer_t): Promise<void>;
            setFirstDayOfWeekA(arg0: integer_t, cb: Callback<void>): void;
            setFirstDayOfWeek(arg0: integer_t): void;
            setFirstDayOfWeekP(arg0: integer_t): Promise<void>;
            setGregorianChangeA(arg0: object_t, cb: Callback<void>): void;
            setGregorianChange(arg0: object_t): void;
            setGregorianChangeP(arg0: object_t): Promise<void>;
            setLenientA(arg0: object_t, cb: Callback<void>): void;
            setLenient(arg0: object_t): void;
            setLenientP(arg0: object_t): Promise<void>;
            setMinimalDaysInFirstWeekA(arg0: integer_t, cb: Callback<void>): void;
            setMinimalDaysInFirstWeek(arg0: integer_t): void;
            setMinimalDaysInFirstWeekP(arg0: integer_t): Promise<void>;
            setTimeA(arg0: object_t, cb: Callback<void>): void;
            setTime(arg0: object_t): void;
            setTimeP(arg0: object_t): Promise<void>;
            setTimeInMillisA(arg0: object_t, cb: Callback<void>): void;
            setTimeInMillis(arg0: object_t): void;
            setTimeInMillisP(arg0: object_t): Promise<void>;
            setTimeZoneA(arg0: Java.TimeZone, cb: Callback<void>): void;
            setTimeZone(arg0: Java.TimeZone): void;
            setTimeZoneP(arg0: Java.TimeZone): Promise<void>;
            setWeekDateA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
            setWeekDate(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
            setWeekDateP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
            toInstantA(cb: Callback<object_t>): void;
            toInstant(): object_t;
            toInstantP(): Promise<object_t>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            toZonedDateTimeA(cb: Callback<object_t>): void;
            toZonedDateTime(): object_t;
            toZonedDateTimeP(): Promise<object_t>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module GregorianCalendar {
            interface Static {
                BC: number;
                AD: number;
                ERA: number;
                YEAR: number;
                MONTH: number;
                WEEK_OF_YEAR: number;
                WEEK_OF_MONTH: number;
                DATE: number;
                DAY_OF_MONTH: number;
                DAY_OF_YEAR: number;
                DAY_OF_WEEK: number;
                DAY_OF_WEEK_IN_MONTH: number;
                AM_PM: number;
                HOUR: number;
                HOUR_OF_DAY: number;
                MINUTE: number;
                SECOND: number;
                MILLISECOND: number;
                ZONE_OFFSET: number;
                DST_OFFSET: number;
                FIELD_COUNT: number;
                SUNDAY: number;
                MONDAY: number;
                TUESDAY: number;
                WEDNESDAY: number;
                THURSDAY: number;
                FRIDAY: number;
                SATURDAY: number;
                JANUARY: number;
                FEBRUARY: number;
                MARCH: number;
                APRIL: number;
                MAY: number;
                JUNE: number;
                JULY: number;
                AUGUST: number;
                SEPTEMBER: number;
                OCTOBER: number;
                NOVEMBER: number;
                DECEMBER: number;
                UNDECIMBER: number;
                AM: number;
                PM: number;
                ALL_STYLES: number;
                SHORT: number;
                LONG: number;
                NARROW_FORMAT: number;
                NARROW_STANDALONE: number;
                SHORT_FORMAT: number;
                LONG_FORMAT: number;
                SHORT_STANDALONE: number;
                LONG_STANDALONE: number;
                class: Java.Object;
                new (arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): java.util.GregorianCalendar;
                new (arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): java.util.GregorianCalendar;
                new (arg0: integer_t, arg1: integer_t, arg2: integer_t): java.util.GregorianCalendar;
                new (arg0: Java.TimeZone, arg1: object_t): java.util.GregorianCalendar;
                new (arg0: Java.TimeZone): java.util.GregorianCalendar;
                new (arg0: object_t): java.util.GregorianCalendar;
                new (): java.util.GregorianCalendar;
                fromA(arg0: object_t, cb: Callback<Java.GregorianCalendar>): void;
                from(arg0: object_t): Java.GregorianCalendar;
                fromP(arg0: object_t): Promise<Java.GregorianCalendar>;
                getAvailableCalendarTypesA(cb: Callback<object_t>): void;
                getAvailableCalendarTypes(): object_t;
                getAvailableCalendarTypesP(): Promise<object_t>;
                getAvailableLocalesA(cb: Callback<object_t[]>): void;
                getAvailableLocales(): object_t[];
                getAvailableLocalesP(): Promise<object_t[]>;
                getInstanceA(arg0: Java.TimeZone, arg1: object_t, cb: Callback<Java.Calendar>): void;
                getInstance(arg0: Java.TimeZone, arg1: object_t): Java.Calendar;
                getInstanceP(arg0: Java.TimeZone, arg1: object_t): Promise<Java.Calendar>;
                getInstanceA(arg0: Java.TimeZone, cb: Callback<Java.Calendar>): void;
                getInstance(arg0: Java.TimeZone): Java.Calendar;
                getInstanceP(arg0: Java.TimeZone): Promise<Java.Calendar>;
                getInstanceA(arg0: object_t, cb: Callback<Java.Calendar>): void;
                getInstance(arg0: object_t): Java.Calendar;
                getInstanceP(arg0: object_t): Promise<Java.Calendar>;
                getInstanceA(cb: Callback<Java.Calendar>): void;
                getInstance(): Java.Calendar;
                getInstanceP(): Promise<Java.Calendar>;
            }
        }
    }
    module java.util {
        interface List extends Java.java.lang.Object {
            addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
            add(arg0: integer_t, arg1: object_t): void;
            addP(arg0: integer_t, arg1: object_t): Promise<void>;
            addA(arg0: object_t, cb: Callback<object_t>): void;
            add(arg0: object_t): object_t;
            addP(arg0: object_t): Promise<object_t>;
            addAllA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
            addAll(arg0: integer_t, arg1: object_t): object_t;
            addAllP(arg0: integer_t, arg1: object_t): Promise<object_t>;
            addAllA(arg0: object_t, cb: Callback<object_t>): void;
            addAll(arg0: object_t): object_t;
            addAllP(arg0: object_t): Promise<object_t>;
            clearA(cb: Callback<void>): void;
            clear(): void;
            clearP(): Promise<void>;
            containsA(arg0: object_t, cb: Callback<object_t>): void;
            contains(arg0: object_t): object_t;
            containsP(arg0: object_t): Promise<object_t>;
            containsAllA(arg0: object_t, cb: Callback<object_t>): void;
            containsAll(arg0: object_t): object_t;
            containsAllP(arg0: object_t): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            forEachA(arg0: object_t, cb: Callback<void>): void;
            forEach(arg0: object_t): void;
            forEachP(arg0: object_t): Promise<void>;
            getA(arg0: integer_t, cb: Callback<object_t>): void;
            get(arg0: integer_t): object_t;
            getP(arg0: integer_t): Promise<object_t>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            indexOfA(arg0: object_t, cb: Callback<number>): void;
            indexOf(arg0: object_t): number;
            indexOfP(arg0: object_t): Promise<number>;
            isEmptyA(cb: Callback<object_t>): void;
            isEmpty(): object_t;
            isEmptyP(): Promise<object_t>;
            iteratorA(cb: Callback<object_t>): void;
            iterator(): object_t;
            iteratorP(): Promise<object_t>;
            lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
            lastIndexOf(arg0: object_t): number;
            lastIndexOfP(arg0: object_t): Promise<number>;
            listIteratorA(arg0: integer_t, cb: Callback<object_t>): void;
            listIterator(arg0: integer_t): object_t;
            listIteratorP(arg0: integer_t): Promise<object_t>;
            listIteratorA(cb: Callback<object_t>): void;
            listIterator(): object_t;
            listIteratorP(): Promise<object_t>;
            parallelStreamA(cb: Callback<object_t>): void;
            parallelStream(): object_t;
            parallelStreamP(): Promise<object_t>;
            removeA(arg0: object_t, cb: Callback<object_t>): void;
            remove(arg0: object_t): object_t;
            removeP(arg0: object_t): Promise<object_t>;
            removeA(arg0: integer_t, cb: Callback<object_t>): void;
            remove(arg0: integer_t): object_t;
            removeP(arg0: integer_t): Promise<object_t>;
            removeAllA(arg0: object_t, cb: Callback<object_t>): void;
            removeAll(arg0: object_t): object_t;
            removeAllP(arg0: object_t): Promise<object_t>;
            removeIfA(arg0: object_t, cb: Callback<object_t>): void;
            removeIf(arg0: object_t): object_t;
            removeIfP(arg0: object_t): Promise<object_t>;
            replaceAllA(arg0: object_t, cb: Callback<void>): void;
            replaceAll(arg0: object_t): void;
            replaceAllP(arg0: object_t): Promise<void>;
            retainAllA(arg0: object_t, cb: Callback<object_t>): void;
            retainAll(arg0: object_t): object_t;
            retainAllP(arg0: object_t): Promise<object_t>;
            setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
            set(arg0: integer_t, arg1: object_t): object_t;
            setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
            sizeA(cb: Callback<number>): void;
            size(): number;
            sizeP(): Promise<number>;
            sortA(arg0: object_t, cb: Callback<void>): void;
            sort(arg0: object_t): void;
            sortP(arg0: object_t): Promise<void>;
            spliteratorA(cb: Callback<object_t>): void;
            spliterator(): object_t;
            spliteratorP(): Promise<object_t>;
            streamA(cb: Callback<object_t>): void;
            stream(): object_t;
            streamP(): Promise<object_t>;
            subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
            subList(arg0: integer_t, arg1: integer_t): Java.List;
            subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
            toArrayA(arg0: object_t, cb: Callback<object_t[]>): void;
            toArray(arg0: object_t): object_t[];
            toArrayP(arg0: object_t): Promise<object_t[]>;
            toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
            toArray(arg0: object_array_t): object_t[];
            toArrayP(arg0: object_array_t): Promise<object_t[]>;
            toArrayA(cb: Callback<object_t[]>): void;
            toArray(): object_t[];
            toArrayP(): Promise<object_t[]>;
        }
        module List {
            interface Static {
                class: Java.Object;
                copyOfA(arg0: object_t, cb: Callback<Java.List>): void;
                copyOf(arg0: object_t): Java.List;
                copyOfP(arg0: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t, arg8: object_t, arg9: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t, arg8: object_t, arg9: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t, arg8: object_t, arg9: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t, arg8: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t, arg8: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t, arg8: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, arg7: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, arg6: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, arg5: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t, arg2: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<Java.List>;
                ofA(arg0: object_t, arg1: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t, arg1: object_t): Java.List;
                ofP(arg0: object_t, arg1: object_t): Promise<Java.List>;
                ofA(arg0: object_array_t, cb: Callback<Java.List>): void;
                of(...arg0: object_t[]): Java.List;
                of(arg0: object_array_t): Java.List;
                ofP(...arg0: object_t[]): Promise<Java.List>;
                ofP(arg0: object_array_t): Promise<Java.List>;
                ofA(arg0: object_t, cb: Callback<Java.List>): void;
                of(arg0: object_t): Java.List;
                ofP(arg0: object_t): Promise<Java.List>;
                ofA(cb: Callback<Java.List>): void;
                of(): Java.List;
                ofP(): Promise<Java.List>;
            }
        }
    }
    module java.util {
        interface TimeZone extends Java.java.lang.Object {
            cloneA(cb: Callback<object_t>): void;
            clone(): object_t;
            cloneP(): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<object_t>): void;
            equals(arg0: object_t): object_t;
            equalsP(arg0: object_t): Promise<object_t>;
            getClassA(cb: Callback<object_t>): void;
            getClass(): object_t;
            getClassP(): Promise<object_t>;
            getDisplayNameA(arg0: object_t, arg1: integer_t, arg2: object_t, cb: Callback<string>): void;
            getDisplayName(arg0: object_t, arg1: integer_t, arg2: object_t): string;
            getDisplayNameP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<string>;
            getDisplayNameA(arg0: object_t, arg1: integer_t, cb: Callback<string>): void;
            getDisplayName(arg0: object_t, arg1: integer_t): string;
            getDisplayNameP(arg0: object_t, arg1: integer_t): Promise<string>;
            getDisplayNameA(arg0: object_t, cb: Callback<string>): void;
            getDisplayName(arg0: object_t): string;
            getDisplayNameP(arg0: object_t): Promise<string>;
            getDisplayNameA(cb: Callback<string>): void;
            getDisplayName(): string;
            getDisplayNameP(): Promise<string>;
            getDSTSavingsA(cb: Callback<number>): void;
            getDSTSavings(): number;
            getDSTSavingsP(): Promise<number>;
            getIDA(cb: Callback<string>): void;
            getID(): string;
            getIDP(): Promise<string>;
            getOffsetA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<number>): void;
            getOffset(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): number;
            getOffsetP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<number>;
            getOffsetA(arg0: object_t, cb: Callback<number>): void;
            getOffset(arg0: object_t): number;
            getOffsetP(arg0: object_t): Promise<number>;
            getRawOffsetA(cb: Callback<number>): void;
            getRawOffset(): number;
            getRawOffsetP(): Promise<number>;
            hashCodeA(cb: Callback<number>): void;
            hashCode(): number;
            hashCodeP(): Promise<number>;
            hasSameRulesA(arg0: Java.TimeZone, cb: Callback<object_t>): void;
            hasSameRules(arg0: Java.TimeZone): object_t;
            hasSameRulesP(arg0: Java.TimeZone): Promise<object_t>;
            inDaylightTimeA(arg0: object_t, cb: Callback<object_t>): void;
            inDaylightTime(arg0: object_t): object_t;
            inDaylightTimeP(arg0: object_t): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            observesDaylightTimeA(cb: Callback<object_t>): void;
            observesDaylightTime(): object_t;
            observesDaylightTimeP(): Promise<object_t>;
            setIDA(arg0: string_t, cb: Callback<void>): void;
            setID(arg0: string_t): void;
            setIDP(arg0: string_t): Promise<void>;
            setRawOffsetA(arg0: integer_t, cb: Callback<void>): void;
            setRawOffset(arg0: integer_t): void;
            setRawOffsetP(arg0: integer_t): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            toZoneIdA(cb: Callback<object_t>): void;
            toZoneId(): object_t;
            toZoneIdP(): Promise<object_t>;
            useDaylightTimeA(cb: Callback<object_t>): void;
            useDaylightTime(): object_t;
            useDaylightTimeP(): Promise<object_t>;
            waitA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
            wait(arg0: object_t, arg1: integer_t): void;
            waitP(arg0: object_t, arg1: integer_t): Promise<void>;
            waitA(arg0: object_t, cb: Callback<void>): void;
            wait(arg0: object_t): void;
            waitP(arg0: object_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module TimeZone {
            interface Static {
                SHORT: number;
                LONG: number;
                class: Java.Object;
                new (): java.util.TimeZone;
                getAvailableIDsA(arg0: integer_t, cb: Callback<string[]>): void;
                getAvailableIDs(arg0: integer_t): string[];
                getAvailableIDsP(arg0: integer_t): Promise<string[]>;
                getAvailableIDsA(cb: Callback<string[]>): void;
                getAvailableIDs(): string[];
                getAvailableIDsP(): Promise<string[]>;
                getDefaultA(cb: Callback<Java.TimeZone>): void;
                getDefault(): Java.TimeZone;
                getDefaultP(): Promise<Java.TimeZone>;
                getTimeZoneA(arg0: object_t, cb: Callback<Java.TimeZone>): void;
                getTimeZone(arg0: object_t): Java.TimeZone;
                getTimeZoneP(arg0: object_t): Promise<Java.TimeZone>;
                getTimeZoneA(arg0: string_t, cb: Callback<Java.TimeZone>): void;
                getTimeZone(arg0: string_t): Java.TimeZone;
                getTimeZoneP(arg0: string_t): Promise<Java.TimeZone>;
                setDefaultA(arg0: Java.TimeZone, cb: Callback<void>): void;
                setDefault(arg0: Java.TimeZone): void;
                setDefaultP(arg0: Java.TimeZone): Promise<void>;
            }
        }
    }
    function isJavaObject(e: any): boolean;
}
