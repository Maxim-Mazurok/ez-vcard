// This file was generated by ts-java using the following options:
// classpath:
//   ~/.m2/repository/com/googlecode/ez-vcard/ez-vcard/0.10.6/ez-vcard-0.10.6.jar
//   ~/.m2/repository/com/github/mangstadt/vinnie/2.0.2/vinnie-2.0.2.jar
//   ~/.m2/repository/org/jsoup/jsoup/1.13.1/jsoup-1.13.1.jar
//   ~/.m2/repository/org/freemarker/freemarker/2.3.30/freemarker-2.3.30.jar
//   ~/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.10.3/jackson-core-2.10.3.jar
// classes:
//   ezvcard.Ezvcard
//   ezvcard.parameter.AddressType
//   ezvcard.parameter.ImageType
//   ezvcard.parameter.TelephoneType
//   ezvcard.property.Address
//   ezvcard.property.Birthday
//   ezvcard.property.Photo
//   ezvcard.property.Revision
//   ezvcard.property.StructuredName
//   ezvcard.property.Timezone
//   ezvcard.property.Uid
//   ezvcard.VCard
//   ezvcard.VCardVersion
// packages:
//   ezvcard.*

import _java from 'java';
import _ from 'lodash';
import mvn from 'node-java-maven';

_java.asyncOptions = {
  syncSuffix: '',
  asyncSuffix: 'A',
  promiseSuffix: 'P',
  promisify: require('util').promisify,
};

const mvnInit = async () =>
  new Promise((resolve, reject) => {
    mvn((err, mvnResults) => {
      if (err) {
        console.error('could not resolve maven dependencies', err);
        reject(err);
      }

      mvnResults.classpath.forEach(c => {
        _java.classpath.push(c);
      });
      resolve();
    });
  });

const beforeJvm = async () => {
  try {
    await mvnInit();
  } catch (e) {
    console.log(e);
  }
};

_java.registerClientP(beforeJvm);

export module Java {
  'use strict';

  interface StringDict {
    [index: string]: string;
  }

  export type NodeJavaAPI = typeof _java;

  export function getJava(): NodeJavaAPI {
    return _java;
  }

  export function ensureJvm(): Promise<void> {
    return _java.ensureJvm();
  }

  // Return the fully qualified class path for a class name.
  // Returns undefined if the className is ambiguous or not present in the configured classes.
  export function fullyQualifiedName(className: string): string {
    var shortToLongMap: StringDict = {
      Ezvcard: 'ezvcard.Ezvcard',
      ChainingTextWriter: 'ezvcard.io.chain.ChainingTextWriter',
      Messages: 'ezvcard.Messages',
      AddressType: 'ezvcard.parameter.AddressType',
      ImageType: 'ezvcard.parameter.ImageType',
      TelephoneType: 'ezvcard.parameter.TelephoneType',
      Address: 'ezvcard.property.Address',
      Birthday: 'ezvcard.property.Birthday',
      Photo: 'ezvcard.property.Photo',
      Revision: 'ezvcard.property.Revision',
      StructuredName: 'ezvcard.property.StructuredName',
      Timezone: 'ezvcard.property.Timezone',
      Uid: 'ezvcard.property.Uid',
      SupportedVersions: 'ezvcard.SupportedVersions',
      ValidationWarning: 'ezvcard.ValidationWarning',
      ValidationWarnings: 'ezvcard.ValidationWarnings',
      VCard: 'ezvcard.VCard',
      VCardDataType: 'ezvcard.VCardDataType',
      VCardVersion: 'ezvcard.VCardVersion',
      Object: 'java.lang.Object',
      String: 'java.lang.String',
    };
    return shortToLongMap[className];
  }

  export function importClass(
    className: 'Ezvcard'
  ): Java.ezvcard.Ezvcard.Static;
  export function importClass(
    className: 'ChainingTextWriter'
  ): Java.ezvcard.io.chain.ChainingTextWriter.Static;
  export function importClass(
    className: 'Messages'
  ): Java.ezvcard.Messages.Static;
  export function importClass(
    className: 'AddressType'
  ): Java.ezvcard.parameter.AddressType.Static;
  export function importClass(
    className: 'ImageType'
  ): Java.ezvcard.parameter.ImageType.Static;
  export function importClass(
    className: 'TelephoneType'
  ): Java.ezvcard.parameter.TelephoneType.Static;
  export function importClass(
    className: 'Address'
  ): Java.ezvcard.property.Address.Static;
  export function importClass(
    className: 'Birthday'
  ): Java.ezvcard.property.Birthday.Static;
  export function importClass(
    className: 'Photo'
  ): Java.ezvcard.property.Photo.Static;
  export function importClass(
    className: 'Revision'
  ): Java.ezvcard.property.Revision.Static;
  export function importClass(
    className: 'StructuredName'
  ): Java.ezvcard.property.StructuredName.Static;
  export function importClass(
    className: 'Timezone'
  ): Java.ezvcard.property.Timezone.Static;
  export function importClass(
    className: 'Uid'
  ): Java.ezvcard.property.Uid.Static;
  export function importClass(
    className: 'SupportedVersions'
  ): Java.ezvcard.SupportedVersions.Static;
  export function importClass(
    className: 'ValidationWarning'
  ): Java.ezvcard.ValidationWarning.Static;
  export function importClass(
    className: 'ValidationWarnings'
  ): Java.ezvcard.ValidationWarnings.Static;
  export function importClass(className: 'VCard'): Java.ezvcard.VCard.Static;
  export function importClass(
    className: 'VCardDataType'
  ): Java.ezvcard.VCardDataType.Static;
  export function importClass(
    className: 'VCardVersion'
  ): Java.ezvcard.VCardVersion.Static;
  export function importClass(
    className: 'Object'
  ): Java.java.lang.Object.Static;
  export function importClass(
    className: 'String'
  ): Java.java.lang.String.Static;
  export function importClass(
    className: 'ezvcard.Ezvcard'
  ): Java.ezvcard.Ezvcard.Static;
  export function importClass(
    className: 'ezvcard.io.chain.ChainingTextWriter'
  ): Java.ezvcard.io.chain.ChainingTextWriter.Static;
  export function importClass(
    className: 'ezvcard.Messages'
  ): Java.ezvcard.Messages.Static;
  export function importClass(
    className: 'ezvcard.parameter.AddressType'
  ): Java.ezvcard.parameter.AddressType.Static;
  export function importClass(
    className: 'ezvcard.parameter.ImageType'
  ): Java.ezvcard.parameter.ImageType.Static;
  export function importClass(
    className: 'ezvcard.parameter.TelephoneType'
  ): Java.ezvcard.parameter.TelephoneType.Static;
  export function importClass(
    className: 'ezvcard.property.Address'
  ): Java.ezvcard.property.Address.Static;
  export function importClass(
    className: 'ezvcard.property.Birthday'
  ): Java.ezvcard.property.Birthday.Static;
  export function importClass(
    className: 'ezvcard.property.Photo'
  ): Java.ezvcard.property.Photo.Static;
  export function importClass(
    className: 'ezvcard.property.Revision'
  ): Java.ezvcard.property.Revision.Static;
  export function importClass(
    className: 'ezvcard.property.StructuredName'
  ): Java.ezvcard.property.StructuredName.Static;
  export function importClass(
    className: 'ezvcard.property.Timezone'
  ): Java.ezvcard.property.Timezone.Static;
  export function importClass(
    className: 'ezvcard.property.Uid'
  ): Java.ezvcard.property.Uid.Static;
  export function importClass(
    className: 'ezvcard.SupportedVersions'
  ): Java.ezvcard.SupportedVersions.Static;
  export function importClass(
    className: 'ezvcard.ValidationWarning'
  ): Java.ezvcard.ValidationWarning.Static;
  export function importClass(
    className: 'ezvcard.ValidationWarnings'
  ): Java.ezvcard.ValidationWarnings.Static;
  export function importClass(
    className: 'ezvcard.VCard'
  ): Java.ezvcard.VCard.Static;
  export function importClass(
    className: 'ezvcard.VCardDataType'
  ): Java.ezvcard.VCardDataType.Static;
  export function importClass(
    className: 'ezvcard.VCardVersion'
  ): Java.ezvcard.VCardVersion.Static;
  export function importClass(
    className: 'java.lang.Object'
  ): Java.java.lang.Object.Static;
  export function importClass(
    className: 'java.lang.String'
  ): Java.java.lang.String.Static;
  export function importClass(className: string): any;
  export function importClass(className: string): any {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.import(fullName);
  }

  export function asInstanceOf(
    obj: any,
    className: 'Ezvcard'
  ): Java.ezvcard.Ezvcard;
  export function asInstanceOf(
    obj: any,
    className: 'ChainingTextWriter'
  ): Java.ezvcard.io.chain.ChainingTextWriter;
  export function asInstanceOf(
    obj: any,
    className: 'Messages'
  ): Java.ezvcard.Messages;
  export function asInstanceOf(
    obj: any,
    className: 'AddressType'
  ): Java.ezvcard.parameter.AddressType;
  export function asInstanceOf(
    obj: any,
    className: 'ImageType'
  ): Java.ezvcard.parameter.ImageType;
  export function asInstanceOf(
    obj: any,
    className: 'TelephoneType'
  ): Java.ezvcard.parameter.TelephoneType;
  export function asInstanceOf(
    obj: any,
    className: 'Address'
  ): Java.ezvcard.property.Address;
  export function asInstanceOf(
    obj: any,
    className: 'Birthday'
  ): Java.ezvcard.property.Birthday;
  export function asInstanceOf(
    obj: any,
    className: 'Photo'
  ): Java.ezvcard.property.Photo;
  export function asInstanceOf(
    obj: any,
    className: 'Revision'
  ): Java.ezvcard.property.Revision;
  export function asInstanceOf(
    obj: any,
    className: 'StructuredName'
  ): Java.ezvcard.property.StructuredName;
  export function asInstanceOf(
    obj: any,
    className: 'Timezone'
  ): Java.ezvcard.property.Timezone;
  export function asInstanceOf(
    obj: any,
    className: 'Uid'
  ): Java.ezvcard.property.Uid;
  export function asInstanceOf(
    obj: any,
    className: 'SupportedVersions'
  ): Java.ezvcard.SupportedVersions;
  export function asInstanceOf(
    obj: any,
    className: 'ValidationWarning'
  ): Java.ezvcard.ValidationWarning;
  export function asInstanceOf(
    obj: any,
    className: 'ValidationWarnings'
  ): Java.ezvcard.ValidationWarnings;
  export function asInstanceOf(
    obj: any,
    className: 'VCard'
  ): Java.ezvcard.VCard;
  export function asInstanceOf(
    obj: any,
    className: 'VCardDataType'
  ): Java.ezvcard.VCardDataType;
  export function asInstanceOf(
    obj: any,
    className: 'VCardVersion'
  ): Java.ezvcard.VCardVersion;
  export function asInstanceOf(
    obj: any,
    className: 'Object'
  ): Java.java.lang.Object;
  export function asInstanceOf(
    obj: any,
    className: 'String'
  ): Java.java.lang.String;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.Ezvcard'
  ): Java.ezvcard.Ezvcard;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.io.chain.ChainingTextWriter'
  ): Java.ezvcard.io.chain.ChainingTextWriter;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.Messages'
  ): Java.ezvcard.Messages;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.parameter.AddressType'
  ): Java.ezvcard.parameter.AddressType;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.parameter.ImageType'
  ): Java.ezvcard.parameter.ImageType;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.parameter.TelephoneType'
  ): Java.ezvcard.parameter.TelephoneType;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.property.Address'
  ): Java.ezvcard.property.Address;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.property.Birthday'
  ): Java.ezvcard.property.Birthday;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.property.Photo'
  ): Java.ezvcard.property.Photo;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.property.Revision'
  ): Java.ezvcard.property.Revision;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.property.StructuredName'
  ): Java.ezvcard.property.StructuredName;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.property.Timezone'
  ): Java.ezvcard.property.Timezone;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.property.Uid'
  ): Java.ezvcard.property.Uid;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.SupportedVersions'
  ): Java.ezvcard.SupportedVersions;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.ValidationWarning'
  ): Java.ezvcard.ValidationWarning;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.ValidationWarnings'
  ): Java.ezvcard.ValidationWarnings;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.VCard'
  ): Java.ezvcard.VCard;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.VCardDataType'
  ): Java.ezvcard.VCardDataType;
  export function asInstanceOf(
    obj: any,
    className: 'ezvcard.VCardVersion'
  ): Java.ezvcard.VCardVersion;
  export function asInstanceOf(
    obj: any,
    className: 'java.lang.Object'
  ): Java.java.lang.Object;
  export function asInstanceOf(
    obj: any,
    className: 'java.lang.String'
  ): Java.java.lang.String;
  export function asInstanceOf(obj: any, className: string): any;
  export function asInstanceOf(obj: any, className: string): any {
    var fullName: string = fullyQualifiedName(className) || className;
    if (_java.instanceOf(obj, fullName)) {
      return obj;
    } else {
      throw new Error('asInstanceOf fails, obj is not a ' + fullName);
    }
  }

  export interface Callback<T> {
    (err?: Error, result?: T): void;
  }

  // Returns true if javaObject is an instance of the named class, which may be a short className.
  // Returns false if javaObject is not an instance of the named class.
  // Throws an exception if the named class does not exist, or is an ambiguous short name.
  export function instanceOf(javaObject: any, className: string): boolean {
    var fullName: string = fullyQualifiedName(className) || className;
    return (
      smellsLikeJavaObject(javaObject) && _java.instanceOf(javaObject, fullName)
    );
  }

  export function newInstanceA(
    className: 'ChainingTextWriter',
    arg0: object_t,
    cb: Callback<Java.ChainingTextWriter>
  ): void;
  export function newInstanceA(
    className: 'Address',
    arg0: Java.Address,
    cb: Callback<Java.Address>
  ): void;
  export function newInstanceA(
    className: 'Address',
    cb: Callback<Java.Address>
  ): void;
  export function newInstanceA(
    className: 'Birthday',
    arg0: object_t,
    arg1: object_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'Birthday',
    arg0: Java.Birthday,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'Birthday',
    arg0: object_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'Birthday',
    arg0: string_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'Birthday',
    arg0: object_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'Photo',
    arg0: object_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'Photo',
    arg0: string_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'Photo',
    arg0: object_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'Photo',
    arg0: object_array_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'Photo',
    arg0: Java.Photo,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'Revision',
    arg0: Java.Revision,
    cb: Callback<Java.Revision>
  ): void;
  export function newInstanceA(
    className: 'Revision',
    arg0: object_t,
    cb: Callback<Java.Revision>
  ): void;
  export function newInstanceA(
    className: 'StructuredName',
    arg0: Java.StructuredName,
    cb: Callback<Java.StructuredName>
  ): void;
  export function newInstanceA(
    className: 'StructuredName',
    cb: Callback<Java.StructuredName>
  ): void;
  export function newInstanceA(
    className: 'Timezone',
    arg0: object_t,
    arg1: string_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'Timezone',
    arg0: Java.Timezone,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'Timezone',
    arg0: object_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'Timezone',
    arg0: object_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'Timezone',
    arg0: string_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'Uid',
    arg0: Java.Uid,
    cb: Callback<Java.Uid>
  ): void;
  export function newInstanceA(
    className: 'Uid',
    arg0: string_t,
    cb: Callback<Java.Uid>
  ): void;
  export function newInstanceA(
    className: 'ValidationWarning',
    arg0: object_t,
    arg1: object_array_t,
    cb: Callback<Java.ValidationWarning>
  ): void;
  export function newInstanceA(
    className: 'ValidationWarning',
    arg0: string_t,
    cb: Callback<Java.ValidationWarning>
  ): void;
  export function newInstanceA(
    className: 'ValidationWarnings',
    cb: Callback<Java.ValidationWarnings>
  ): void;
  export function newInstanceA(
    className: 'VCard',
    arg0: Java.VCardVersion,
    cb: Callback<Java.VCard>
  ): void;
  export function newInstanceA(
    className: 'VCard',
    arg0: Java.VCard,
    cb: Callback<Java.VCard>
  ): void;
  export function newInstanceA(
    className: 'VCard',
    cb: Callback<Java.VCard>
  ): void;
  export function newInstanceA(
    className: 'Object',
    cb: Callback<object_t>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: string_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: string_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: string_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'String',
    arg0: object_array_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(className: 'String', cb: Callback<string>): void;
  export function newInstanceA(
    className: 'ezvcard.io.chain.ChainingTextWriter',
    arg0: object_t,
    cb: Callback<Java.ChainingTextWriter>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Address',
    arg0: Java.Address,
    cb: Callback<Java.Address>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Address',
    cb: Callback<Java.Address>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Birthday',
    arg0: object_t,
    arg1: object_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Birthday',
    arg0: Java.Birthday,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Birthday',
    arg0: object_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Birthday',
    arg0: string_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Birthday',
    arg0: object_t,
    cb: Callback<Java.Birthday>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Photo',
    arg0: object_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Photo',
    arg0: string_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Photo',
    arg0: object_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Photo',
    arg0: object_array_t,
    arg1: Java.ImageType,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Photo',
    arg0: Java.Photo,
    cb: Callback<Java.Photo>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Revision',
    arg0: Java.Revision,
    cb: Callback<Java.Revision>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Revision',
    arg0: object_t,
    cb: Callback<Java.Revision>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.StructuredName',
    arg0: Java.StructuredName,
    cb: Callback<Java.StructuredName>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.StructuredName',
    cb: Callback<Java.StructuredName>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Timezone',
    arg0: object_t,
    arg1: string_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Timezone',
    arg0: Java.Timezone,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Timezone',
    arg0: object_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Timezone',
    arg0: object_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Timezone',
    arg0: string_t,
    cb: Callback<Java.Timezone>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Uid',
    arg0: Java.Uid,
    cb: Callback<Java.Uid>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.property.Uid',
    arg0: string_t,
    cb: Callback<Java.Uid>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.ValidationWarning',
    arg0: object_t,
    arg1: object_array_t,
    cb: Callback<Java.ValidationWarning>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.ValidationWarning',
    arg0: string_t,
    cb: Callback<Java.ValidationWarning>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.ValidationWarnings',
    cb: Callback<Java.ValidationWarnings>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.VCard',
    arg0: Java.VCardVersion,
    cb: Callback<Java.VCard>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.VCard',
    arg0: Java.VCard,
    cb: Callback<Java.VCard>
  ): void;
  export function newInstanceA(
    className: 'ezvcard.VCard',
    cb: Callback<Java.VCard>
  ): void;
  export function newInstanceA(
    className: 'java.lang.Object',
    cb: Callback<object_t>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: string_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: string_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: string_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    arg0: object_array_t,
    cb: Callback<string>
  ): void;
  export function newInstanceA(
    className: 'java.lang.String',
    cb: Callback<string>
  ): void;
  export function newInstanceA(className: string, ...args: any[]): void;
  export function newInstanceA(className: string, ...args: any[]): any {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.newInstance.apply(_java, [fullName, ...args]);
  }

  export function newInstance(
    className: 'ChainingTextWriter',
    arg0: object_t
  ): Java.ChainingTextWriter;
  export function newInstance(
    className: 'Address',
    arg0: Java.Address
  ): Java.Address;
  export function newInstance(className: 'Address'): Java.Address;
  export function newInstance(
    className: 'Birthday',
    arg0: object_t,
    arg1: object_t
  ): Java.Birthday;
  export function newInstance(
    className: 'Birthday',
    arg0: Java.Birthday
  ): Java.Birthday;
  export function newInstance(
    className: 'Birthday',
    arg0: object_t
  ): Java.Birthday;
  export function newInstance(
    className: 'Birthday',
    arg0: string_t
  ): Java.Birthday;
  export function newInstance(
    className: 'Birthday',
    arg0: object_t
  ): Java.Birthday;
  export function newInstance(
    className: 'Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(
    className: 'Photo',
    arg0: string_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(
    className: 'Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(
    className: 'Photo',
    arg0: object_array_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(className: 'Photo', arg0: Java.Photo): Java.Photo;
  export function newInstance(
    className: 'Revision',
    arg0: Java.Revision
  ): Java.Revision;
  export function newInstance(
    className: 'Revision',
    arg0: object_t
  ): Java.Revision;
  export function newInstance(
    className: 'StructuredName',
    arg0: Java.StructuredName
  ): Java.StructuredName;
  export function newInstance(className: 'StructuredName'): Java.StructuredName;
  export function newInstance(
    className: 'Timezone',
    arg0: object_t,
    arg1: string_t
  ): Java.Timezone;
  export function newInstance(
    className: 'Timezone',
    arg0: Java.Timezone
  ): Java.Timezone;
  export function newInstance(
    className: 'Timezone',
    arg0: object_t
  ): Java.Timezone;
  export function newInstance(
    className: 'Timezone',
    arg0: object_t
  ): Java.Timezone;
  export function newInstance(
    className: 'Timezone',
    arg0: string_t
  ): Java.Timezone;
  export function newInstance(className: 'Uid', arg0: Java.Uid): Java.Uid;
  export function newInstance(className: 'Uid', arg0: string_t): Java.Uid;
  export function newInstance(
    className: 'ValidationWarning',
    arg0: object_t,
    ...arg1: object_t[]
  ): Java.ValidationWarning;
  export function newInstance(
    className: 'ValidationWarning',
    arg0: string_t
  ): Java.ValidationWarning;
  export function newInstance(
    className: 'ValidationWarnings'
  ): Java.ValidationWarnings;
  export function newInstance(
    className: 'VCard',
    arg0: Java.VCardVersion
  ): Java.VCard;
  export function newInstance(className: 'VCard', arg0: Java.VCard): Java.VCard;
  export function newInstance(className: 'VCard'): Java.VCard;
  export function newInstance(className: 'Object'): object_t;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: string_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: string_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t
  ): string;
  export function newInstance(className: 'String', arg0: object_t): string;
  export function newInstance(className: 'String', arg0: object_t): string;
  export function newInstance(className: 'String', arg0: string_t): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t
  ): string;
  export function newInstance(
    className: 'String',
    arg0: object_array_t
  ): string;
  export function newInstance(className: 'String'): string;
  export function newInstance(
    className: 'ezvcard.io.chain.ChainingTextWriter',
    arg0: object_t
  ): Java.ChainingTextWriter;
  export function newInstance(
    className: 'ezvcard.property.Address',
    arg0: Java.Address
  ): Java.Address;
  export function newInstance(
    className: 'ezvcard.property.Address'
  ): Java.Address;
  export function newInstance(
    className: 'ezvcard.property.Birthday',
    arg0: object_t,
    arg1: object_t
  ): Java.Birthday;
  export function newInstance(
    className: 'ezvcard.property.Birthday',
    arg0: Java.Birthday
  ): Java.Birthday;
  export function newInstance(
    className: 'ezvcard.property.Birthday',
    arg0: object_t
  ): Java.Birthday;
  export function newInstance(
    className: 'ezvcard.property.Birthday',
    arg0: string_t
  ): Java.Birthday;
  export function newInstance(
    className: 'ezvcard.property.Birthday',
    arg0: object_t
  ): Java.Birthday;
  export function newInstance(
    className: 'ezvcard.property.Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(
    className: 'ezvcard.property.Photo',
    arg0: string_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(
    className: 'ezvcard.property.Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(
    className: 'ezvcard.property.Photo',
    arg0: object_array_t,
    arg1: Java.ImageType
  ): Java.Photo;
  export function newInstance(
    className: 'ezvcard.property.Photo',
    arg0: Java.Photo
  ): Java.Photo;
  export function newInstance(
    className: 'ezvcard.property.Revision',
    arg0: Java.Revision
  ): Java.Revision;
  export function newInstance(
    className: 'ezvcard.property.Revision',
    arg0: object_t
  ): Java.Revision;
  export function newInstance(
    className: 'ezvcard.property.StructuredName',
    arg0: Java.StructuredName
  ): Java.StructuredName;
  export function newInstance(
    className: 'ezvcard.property.StructuredName'
  ): Java.StructuredName;
  export function newInstance(
    className: 'ezvcard.property.Timezone',
    arg0: object_t,
    arg1: string_t
  ): Java.Timezone;
  export function newInstance(
    className: 'ezvcard.property.Timezone',
    arg0: Java.Timezone
  ): Java.Timezone;
  export function newInstance(
    className: 'ezvcard.property.Timezone',
    arg0: object_t
  ): Java.Timezone;
  export function newInstance(
    className: 'ezvcard.property.Timezone',
    arg0: object_t
  ): Java.Timezone;
  export function newInstance(
    className: 'ezvcard.property.Timezone',
    arg0: string_t
  ): Java.Timezone;
  export function newInstance(
    className: 'ezvcard.property.Uid',
    arg0: Java.Uid
  ): Java.Uid;
  export function newInstance(
    className: 'ezvcard.property.Uid',
    arg0: string_t
  ): Java.Uid;
  export function newInstance(
    className: 'ezvcard.ValidationWarning',
    arg0: object_t,
    ...arg1: object_t[]
  ): Java.ValidationWarning;
  export function newInstance(
    className: 'ezvcard.ValidationWarning',
    arg0: string_t
  ): Java.ValidationWarning;
  export function newInstance(
    className: 'ezvcard.ValidationWarnings'
  ): Java.ValidationWarnings;
  export function newInstance(
    className: 'ezvcard.VCard',
    arg0: Java.VCardVersion
  ): Java.VCard;
  export function newInstance(
    className: 'ezvcard.VCard',
    arg0: Java.VCard
  ): Java.VCard;
  export function newInstance(className: 'ezvcard.VCard'): Java.VCard;
  export function newInstance(className: 'java.lang.Object'): object_t;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: string_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: string_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: string_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t
  ): string;
  export function newInstance(
    className: 'java.lang.String',
    arg0: object_array_t
  ): string;
  export function newInstance(className: 'java.lang.String'): string;
  export function newInstance(className: string, ...args: any[]): any;
  export function newInstance(className: string, ...args: any[]): any {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.newInstanceSync.apply(_java, [fullName, ...args]);
  }

  export function newInstanceP(
    className: 'ChainingTextWriter',
    arg0: object_t
  ): Promise<Java.ChainingTextWriter>;
  export function newInstanceP(
    className: 'Address',
    arg0: Java.Address
  ): Promise<Java.Address>;
  export function newInstanceP(className: 'Address'): Promise<Java.Address>;
  export function newInstanceP(
    className: 'Birthday',
    arg0: object_t,
    arg1: object_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'Birthday',
    arg0: Java.Birthday
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'Birthday',
    arg0: object_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'Birthday',
    arg0: string_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'Birthday',
    arg0: object_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'Photo',
    arg0: string_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'Photo',
    arg0: object_array_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'Photo',
    arg0: Java.Photo
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'Revision',
    arg0: Java.Revision
  ): Promise<Java.Revision>;
  export function newInstanceP(
    className: 'Revision',
    arg0: object_t
  ): Promise<Java.Revision>;
  export function newInstanceP(
    className: 'StructuredName',
    arg0: Java.StructuredName
  ): Promise<Java.StructuredName>;
  export function newInstanceP(
    className: 'StructuredName'
  ): Promise<Java.StructuredName>;
  export function newInstanceP(
    className: 'Timezone',
    arg0: object_t,
    arg1: string_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'Timezone',
    arg0: Java.Timezone
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'Timezone',
    arg0: object_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'Timezone',
    arg0: object_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'Timezone',
    arg0: string_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'Uid',
    arg0: Java.Uid
  ): Promise<Java.Uid>;
  export function newInstanceP(
    className: 'Uid',
    arg0: string_t
  ): Promise<Java.Uid>;
  export function newInstanceP(
    className: 'ValidationWarning',
    arg0: object_t,
    ...arg1: object_t[]
  ): Promise<Java.ValidationWarning>;
  export function newInstanceP(
    className: 'ValidationWarning',
    arg0: string_t
  ): Promise<Java.ValidationWarning>;
  export function newInstanceP(
    className: 'ValidationWarnings'
  ): Promise<Java.ValidationWarnings>;
  export function newInstanceP(
    className: 'VCard',
    arg0: Java.VCardVersion
  ): Promise<Java.VCard>;
  export function newInstanceP(
    className: 'VCard',
    arg0: Java.VCard
  ): Promise<Java.VCard>;
  export function newInstanceP(className: 'VCard'): Promise<Java.VCard>;
  export function newInstanceP(className: 'Object'): Promise<object_t>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: string_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: string_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t,
    arg1: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: string_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'String',
    arg0: object_array_t
  ): Promise<string>;
  export function newInstanceP(className: 'String'): Promise<string>;
  export function newInstanceP(
    className: 'ezvcard.io.chain.ChainingTextWriter',
    arg0: object_t
  ): Promise<Java.ChainingTextWriter>;
  export function newInstanceP(
    className: 'ezvcard.property.Address',
    arg0: Java.Address
  ): Promise<Java.Address>;
  export function newInstanceP(
    className: 'ezvcard.property.Address'
  ): Promise<Java.Address>;
  export function newInstanceP(
    className: 'ezvcard.property.Birthday',
    arg0: object_t,
    arg1: object_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'ezvcard.property.Birthday',
    arg0: Java.Birthday
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'ezvcard.property.Birthday',
    arg0: object_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'ezvcard.property.Birthday',
    arg0: string_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'ezvcard.property.Birthday',
    arg0: object_t
  ): Promise<Java.Birthday>;
  export function newInstanceP(
    className: 'ezvcard.property.Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'ezvcard.property.Photo',
    arg0: string_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'ezvcard.property.Photo',
    arg0: object_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'ezvcard.property.Photo',
    arg0: object_array_t,
    arg1: Java.ImageType
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'ezvcard.property.Photo',
    arg0: Java.Photo
  ): Promise<Java.Photo>;
  export function newInstanceP(
    className: 'ezvcard.property.Revision',
    arg0: Java.Revision
  ): Promise<Java.Revision>;
  export function newInstanceP(
    className: 'ezvcard.property.Revision',
    arg0: object_t
  ): Promise<Java.Revision>;
  export function newInstanceP(
    className: 'ezvcard.property.StructuredName',
    arg0: Java.StructuredName
  ): Promise<Java.StructuredName>;
  export function newInstanceP(
    className: 'ezvcard.property.StructuredName'
  ): Promise<Java.StructuredName>;
  export function newInstanceP(
    className: 'ezvcard.property.Timezone',
    arg0: object_t,
    arg1: string_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'ezvcard.property.Timezone',
    arg0: Java.Timezone
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'ezvcard.property.Timezone',
    arg0: object_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'ezvcard.property.Timezone',
    arg0: object_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'ezvcard.property.Timezone',
    arg0: string_t
  ): Promise<Java.Timezone>;
  export function newInstanceP(
    className: 'ezvcard.property.Uid',
    arg0: Java.Uid
  ): Promise<Java.Uid>;
  export function newInstanceP(
    className: 'ezvcard.property.Uid',
    arg0: string_t
  ): Promise<Java.Uid>;
  export function newInstanceP(
    className: 'ezvcard.ValidationWarning',
    arg0: object_t,
    ...arg1: object_t[]
  ): Promise<Java.ValidationWarning>;
  export function newInstanceP(
    className: 'ezvcard.ValidationWarning',
    arg0: string_t
  ): Promise<Java.ValidationWarning>;
  export function newInstanceP(
    className: 'ezvcard.ValidationWarnings'
  ): Promise<Java.ValidationWarnings>;
  export function newInstanceP(
    className: 'ezvcard.VCard',
    arg0: Java.VCardVersion
  ): Promise<Java.VCard>;
  export function newInstanceP(
    className: 'ezvcard.VCard',
    arg0: Java.VCard
  ): Promise<Java.VCard>;
  export function newInstanceP(className: 'ezvcard.VCard'): Promise<Java.VCard>;
  export function newInstanceP(
    className: 'java.lang.Object'
  ): Promise<object_t>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: string_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t,
    arg3: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t,
    arg2: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: string_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t,
    arg1: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: string_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t
  ): Promise<string>;
  export function newInstanceP(
    className: 'java.lang.String',
    arg0: object_array_t
  ): Promise<string>;
  export function newInstanceP(className: 'java.lang.String'): Promise<string>;
  export function newInstanceP(className: string, ...args: any[]): Promise<any>;
  export function newInstanceP(
    className: string,
    ...args: any[]
  ): Promise<any> {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.newInstanceP.apply(_java, [fullName, ...args]);
  }

  export function newArray(
    className: 'Ezvcard',
    arg: Java.Ezvcard[]
  ): array_t<ezvcard.Ezvcard>;
  export function newArray(
    className: 'ChainingTextWriter',
    arg: Java.ChainingTextWriter[]
  ): array_t<ezvcard.io.chain.ChainingTextWriter>;
  export function newArray(
    className: 'Messages',
    arg: Java.Messages[]
  ): array_t<ezvcard.Messages>;
  export function newArray(
    className: 'AddressType',
    arg: Java.AddressType[]
  ): array_t<ezvcard.parameter.AddressType>;
  export function newArray(
    className: 'ImageType',
    arg: Java.ImageType[]
  ): array_t<ezvcard.parameter.ImageType>;
  export function newArray(
    className: 'TelephoneType',
    arg: Java.TelephoneType[]
  ): array_t<ezvcard.parameter.TelephoneType>;
  export function newArray(
    className: 'Address',
    arg: Java.Address[]
  ): array_t<ezvcard.property.Address>;
  export function newArray(
    className: 'Birthday',
    arg: Java.Birthday[]
  ): array_t<ezvcard.property.Birthday>;
  export function newArray(
    className: 'Photo',
    arg: Java.Photo[]
  ): array_t<ezvcard.property.Photo>;
  export function newArray(
    className: 'Revision',
    arg: Java.Revision[]
  ): array_t<ezvcard.property.Revision>;
  export function newArray(
    className: 'StructuredName',
    arg: Java.StructuredName[]
  ): array_t<ezvcard.property.StructuredName>;
  export function newArray(
    className: 'Timezone',
    arg: Java.Timezone[]
  ): array_t<ezvcard.property.Timezone>;
  export function newArray(
    className: 'Uid',
    arg: Java.Uid[]
  ): array_t<ezvcard.property.Uid>;
  export function newArray(
    className: 'SupportedVersions',
    arg: Java.SupportedVersions[]
  ): array_t<ezvcard.SupportedVersions>;
  export function newArray(
    className: 'ValidationWarning',
    arg: Java.ValidationWarning[]
  ): array_t<ezvcard.ValidationWarning>;
  export function newArray(
    className: 'ValidationWarnings',
    arg: Java.ValidationWarnings[]
  ): array_t<ezvcard.ValidationWarnings>;
  export function newArray(
    className: 'VCard',
    arg: Java.VCard[]
  ): array_t<ezvcard.VCard>;
  export function newArray(
    className: 'VCardDataType',
    arg: Java.VCardDataType[]
  ): array_t<ezvcard.VCardDataType>;
  export function newArray(
    className: 'VCardVersion',
    arg: Java.VCardVersion[]
  ): array_t<ezvcard.VCardVersion>;
  export function newArray(
    className: 'Object',
    arg: object_t[]
  ): array_t<java.lang.Object>;
  export function newArray(
    className: 'String',
    arg: string_t[]
  ): array_t<java.lang.String>;
  export function newArray(
    className: 'ezvcard.Ezvcard',
    arg: Java.Ezvcard[]
  ): array_t<ezvcard.Ezvcard>;
  export function newArray(
    className: 'ezvcard.io.chain.ChainingTextWriter',
    arg: Java.ChainingTextWriter[]
  ): array_t<ezvcard.io.chain.ChainingTextWriter>;
  export function newArray(
    className: 'ezvcard.Messages',
    arg: Java.Messages[]
  ): array_t<ezvcard.Messages>;
  export function newArray(
    className: 'ezvcard.parameter.AddressType',
    arg: Java.AddressType[]
  ): array_t<ezvcard.parameter.AddressType>;
  export function newArray(
    className: 'ezvcard.parameter.ImageType',
    arg: Java.ImageType[]
  ): array_t<ezvcard.parameter.ImageType>;
  export function newArray(
    className: 'ezvcard.parameter.TelephoneType',
    arg: Java.TelephoneType[]
  ): array_t<ezvcard.parameter.TelephoneType>;
  export function newArray(
    className: 'ezvcard.property.Address',
    arg: Java.Address[]
  ): array_t<ezvcard.property.Address>;
  export function newArray(
    className: 'ezvcard.property.Birthday',
    arg: Java.Birthday[]
  ): array_t<ezvcard.property.Birthday>;
  export function newArray(
    className: 'ezvcard.property.Photo',
    arg: Java.Photo[]
  ): array_t<ezvcard.property.Photo>;
  export function newArray(
    className: 'ezvcard.property.Revision',
    arg: Java.Revision[]
  ): array_t<ezvcard.property.Revision>;
  export function newArray(
    className: 'ezvcard.property.StructuredName',
    arg: Java.StructuredName[]
  ): array_t<ezvcard.property.StructuredName>;
  export function newArray(
    className: 'ezvcard.property.Timezone',
    arg: Java.Timezone[]
  ): array_t<ezvcard.property.Timezone>;
  export function newArray(
    className: 'ezvcard.property.Uid',
    arg: Java.Uid[]
  ): array_t<ezvcard.property.Uid>;
  export function newArray(
    className: 'ezvcard.SupportedVersions',
    arg: Java.SupportedVersions[]
  ): array_t<ezvcard.SupportedVersions>;
  export function newArray(
    className: 'ezvcard.ValidationWarning',
    arg: Java.ValidationWarning[]
  ): array_t<ezvcard.ValidationWarning>;
  export function newArray(
    className: 'ezvcard.ValidationWarnings',
    arg: Java.ValidationWarnings[]
  ): array_t<ezvcard.ValidationWarnings>;
  export function newArray(
    className: 'ezvcard.VCard',
    arg: Java.VCard[]
  ): array_t<ezvcard.VCard>;
  export function newArray(
    className: 'ezvcard.VCardDataType',
    arg: Java.VCardDataType[]
  ): array_t<ezvcard.VCardDataType>;
  export function newArray(
    className: 'ezvcard.VCardVersion',
    arg: Java.VCardVersion[]
  ): array_t<ezvcard.VCardVersion>;
  export function newArray(
    className: 'java.lang.Object',
    arg: object_t[]
  ): array_t<java.lang.Object>;
  export function newArray(
    className: 'java.lang.String',
    arg: string_t[]
  ): array_t<java.lang.String>;
  export function newArray<T>(className: string, arg: any[]): array_t<T>;
  export function newArray<T>(className: string, arg: any[]): array_t<T> {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.newArray(fullName, arg);
  }

  // export module Java {

  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  export interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | Java.java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t =
    | Java.java.lang.Object
    | string
    | boolean
    | number
    | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean;
  export type short_t = number;
  export type integer_t = number;
  export type double_t = number;
  export type float_t = number;
  export type number_t = number;

  export interface array_t<T> extends Java.java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  export type object_array_t = array_t<Java.java.lang.Object> | object_t[];

  export import Ezvcard = ezvcard.Ezvcard;
  export import ChainingTextWriter = ezvcard.io.chain.ChainingTextWriter;
  export import Messages = ezvcard.Messages;
  export import AddressType = ezvcard.parameter.AddressType;
  export import ImageType = ezvcard.parameter.ImageType;
  export import TelephoneType = ezvcard.parameter.TelephoneType;
  export import Address = ezvcard.property.Address;
  export import Birthday = ezvcard.property.Birthday;
  export import Photo = ezvcard.property.Photo;
  export import Revision = ezvcard.property.Revision;
  export import StructuredName = ezvcard.property.StructuredName;
  export import Timezone = ezvcard.property.Timezone;
  export import Uid = ezvcard.property.Uid;
  export import SupportedVersions = ezvcard.SupportedVersions;
  export import ValidationWarning = ezvcard.ValidationWarning;
  export import ValidationWarnings = ezvcard.ValidationWarnings;
  export import VCard = ezvcard.VCard;
  export import VCardDataType = ezvcard.VCardDataType;
  export import VCardVersion = ezvcard.VCardVersion;
  export import Object = java.lang.Object;
  export import String = java.lang.String;

  export module ezvcard {
    export interface Ezvcard extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Ezvcard {
      export interface Static {
        VERSION: string;
        GROUP_ID: string;
        ARTIFACT_ID: string;
        URL: string;
        class: Java.Object;
        // public static ezvcard.io.chain.ChainingTextStringParser ezvcard.Ezvcard.parse(java.lang.String)
        parseA(arg0: string_t, cb: Callback<object_t>): void;
        parse(arg0: string_t): object_t;
        parseP(arg0: string_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingTextParser<ezvcard.io.chain.ChainingTextParser<?>> ezvcard.Ezvcard.parse(java.io.InputStream)
        parseA(arg0: object_t, cb: Callback<object_t>): void;
        parse(arg0: object_t): object_t;
        parseP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingTextParser<ezvcard.io.chain.ChainingTextParser<?>> ezvcard.Ezvcard.parse(java.io.Reader)
        parseA(arg0: object_t, cb: Callback<object_t>): void;
        parse(arg0: object_t): object_t;
        parseP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingTextParser<ezvcard.io.chain.ChainingTextParser<?>> ezvcard.Ezvcard.parse(java.io.File)
        parseA(arg0: object_t, cb: Callback<object_t>): void;
        parse(arg0: object_t): object_t;
        parseP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingHtmlStringParser ezvcard.Ezvcard.parseHtml(java.lang.String)
        parseHtmlA(arg0: string_t, cb: Callback<object_t>): void;
        parseHtml(arg0: string_t): object_t;
        parseHtmlP(arg0: string_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingHtmlParser<ezvcard.io.chain.ChainingHtmlParser<?>> ezvcard.Ezvcard.parseHtml(java.io.InputStream)
        parseHtmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseHtml(arg0: object_t): object_t;
        parseHtmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingHtmlParser<ezvcard.io.chain.ChainingHtmlParser<?>> ezvcard.Ezvcard.parseHtml(java.io.Reader)
        parseHtmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseHtml(arg0: object_t): object_t;
        parseHtmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingHtmlParser<ezvcard.io.chain.ChainingHtmlParser<?>> ezvcard.Ezvcard.parseHtml(java.net.URL)
        parseHtmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseHtml(arg0: object_t): object_t;
        parseHtmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingHtmlParser<ezvcard.io.chain.ChainingHtmlParser<?>> ezvcard.Ezvcard.parseHtml(java.io.File)
        parseHtmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseHtml(arg0: object_t): object_t;
        parseHtmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingJsonStringParser ezvcard.Ezvcard.parseJson(java.lang.String)
        parseJsonA(arg0: string_t, cb: Callback<object_t>): void;
        parseJson(arg0: string_t): object_t;
        parseJsonP(arg0: string_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingJsonParser<ezvcard.io.chain.ChainingJsonParser<?>> ezvcard.Ezvcard.parseJson(java.io.InputStream)
        parseJsonA(arg0: object_t, cb: Callback<object_t>): void;
        parseJson(arg0: object_t): object_t;
        parseJsonP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingJsonParser<ezvcard.io.chain.ChainingJsonParser<?>> ezvcard.Ezvcard.parseJson(java.io.Reader)
        parseJsonA(arg0: object_t, cb: Callback<object_t>): void;
        parseJson(arg0: object_t): object_t;
        parseJsonP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingJsonParser<ezvcard.io.chain.ChainingJsonParser<?>> ezvcard.Ezvcard.parseJson(java.io.File)
        parseJsonA(arg0: object_t, cb: Callback<object_t>): void;
        parseJson(arg0: object_t): object_t;
        parseJsonP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingXmlMemoryParser ezvcard.Ezvcard.parseXml(org.w3c.dom.Document)
        parseXmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseXml(arg0: object_t): object_t;
        parseXmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingXmlMemoryParser ezvcard.Ezvcard.parseXml(java.lang.String)
        parseXmlA(arg0: string_t, cb: Callback<object_t>): void;
        parseXml(arg0: string_t): object_t;
        parseXmlP(arg0: string_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingXmlParser<ezvcard.io.chain.ChainingXmlParser<?>> ezvcard.Ezvcard.parseXml(java.io.InputStream)
        parseXmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseXml(arg0: object_t): object_t;
        parseXmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingXmlParser<ezvcard.io.chain.ChainingXmlParser<?>> ezvcard.Ezvcard.parseXml(java.io.Reader)
        parseXmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseXml(arg0: object_t): object_t;
        parseXmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingXmlParser<ezvcard.io.chain.ChainingXmlParser<?>> ezvcard.Ezvcard.parseXml(java.io.File)
        parseXmlA(arg0: object_t, cb: Callback<object_t>): void;
        parseXml(arg0: object_t): object_t;
        parseXmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingTextWriter ezvcard.Ezvcard.write(java.util.Collection<ezvcard.VCard>)
        writeA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
        write(arg0: object_t): Java.ChainingTextWriter;
        writeP(arg0: object_t): Promise<Java.ChainingTextWriter>;
        // public static ezvcard.io.chain.ChainingTextWriter ezvcard.Ezvcard.write(ezvcard.VCard...)
        writeA(
          arg0: array_t<Java.VCard>,
          cb: Callback<Java.ChainingTextWriter>
        ): void;
        write(...arg0: Java.VCard[]): Java.ChainingTextWriter;
        write(arg0: array_t<Java.VCard>): Java.ChainingTextWriter;
        writeP(...arg0: Java.VCard[]): Promise<Java.ChainingTextWriter>;
        writeP(arg0: array_t<Java.VCard>): Promise<Java.ChainingTextWriter>;
        // public static ezvcard.io.chain.ChainingHtmlWriter ezvcard.Ezvcard.writeHtml(java.util.Collection<ezvcard.VCard>)
        writeHtmlA(arg0: object_t, cb: Callback<object_t>): void;
        writeHtml(arg0: object_t): object_t;
        writeHtmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingHtmlWriter ezvcard.Ezvcard.writeHtml(ezvcard.VCard...)
        writeHtmlA(arg0: array_t<Java.VCard>, cb: Callback<object_t>): void;
        writeHtml(...arg0: Java.VCard[]): object_t;
        writeHtml(arg0: array_t<Java.VCard>): object_t;
        writeHtmlP(...arg0: Java.VCard[]): Promise<object_t>;
        writeHtmlP(arg0: array_t<Java.VCard>): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingJsonWriter ezvcard.Ezvcard.writeJson(java.util.Collection<ezvcard.VCard>)
        writeJsonA(arg0: object_t, cb: Callback<object_t>): void;
        writeJson(arg0: object_t): object_t;
        writeJsonP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingJsonWriter ezvcard.Ezvcard.writeJson(ezvcard.VCard...)
        writeJsonA(arg0: array_t<Java.VCard>, cb: Callback<object_t>): void;
        writeJson(...arg0: Java.VCard[]): object_t;
        writeJson(arg0: array_t<Java.VCard>): object_t;
        writeJsonP(...arg0: Java.VCard[]): Promise<object_t>;
        writeJsonP(arg0: array_t<Java.VCard>): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingXmlWriter ezvcard.Ezvcard.writeXml(java.util.Collection<ezvcard.VCard>)
        writeXmlA(arg0: object_t, cb: Callback<object_t>): void;
        writeXml(arg0: object_t): object_t;
        writeXmlP(arg0: object_t): Promise<object_t>;
        // public static ezvcard.io.chain.ChainingXmlWriter ezvcard.Ezvcard.writeXml(ezvcard.VCard...)
        writeXmlA(arg0: array_t<Java.VCard>, cb: Callback<object_t>): void;
        writeXml(...arg0: Java.VCard[]): object_t;
        writeXml(arg0: array_t<Java.VCard>): object_t;
        writeXmlP(...arg0: Java.VCard[]): Promise<object_t>;
        writeXmlP(arg0: array_t<Java.VCard>): Promise<object_t>;
      }
    }
  }

  export module ezvcard.io.chain {
    export interface ChainingTextWriter extends Java.java.lang.Object {
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.caretEncoding(boolean)
      caretEncodingA(
        arg0: object_t,
        cb: Callback<Java.ChainingTextWriter>
      ): void;
      caretEncoding(arg0: object_t): Java.ChainingTextWriter;
      caretEncodingP(arg0: object_t): Promise<Java.ChainingTextWriter>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.foldLines(boolean)
      foldLinesA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
      foldLines(arg0: object_t): Java.ChainingTextWriter;
      foldLinesP(arg0: object_t): Promise<Java.ChainingTextWriter>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public void ezvcard.io.chain.ChainingTextWriter.go(java.io.File,boolean) throws java.io.IOException
      goA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      go(arg0: object_t, arg1: object_t): void;
      goP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void ezvcard.io.chain.ChainingTextWriter.go(java.io.OutputStream) throws java.io.IOException
      goA(arg0: object_t, cb: Callback<void>): void;
      go(arg0: object_t): void;
      goP(arg0: object_t): Promise<void>;
      // public void ezvcard.io.chain.ChainingTextWriter.go(java.io.Writer) throws java.io.IOException
      goA(arg0: object_t, cb: Callback<void>): void;
      go(arg0: object_t): void;
      goP(arg0: object_t): Promise<void>;
      // public void ezvcard.io.chain.ChainingTextWriter.go(java.io.File) throws java.io.IOException
      goA(arg0: object_t, cb: Callback<void>): void;
      go(arg0: object_t): void;
      goP(arg0: object_t): Promise<void>;
      // public java.lang.String ezvcard.io.chain.ChainingTextWriter.go()
      goA(cb: Callback<string>): void;
      go(): string;
      goP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.includeTrailingSemicolons(java.lang.Boolean)
      includeTrailingSemicolonsA(
        arg0: object_t,
        cb: Callback<Java.ChainingTextWriter>
      ): void;
      includeTrailingSemicolons(arg0: object_t): Java.ChainingTextWriter;
      includeTrailingSemicolonsP(
        arg0: object_t
      ): Promise<Java.ChainingTextWriter>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.prodId(boolean)
      prodIdA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
      prodId(arg0: object_t): Java.ChainingTextWriter;
      prodIdP(arg0: object_t): Promise<Java.ChainingTextWriter>;
      // public ezvcard.io.chain.ChainingWriter ezvcard.io.chain.ChainingTextWriter.prodId(boolean)
      prodIdA(arg0: object_t, cb: Callback<object_t>): void;
      prodId(arg0: object_t): object_t;
      prodIdP(arg0: object_t): Promise<object_t>;
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.register(ezvcard.io.scribe.VCardPropertyScribe<? extends ezvcard.property.VCardProperty>)
      registerA(arg0: object_t, cb: Callback<Java.ChainingTextWriter>): void;
      register(arg0: object_t): Java.ChainingTextWriter;
      registerP(arg0: object_t): Promise<Java.ChainingTextWriter>;
      // public ezvcard.io.chain.ChainingWriter ezvcard.io.chain.ChainingTextWriter.register(ezvcard.io.scribe.VCardPropertyScribe)
      registerA(arg0: object_t, cb: Callback<object_t>): void;
      register(arg0: object_t): object_t;
      registerP(arg0: object_t): Promise<object_t>;
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.targetApplication(ezvcard.io.text.TargetApplication)
      targetApplicationA(
        arg0: object_t,
        cb: Callback<Java.ChainingTextWriter>
      ): void;
      targetApplication(arg0: object_t): Java.ChainingTextWriter;
      targetApplicationP(arg0: object_t): Promise<Java.ChainingTextWriter>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.version(ezvcard.VCardVersion)
      versionA(
        arg0: Java.VCardVersion,
        cb: Callback<Java.ChainingTextWriter>
      ): void;
      version(arg0: Java.VCardVersion): Java.ChainingTextWriter;
      versionP(arg0: Java.VCardVersion): Promise<Java.ChainingTextWriter>;
      // public ezvcard.io.chain.ChainingTextWriter ezvcard.io.chain.ChainingTextWriter.versionStrict(boolean)
      versionStrictA(
        arg0: object_t,
        cb: Callback<Java.ChainingTextWriter>
      ): void;
      versionStrict(arg0: object_t): Java.ChainingTextWriter;
      versionStrictP(arg0: object_t): Promise<Java.ChainingTextWriter>;
      // public ezvcard.io.chain.ChainingWriter ezvcard.io.chain.ChainingTextWriter.versionStrict(boolean)
      versionStrictA(arg0: object_t, cb: Callback<object_t>): void;
      versionStrict(arg0: object_t): object_t;
      versionStrictP(arg0: object_t): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ChainingTextWriter {
      export interface Static {
        class: Java.Object;
        new (arg0: object_t): ezvcard.io.chain.ChainingTextWriter;
      }
    }
  }

  export module ezvcard {
    export interface Messages extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public final java.util.Optional<java.lang.Enum$EnumDesc<E>> java.lang.Enum.describeConstable()
      describeConstableA(cb: Callback<object_t>): void;
      describeConstable(): object_t;
      describeConstableP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA(cb: Callback<object_t>): void;
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public java.lang.String ezvcard.Messages.getExceptionMessage(int,java.lang.Object...)
      getExceptionMessageA(
        arg0: object_t,
        arg1: object_array_t,
        cb: Callback<string>
      ): void;
      getExceptionMessage(arg0: object_t, ...arg1: object_t[]): string;
      getExceptionMessage(arg0: object_t, arg1: object_array_t): string;
      getExceptionMessageP(
        arg0: object_t,
        ...arg1: object_t[]
      ): Promise<string>;
      getExceptionMessageP(
        arg0: object_t,
        arg1: object_array_t
      ): Promise<string>;
      // public java.lang.IllegalArgumentException ezvcard.Messages.getIllegalArgumentException(int,java.lang.Object...)
      getIllegalArgumentExceptionA(
        arg0: object_t,
        arg1: object_array_t,
        cb: Callback<object_t>
      ): void;
      getIllegalArgumentException(
        arg0: object_t,
        ...arg1: object_t[]
      ): object_t;
      getIllegalArgumentException(
        arg0: object_t,
        arg1: object_array_t
      ): object_t;
      getIllegalArgumentExceptionP(
        arg0: object_t,
        ...arg1: object_t[]
      ): Promise<object_t>;
      getIllegalArgumentExceptionP(
        arg0: object_t,
        arg1: object_array_t
      ): Promise<object_t>;
      // public java.lang.String ezvcard.Messages.getMessage(java.lang.String,java.lang.Object...)
      getMessageA(
        arg0: string_t,
        arg1: object_array_t,
        cb: Callback<string>
      ): void;
      getMessage(arg0: string_t, ...arg1: object_t[]): string;
      getMessage(arg0: string_t, arg1: object_array_t): string;
      getMessageP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
      getMessageP(arg0: string_t, arg1: object_array_t): Promise<string>;
      // public java.lang.String ezvcard.Messages.getParseMessage(int,java.lang.Object...)
      getParseMessageA(
        arg0: object_t,
        arg1: object_array_t,
        cb: Callback<string>
      ): void;
      getParseMessage(arg0: object_t, ...arg1: object_t[]): string;
      getParseMessage(arg0: object_t, arg1: object_array_t): string;
      getParseMessageP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
      getParseMessageP(arg0: object_t, arg1: object_array_t): Promise<string>;
      // public java.lang.String ezvcard.Messages.getValidationWarning(int,java.lang.Object...)
      getValidationWarningA(
        arg0: object_t,
        arg1: object_array_t,
        cb: Callback<string>
      ): void;
      getValidationWarning(arg0: object_t, ...arg1: object_t[]): string;
      getValidationWarning(arg0: object_t, arg1: object_array_t): string;
      getValidationWarningP(
        arg0: object_t,
        ...arg1: object_t[]
      ): Promise<string>;
      getValidationWarningP(
        arg0: object_t,
        arg1: object_array_t
      ): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final java.lang.String java.lang.Enum.name()
      nameA(cb: Callback<string>): void;
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinalA(cb: Callback<object_t>): void;
      ordinal(): object_t;
      ordinalP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Messages {
      export interface Static {
        INSTANCE: Java.Messages;
        class: Java.Object;
        // public static <T extends java.lang.Enum<T>> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: object_t, arg1: string_t, cb: Callback<object_t>): void;
        valueOf(arg0: object_t, arg1: string_t): object_t;
        valueOfP(arg0: object_t, arg1: string_t): Promise<object_t>;
        // public static ezvcard.Messages ezvcard.Messages.valueOf(java.lang.String)
        valueOfA(arg0: string_t, cb: Callback<Java.Messages>): void;
        valueOf(arg0: string_t): Java.Messages;
        valueOfP(arg0: string_t): Promise<Java.Messages>;
        // public static ezvcard.Messages[] ezvcard.Messages.values()
        valuesA(cb: Callback<Java.Messages[]>): void;
        values(): Java.Messages[];
        valuesP(): Promise<Java.Messages[]>;
      }
    }
  }

  export module ezvcard.parameter {
    export interface AddressType extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public ezvcard.VCardVersion[] ezvcard.parameter.VCardParameter.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public java.lang.String ezvcard.parameter.VCardParameter.getValue()
      getValueA(cb: Callback<string>): void;
      getValue(): string;
      getValueP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public boolean ezvcard.parameter.VCardParameter.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AddressType {
      export interface Static {
        HOME: Java.AddressType;
        WORK: Java.AddressType;
        DOM: Java.AddressType;
        INTL: Java.AddressType;
        POSTAL: Java.AddressType;
        PARCEL: Java.AddressType;
        PREF: Java.AddressType;
        class: Java.Object;
        // public static java.util.Collection<ezvcard.parameter.AddressType> ezvcard.parameter.AddressType.all()
        allA(cb: Callback<object_t>): void;
        all(): object_t;
        allP(): Promise<object_t>;
        // public static ezvcard.parameter.AddressType ezvcard.parameter.AddressType.find(java.lang.String)
        findA(arg0: string_t, cb: Callback<Java.AddressType>): void;
        find(arg0: string_t): Java.AddressType;
        findP(arg0: string_t): Promise<Java.AddressType>;
        // public static ezvcard.parameter.AddressType ezvcard.parameter.AddressType.get(java.lang.String)
        getA(arg0: string_t, cb: Callback<Java.AddressType>): void;
        get(arg0: string_t): Java.AddressType;
        getP(arg0: string_t): Promise<Java.AddressType>;
      }
    }
  }

  export module ezvcard.parameter {
    export interface ImageType extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String ezvcard.parameter.MediaTypeParameter.getExtension()
      getExtensionA(cb: Callback<string>): void;
      getExtension(): string;
      getExtensionP(): Promise<string>;
      // public java.lang.String ezvcard.parameter.MediaTypeParameter.getMediaType()
      getMediaTypeA(cb: Callback<string>): void;
      getMediaType(): string;
      getMediaTypeP(): Promise<string>;
      // public ezvcard.VCardVersion[] ezvcard.parameter.VCardParameter.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public java.lang.String ezvcard.parameter.VCardParameter.getValue()
      getValueA(cb: Callback<string>): void;
      getValue(): string;
      getValueP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public boolean ezvcard.parameter.VCardParameter.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ImageType {
      export interface Static {
        GIF: Java.ImageType;
        JPEG: Java.ImageType;
        PNG: Java.ImageType;
        class: Java.Object;
        // public static java.util.Collection<ezvcard.parameter.ImageType> ezvcard.parameter.ImageType.all()
        allA(cb: Callback<object_t>): void;
        all(): object_t;
        allP(): Promise<object_t>;
        // public static ezvcard.parameter.ImageType ezvcard.parameter.ImageType.find(java.lang.String,java.lang.String,java.lang.String)
        findA(
          arg0: string_t,
          arg1: string_t,
          arg2: string_t,
          cb: Callback<Java.ImageType>
        ): void;
        find(arg0: string_t, arg1: string_t, arg2: string_t): Java.ImageType;
        findP(
          arg0: string_t,
          arg1: string_t,
          arg2: string_t
        ): Promise<Java.ImageType>;
        // public static ezvcard.parameter.ImageType ezvcard.parameter.ImageType.get(java.lang.String,java.lang.String,java.lang.String)
        getA(
          arg0: string_t,
          arg1: string_t,
          arg2: string_t,
          cb: Callback<Java.ImageType>
        ): void;
        get(arg0: string_t, arg1: string_t, arg2: string_t): Java.ImageType;
        getP(
          arg0: string_t,
          arg1: string_t,
          arg2: string_t
        ): Promise<Java.ImageType>;
      }
    }
  }

  export module ezvcard.parameter {
    export interface TelephoneType extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public ezvcard.VCardVersion[] ezvcard.parameter.VCardParameter.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public java.lang.String ezvcard.parameter.VCardParameter.getValue()
      getValueA(cb: Callback<string>): void;
      getValue(): string;
      getValueP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public boolean ezvcard.parameter.VCardParameter.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TelephoneType {
      export interface Static {
        BBS: Java.TelephoneType;
        CAR: Java.TelephoneType;
        CELL: Java.TelephoneType;
        FAX: Java.TelephoneType;
        HOME: Java.TelephoneType;
        ISDN: Java.TelephoneType;
        MODEM: Java.TelephoneType;
        MSG: Java.TelephoneType;
        PAGER: Java.TelephoneType;
        PCS: Java.TelephoneType;
        PREF: Java.TelephoneType;
        TEXT: Java.TelephoneType;
        TEXTPHONE: Java.TelephoneType;
        VIDEO: Java.TelephoneType;
        VOICE: Java.TelephoneType;
        WORK: Java.TelephoneType;
        class: Java.Object;
        // public static java.util.Collection<ezvcard.parameter.TelephoneType> ezvcard.parameter.TelephoneType.all()
        allA(cb: Callback<object_t>): void;
        all(): object_t;
        allP(): Promise<object_t>;
        // public static ezvcard.parameter.TelephoneType ezvcard.parameter.TelephoneType.find(java.lang.String)
        findA(arg0: string_t, cb: Callback<Java.TelephoneType>): void;
        find(arg0: string_t): Java.TelephoneType;
        findP(arg0: string_t): Promise<Java.TelephoneType>;
        // public static ezvcard.parameter.TelephoneType ezvcard.parameter.TelephoneType.get(java.lang.String)
        getA(arg0: string_t, cb: Callback<Java.TelephoneType>): void;
        get(arg0: string_t): Java.TelephoneType;
        getP(arg0: string_t): Promise<Java.TelephoneType>;
      }
    }
  }

  export module ezvcard.property {
    export interface Address extends Java.java.lang.Object {
      // public void ezvcard.property.VCardProperty.addParameter(java.lang.String,java.lang.String)
      addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      addParameter(arg0: string_t, arg1: string_t): void;
      addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public int ezvcard.property.VCardProperty.compareTo(ezvcard.property.VCardProperty)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int ezvcard.property.VCardProperty.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public ezvcard.property.VCardProperty ezvcard.property.Address.copy()
      copyA(cb: Callback<object_t>): void;
      copy(): object_t;
      copyP(): Promise<object_t>;
      // public ezvcard.property.Address ezvcard.property.Address.copy()
      copyA(cb: Callback<Java.Address>): void;
      copy(): Java.Address;
      copyP(): Promise<Java.Address>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getAltId()
      getAltIdA(cb: Callback<string>): void;
      getAltId(): string;
      getAltIdP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.util.List<java.lang.String> ezvcard.property.Address.getCountries()
      getCountriesA(cb: Callback<object_t>): void;
      getCountries(): object_t;
      getCountriesP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getCountry()
      getCountryA(cb: Callback<string>): void;
      getCountry(): string;
      getCountryP(): Promise<string>;
      // public java.lang.String ezvcard.property.Address.getExtendedAddress()
      getExtendedAddressA(cb: Callback<string>): void;
      getExtendedAddress(): string;
      getExtendedAddressP(): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.Address.getExtendedAddresses()
      getExtendedAddressesA(cb: Callback<object_t>): void;
      getExtendedAddresses(): object_t;
      getExtendedAddressesP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getExtendedAddressFull()
      getExtendedAddressFullA(cb: Callback<string>): void;
      getExtendedAddressFull(): string;
      getExtendedAddressFullP(): Promise<string>;
      // public ezvcard.util.GeoUri ezvcard.property.Address.getGeo()
      getGeoA(cb: Callback<object_t>): void;
      getGeo(): object_t;
      getGeoP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.VCardProperty.getGroup()
      getGroupA(cb: Callback<string>): void;
      getGroup(): string;
      getGroupP(): Promise<string>;
      // public java.lang.String ezvcard.property.Address.getLabel()
      getLabelA(cb: Callback<string>): void;
      getLabel(): string;
      getLabelP(): Promise<string>;
      // public java.lang.String ezvcard.property.Address.getLanguage()
      getLanguageA(cb: Callback<string>): void;
      getLanguage(): string;
      getLanguageP(): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.Address.getLocalities()
      getLocalitiesA(cb: Callback<object_t>): void;
      getLocalities(): object_t;
      getLocalitiesP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getLocality()
      getLocalityA(cb: Callback<string>): void;
      getLocality(): string;
      getLocalityP(): Promise<string>;
      // public java.lang.String ezvcard.property.VCardProperty.getParameter(java.lang.String)
      getParameterA(arg0: string_t, cb: Callback<string>): void;
      getParameter(arg0: string_t): string;
      getParameterP(arg0: string_t): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.VCardProperty.getParameters(java.lang.String)
      getParametersA(arg0: string_t, cb: Callback<object_t>): void;
      getParameters(arg0: string_t): object_t;
      getParametersP(arg0: string_t): Promise<object_t>;
      // public ezvcard.parameter.VCardParameters ezvcard.property.VCardProperty.getParameters()
      getParametersA(cb: Callback<object_t>): void;
      getParameters(): object_t;
      getParametersP(): Promise<object_t>;
      // public java.util.List<ezvcard.parameter.Pid> ezvcard.property.Address.getPids()
      getPidsA(cb: Callback<object_t>): void;
      getPids(): object_t;
      getPidsP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getPoBox()
      getPoBoxA(cb: Callback<string>): void;
      getPoBox(): string;
      getPoBoxP(): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.Address.getPoBoxes()
      getPoBoxesA(cb: Callback<object_t>): void;
      getPoBoxes(): object_t;
      getPoBoxesP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getPostalCode()
      getPostalCodeA(cb: Callback<string>): void;
      getPostalCode(): string;
      getPostalCodeP(): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.Address.getPostalCodes()
      getPostalCodesA(cb: Callback<object_t>): void;
      getPostalCodes(): object_t;
      getPostalCodesP(): Promise<object_t>;
      // public java.lang.Integer ezvcard.property.Address.getPref()
      getPrefA(cb: Callback<object_t>): void;
      getPref(): object_t;
      getPrefP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getRegion()
      getRegionA(cb: Callback<string>): void;
      getRegion(): string;
      getRegionP(): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.Address.getRegions()
      getRegionsA(cb: Callback<object_t>): void;
      getRegions(): object_t;
      getRegionsP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getStreetAddress()
      getStreetAddressA(cb: Callback<string>): void;
      getStreetAddress(): string;
      getStreetAddressP(): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.Address.getStreetAddresses()
      getStreetAddressesA(cb: Callback<object_t>): void;
      getStreetAddresses(): object_t;
      getStreetAddressesP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.Address.getStreetAddressFull()
      getStreetAddressFullA(cb: Callback<string>): void;
      getStreetAddressFull(): string;
      getStreetAddressFullP(): Promise<string>;
      // public final ezvcard.VCardVersion[] ezvcard.property.VCardProperty.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public java.lang.String ezvcard.property.Address.getTimezone()
      getTimezoneA(cb: Callback<string>): void;
      getTimezone(): string;
      getTimezoneP(): Promise<string>;
      // public java.util.List<ezvcard.parameter.AddressType> ezvcard.property.Address.getTypes()
      getTypesA(cb: Callback<object_t>): void;
      getTypes(): object_t;
      getTypesP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final boolean ezvcard.property.VCardProperty.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void ezvcard.property.VCardProperty.removeParameter(java.lang.String)
      removeParameterA(arg0: string_t, cb: Callback<void>): void;
      removeParameter(arg0: string_t): void;
      removeParameterP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setAltId(java.lang.String)
      setAltIdA(arg0: string_t, cb: Callback<void>): void;
      setAltId(arg0: string_t): void;
      setAltIdP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setCountry(java.lang.String)
      setCountryA(arg0: string_t, cb: Callback<void>): void;
      setCountry(arg0: string_t): void;
      setCountryP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setExtendedAddress(java.lang.String)
      setExtendedAddressA(arg0: string_t, cb: Callback<void>): void;
      setExtendedAddress(arg0: string_t): void;
      setExtendedAddressP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setGeo(ezvcard.util.GeoUri)
      setGeoA(arg0: object_t, cb: Callback<void>): void;
      setGeo(arg0: object_t): void;
      setGeoP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setGroup(java.lang.String)
      setGroupA(arg0: string_t, cb: Callback<void>): void;
      setGroup(arg0: string_t): void;
      setGroupP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setLabel(java.lang.String)
      setLabelA(arg0: string_t, cb: Callback<void>): void;
      setLabel(arg0: string_t): void;
      setLabelP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setLanguage(java.lang.String)
      setLanguageA(arg0: string_t, cb: Callback<void>): void;
      setLanguage(arg0: string_t): void;
      setLanguageP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setLocality(java.lang.String)
      setLocalityA(arg0: string_t, cb: Callback<void>): void;
      setLocality(arg0: string_t): void;
      setLocalityP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameter(java.lang.String,java.lang.String)
      setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setParameter(arg0: string_t, arg1: string_t): void;
      setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameters(ezvcard.parameter.VCardParameters)
      setParametersA(arg0: object_t, cb: Callback<void>): void;
      setParameters(arg0: object_t): void;
      setParametersP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.Address.setPoBox(java.lang.String)
      setPoBoxA(arg0: string_t, cb: Callback<void>): void;
      setPoBox(arg0: string_t): void;
      setPoBoxP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setPostalCode(java.lang.String)
      setPostalCodeA(arg0: string_t, cb: Callback<void>): void;
      setPostalCode(arg0: string_t): void;
      setPostalCodeP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setPref(java.lang.Integer)
      setPrefA(arg0: object_t, cb: Callback<void>): void;
      setPref(arg0: object_t): void;
      setPrefP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.Address.setRegion(java.lang.String)
      setRegionA(arg0: string_t, cb: Callback<void>): void;
      setRegion(arg0: string_t): void;
      setRegionP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setStreetAddress(java.lang.String)
      setStreetAddressA(arg0: string_t, cb: Callback<void>): void;
      setStreetAddress(arg0: string_t): void;
      setStreetAddressP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Address.setTimezone(java.lang.String)
      setTimezoneA(arg0: string_t, cb: Callback<void>): void;
      setTimezone(arg0: string_t): void;
      setTimezoneP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final java.util.List<ezvcard.ValidationWarning> ezvcard.property.VCardProperty.validate(ezvcard.VCardVersion,ezvcard.VCard)
      validateA(
        arg0: Java.VCardVersion,
        arg1: Java.VCard,
        cb: Callback<object_t>
      ): void;
      validate(arg0: Java.VCardVersion, arg1: Java.VCard): object_t;
      validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Address {
      export interface Static {
        class: Java.Object;
        new (arg0: Java.Address): ezvcard.property.Address;
        new (): ezvcard.property.Address;
      }
    }
  }

  export module ezvcard.property {
    export interface Birthday extends Java.java.lang.Object {
      // public void ezvcard.property.VCardProperty.addParameter(java.lang.String,java.lang.String)
      addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      addParameter(arg0: string_t, arg1: string_t): void;
      addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public int ezvcard.property.VCardProperty.compareTo(ezvcard.property.VCardProperty)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int ezvcard.property.VCardProperty.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public ezvcard.property.VCardProperty ezvcard.property.Birthday.copy()
      copyA(cb: Callback<object_t>): void;
      copy(): object_t;
      copyP(): Promise<object_t>;
      // public ezvcard.property.Birthday ezvcard.property.Birthday.copy()
      copyA(cb: Callback<Java.Birthday>): void;
      copy(): Java.Birthday;
      copyP(): Promise<Java.Birthday>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public java.lang.String ezvcard.property.DateOrTimeProperty.getAltId()
      getAltIdA(cb: Callback<string>): void;
      getAltId(): string;
      getAltIdP(): Promise<string>;
      // public ezvcard.parameter.Calscale ezvcard.property.DateOrTimeProperty.getCalscale()
      getCalscaleA(cb: Callback<object_t>): void;
      getCalscale(): object_t;
      getCalscaleP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.util.Date ezvcard.property.DateOrTimeProperty.getDate()
      getDateA(cb: Callback<object_t>): void;
      getDate(): object_t;
      getDateP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.VCardProperty.getGroup()
      getGroupA(cb: Callback<string>): void;
      getGroup(): string;
      getGroupP(): Promise<string>;
      // public java.lang.String ezvcard.property.DateOrTimeProperty.getLanguage()
      getLanguageA(cb: Callback<string>): void;
      getLanguage(): string;
      getLanguageP(): Promise<string>;
      // public java.lang.String ezvcard.property.VCardProperty.getParameter(java.lang.String)
      getParameterA(arg0: string_t, cb: Callback<string>): void;
      getParameter(arg0: string_t): string;
      getParameterP(arg0: string_t): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.VCardProperty.getParameters(java.lang.String)
      getParametersA(arg0: string_t, cb: Callback<object_t>): void;
      getParameters(arg0: string_t): object_t;
      getParametersP(arg0: string_t): Promise<object_t>;
      // public ezvcard.parameter.VCardParameters ezvcard.property.VCardProperty.getParameters()
      getParametersA(cb: Callback<object_t>): void;
      getParameters(): object_t;
      getParametersP(): Promise<object_t>;
      // public ezvcard.util.PartialDate ezvcard.property.DateOrTimeProperty.getPartialDate()
      getPartialDateA(cb: Callback<object_t>): void;
      getPartialDate(): object_t;
      getPartialDateP(): Promise<object_t>;
      // public final ezvcard.VCardVersion[] ezvcard.property.VCardProperty.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public java.lang.String ezvcard.property.DateOrTimeProperty.getText()
      getTextA(cb: Callback<string>): void;
      getText(): string;
      getTextP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public boolean ezvcard.property.DateOrTimeProperty.hasTime()
      hasTimeA(cb: Callback<object_t>): void;
      hasTime(): object_t;
      hasTimeP(): Promise<object_t>;
      // public final boolean ezvcard.property.VCardProperty.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void ezvcard.property.VCardProperty.removeParameter(java.lang.String)
      removeParameterA(arg0: string_t, cb: Callback<void>): void;
      removeParameter(arg0: string_t): void;
      removeParameterP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.DateOrTimeProperty.setAltId(java.lang.String)
      setAltIdA(arg0: string_t, cb: Callback<void>): void;
      setAltId(arg0: string_t): void;
      setAltIdP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.DateOrTimeProperty.setCalscale(ezvcard.parameter.Calscale)
      setCalscaleA(arg0: object_t, cb: Callback<void>): void;
      setCalscale(arg0: object_t): void;
      setCalscaleP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.DateOrTimeProperty.setDate(java.util.Date,boolean)
      setDateA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setDate(arg0: object_t, arg1: object_t): void;
      setDateP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setGroup(java.lang.String)
      setGroupA(arg0: string_t, cb: Callback<void>): void;
      setGroup(arg0: string_t): void;
      setGroupP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.DateOrTimeProperty.setLanguage(java.lang.String)
      setLanguageA(arg0: string_t, cb: Callback<void>): void;
      setLanguage(arg0: string_t): void;
      setLanguageP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameter(java.lang.String,java.lang.String)
      setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setParameter(arg0: string_t, arg1: string_t): void;
      setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameters(ezvcard.parameter.VCardParameters)
      setParametersA(arg0: object_t, cb: Callback<void>): void;
      setParameters(arg0: object_t): void;
      setParametersP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.DateOrTimeProperty.setPartialDate(ezvcard.util.PartialDate)
      setPartialDateA(arg0: object_t, cb: Callback<void>): void;
      setPartialDate(arg0: object_t): void;
      setPartialDateP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.DateOrTimeProperty.setText(java.lang.String)
      setTextA(arg0: string_t, cb: Callback<void>): void;
      setText(arg0: string_t): void;
      setTextP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final java.util.List<ezvcard.ValidationWarning> ezvcard.property.VCardProperty.validate(ezvcard.VCardVersion,ezvcard.VCard)
      validateA(
        arg0: Java.VCardVersion,
        arg1: Java.VCard,
        cb: Callback<object_t>
      ): void;
      validate(arg0: Java.VCardVersion, arg1: Java.VCard): object_t;
      validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Birthday {
      export interface Static {
        class: Java.Object;
        new (arg0: object_t, arg1: object_t): ezvcard.property.Birthday;
        new (arg0: Java.Birthday): ezvcard.property.Birthday;
        new (arg0: object_t): ezvcard.property.Birthday;
        new (arg0: string_t): ezvcard.property.Birthday;
        new (arg0: object_t): ezvcard.property.Birthday;
      }
    }
  }

  export module ezvcard.property {
    export interface Photo extends Java.java.lang.Object {
      // public void ezvcard.property.VCardProperty.addParameter(java.lang.String,java.lang.String)
      addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      addParameter(arg0: string_t, arg1: string_t): void;
      addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public int ezvcard.property.VCardProperty.compareTo(ezvcard.property.VCardProperty)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int ezvcard.property.VCardProperty.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public ezvcard.property.VCardProperty ezvcard.property.Photo.copy()
      copyA(cb: Callback<object_t>): void;
      copy(): object_t;
      copyP(): Promise<object_t>;
      // public ezvcard.property.Photo ezvcard.property.Photo.copy()
      copyA(cb: Callback<Java.Photo>): void;
      copy(): Java.Photo;
      copyP(): Promise<Java.Photo>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public java.lang.String ezvcard.property.BinaryProperty.getAltId()
      getAltIdA(cb: Callback<string>): void;
      getAltId(): string;
      getAltIdP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public T ezvcard.property.BinaryProperty.getContentType()
      getContentTypeA(cb: Callback<object_t>): void;
      getContentType(): object_t;
      getContentTypeP(): Promise<object_t>;
      // public byte[] ezvcard.property.BinaryProperty.getData()
      getDataA(cb: Callback<object_t[]>): void;
      getData(): object_t[];
      getDataP(): Promise<object_t[]>;
      // public java.lang.String ezvcard.property.VCardProperty.getGroup()
      getGroupA(cb: Callback<string>): void;
      getGroup(): string;
      getGroupP(): Promise<string>;
      // public java.lang.String ezvcard.property.VCardProperty.getParameter(java.lang.String)
      getParameterA(arg0: string_t, cb: Callback<string>): void;
      getParameter(arg0: string_t): string;
      getParameterP(arg0: string_t): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.VCardProperty.getParameters(java.lang.String)
      getParametersA(arg0: string_t, cb: Callback<object_t>): void;
      getParameters(arg0: string_t): object_t;
      getParametersP(arg0: string_t): Promise<object_t>;
      // public ezvcard.parameter.VCardParameters ezvcard.property.VCardProperty.getParameters()
      getParametersA(cb: Callback<object_t>): void;
      getParameters(): object_t;
      getParametersP(): Promise<object_t>;
      // public java.util.List<ezvcard.parameter.Pid> ezvcard.property.BinaryProperty.getPids()
      getPidsA(cb: Callback<object_t>): void;
      getPids(): object_t;
      getPidsP(): Promise<object_t>;
      // public java.lang.Integer ezvcard.property.BinaryProperty.getPref()
      getPrefA(cb: Callback<object_t>): void;
      getPref(): object_t;
      getPrefP(): Promise<object_t>;
      // public final ezvcard.VCardVersion[] ezvcard.property.VCardProperty.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public java.lang.String ezvcard.property.BinaryProperty.getType()
      getTypeA(cb: Callback<string>): void;
      getType(): string;
      getTypeP(): Promise<string>;
      // public java.lang.String ezvcard.property.BinaryProperty.getUrl()
      getUrlA(cb: Callback<string>): void;
      getUrl(): string;
      getUrlP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final boolean ezvcard.property.VCardProperty.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void ezvcard.property.VCardProperty.removeParameter(java.lang.String)
      removeParameterA(arg0: string_t, cb: Callback<void>): void;
      removeParameter(arg0: string_t): void;
      removeParameterP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.BinaryProperty.setAltId(java.lang.String)
      setAltIdA(arg0: string_t, cb: Callback<void>): void;
      setAltId(arg0: string_t): void;
      setAltIdP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.BinaryProperty.setContentType(T)
      setContentTypeA(arg0: object_t, cb: Callback<void>): void;
      setContentType(arg0: object_t): void;
      setContentTypeP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.BinaryProperty.setData(byte[],T)
      setDataA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
      setData(arg0: object_array_t, arg1: object_t): void;
      setDataP(arg0: object_array_t, arg1: object_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setGroup(java.lang.String)
      setGroupA(arg0: string_t, cb: Callback<void>): void;
      setGroup(arg0: string_t): void;
      setGroupP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameter(java.lang.String,java.lang.String)
      setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setParameter(arg0: string_t, arg1: string_t): void;
      setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameters(ezvcard.parameter.VCardParameters)
      setParametersA(arg0: object_t, cb: Callback<void>): void;
      setParameters(arg0: object_t): void;
      setParametersP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.BinaryProperty.setPref(java.lang.Integer)
      setPrefA(arg0: object_t, cb: Callback<void>): void;
      setPref(arg0: object_t): void;
      setPrefP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.BinaryProperty.setType(java.lang.String)
      setTypeA(arg0: string_t, cb: Callback<void>): void;
      setType(arg0: string_t): void;
      setTypeP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.BinaryProperty.setUrl(java.lang.String,T)
      setUrlA(arg0: string_t, arg1: object_t, cb: Callback<void>): void;
      setUrl(arg0: string_t, arg1: object_t): void;
      setUrlP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final java.util.List<ezvcard.ValidationWarning> ezvcard.property.VCardProperty.validate(ezvcard.VCardVersion,ezvcard.VCard)
      validateA(
        arg0: Java.VCardVersion,
        arg1: Java.VCard,
        cb: Callback<object_t>
      ): void;
      validate(arg0: Java.VCardVersion, arg1: Java.VCard): object_t;
      validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Photo {
      export interface Static {
        class: Java.Object;
        new (arg0: object_t, arg1: Java.ImageType): ezvcard.property.Photo;
        new (arg0: string_t, arg1: Java.ImageType): ezvcard.property.Photo;
        new (arg0: object_t, arg1: Java.ImageType): ezvcard.property.Photo;
        new (
          arg0: object_array_t,
          arg1: Java.ImageType
        ): ezvcard.property.Photo;
        new (arg0: Java.Photo): ezvcard.property.Photo;
      }
    }
  }

  export module ezvcard.property {
    export interface Revision extends Java.java.lang.Object {
      // public void ezvcard.property.VCardProperty.addParameter(java.lang.String,java.lang.String)
      addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      addParameter(arg0: string_t, arg1: string_t): void;
      addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public int ezvcard.property.VCardProperty.compareTo(ezvcard.property.VCardProperty)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int ezvcard.property.VCardProperty.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public ezvcard.property.VCardProperty ezvcard.property.Revision.copy()
      copyA(cb: Callback<object_t>): void;
      copy(): object_t;
      copyP(): Promise<object_t>;
      // public ezvcard.property.Revision ezvcard.property.Revision.copy()
      copyA(cb: Callback<Java.Revision>): void;
      copy(): Java.Revision;
      copyP(): Promise<Java.Revision>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.VCardProperty.getGroup()
      getGroupA(cb: Callback<string>): void;
      getGroup(): string;
      getGroupP(): Promise<string>;
      // public java.lang.String ezvcard.property.VCardProperty.getParameter(java.lang.String)
      getParameterA(arg0: string_t, cb: Callback<string>): void;
      getParameter(arg0: string_t): string;
      getParameterP(arg0: string_t): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.VCardProperty.getParameters(java.lang.String)
      getParametersA(arg0: string_t, cb: Callback<object_t>): void;
      getParameters(arg0: string_t): object_t;
      getParametersP(arg0: string_t): Promise<object_t>;
      // public ezvcard.parameter.VCardParameters ezvcard.property.VCardProperty.getParameters()
      getParametersA(cb: Callback<object_t>): void;
      getParameters(): object_t;
      getParametersP(): Promise<object_t>;
      // public final ezvcard.VCardVersion[] ezvcard.property.VCardProperty.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public T ezvcard.property.SimpleProperty.getValue()
      getValueA(cb: Callback<object_t>): void;
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final boolean ezvcard.property.VCardProperty.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void ezvcard.property.VCardProperty.removeParameter(java.lang.String)
      removeParameterA(arg0: string_t, cb: Callback<void>): void;
      removeParameter(arg0: string_t): void;
      removeParameterP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setGroup(java.lang.String)
      setGroupA(arg0: string_t, cb: Callback<void>): void;
      setGroup(arg0: string_t): void;
      setGroupP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameter(java.lang.String,java.lang.String)
      setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setParameter(arg0: string_t, arg1: string_t): void;
      setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameters(ezvcard.parameter.VCardParameters)
      setParametersA(arg0: object_t, cb: Callback<void>): void;
      setParameters(arg0: object_t): void;
      setParametersP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.SimpleProperty.setValue(T)
      setValueA(arg0: object_t, cb: Callback<void>): void;
      setValue(arg0: object_t): void;
      setValueP(arg0: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final java.util.List<ezvcard.ValidationWarning> ezvcard.property.VCardProperty.validate(ezvcard.VCardVersion,ezvcard.VCard)
      validateA(
        arg0: Java.VCardVersion,
        arg1: Java.VCard,
        cb: Callback<object_t>
      ): void;
      validate(arg0: Java.VCardVersion, arg1: Java.VCard): object_t;
      validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Revision {
      export interface Static {
        class: Java.Object;
        new (arg0: Java.Revision): ezvcard.property.Revision;
        new (arg0: object_t): ezvcard.property.Revision;
        // public static ezvcard.property.Revision ezvcard.property.Revision.now()
        nowA(cb: Callback<Java.Revision>): void;
        now(): Java.Revision;
        nowP(): Promise<Java.Revision>;
      }
    }
  }

  export module ezvcard.property {
    export interface StructuredName extends Java.java.lang.Object {
      // public void ezvcard.property.VCardProperty.addParameter(java.lang.String,java.lang.String)
      addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      addParameter(arg0: string_t, arg1: string_t): void;
      addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public int ezvcard.property.VCardProperty.compareTo(ezvcard.property.VCardProperty)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int ezvcard.property.VCardProperty.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public ezvcard.property.StructuredName ezvcard.property.StructuredName.copy()
      copyA(cb: Callback<Java.StructuredName>): void;
      copy(): Java.StructuredName;
      copyP(): Promise<Java.StructuredName>;
      // public ezvcard.property.VCardProperty ezvcard.property.StructuredName.copy()
      copyA(cb: Callback<object_t>): void;
      copy(): object_t;
      copyP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public java.util.List<java.lang.String> ezvcard.property.StructuredName.getAdditionalNames()
      getAdditionalNamesA(cb: Callback<object_t>): void;
      getAdditionalNames(): object_t;
      getAdditionalNamesP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.StructuredName.getAltId()
      getAltIdA(cb: Callback<string>): void;
      getAltId(): string;
      getAltIdP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.StructuredName.getFamily()
      getFamilyA(cb: Callback<string>): void;
      getFamily(): string;
      getFamilyP(): Promise<string>;
      // public java.lang.String ezvcard.property.StructuredName.getGiven()
      getGivenA(cb: Callback<string>): void;
      getGiven(): string;
      getGivenP(): Promise<string>;
      // public java.lang.String ezvcard.property.VCardProperty.getGroup()
      getGroupA(cb: Callback<string>): void;
      getGroup(): string;
      getGroupP(): Promise<string>;
      // public java.lang.String ezvcard.property.StructuredName.getLanguage()
      getLanguageA(cb: Callback<string>): void;
      getLanguage(): string;
      getLanguageP(): Promise<string>;
      // public java.lang.String ezvcard.property.VCardProperty.getParameter(java.lang.String)
      getParameterA(arg0: string_t, cb: Callback<string>): void;
      getParameter(arg0: string_t): string;
      getParameterP(arg0: string_t): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.VCardProperty.getParameters(java.lang.String)
      getParametersA(arg0: string_t, cb: Callback<object_t>): void;
      getParameters(arg0: string_t): object_t;
      getParametersP(arg0: string_t): Promise<object_t>;
      // public ezvcard.parameter.VCardParameters ezvcard.property.VCardProperty.getParameters()
      getParametersA(cb: Callback<object_t>): void;
      getParameters(): object_t;
      getParametersP(): Promise<object_t>;
      // public java.util.List<java.lang.String> ezvcard.property.StructuredName.getPrefixes()
      getPrefixesA(cb: Callback<object_t>): void;
      getPrefixes(): object_t;
      getPrefixesP(): Promise<object_t>;
      // public java.util.List<java.lang.String> ezvcard.property.StructuredName.getSortAs()
      getSortAsA(cb: Callback<object_t>): void;
      getSortAs(): object_t;
      getSortAsP(): Promise<object_t>;
      // public java.util.List<java.lang.String> ezvcard.property.StructuredName.getSuffixes()
      getSuffixesA(cb: Callback<object_t>): void;
      getSuffixes(): object_t;
      getSuffixesP(): Promise<object_t>;
      // public final ezvcard.VCardVersion[] ezvcard.property.VCardProperty.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final boolean ezvcard.property.VCardProperty.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void ezvcard.property.VCardProperty.removeParameter(java.lang.String)
      removeParameterA(arg0: string_t, cb: Callback<void>): void;
      removeParameter(arg0: string_t): void;
      removeParameterP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.StructuredName.setAltId(java.lang.String)
      setAltIdA(arg0: string_t, cb: Callback<void>): void;
      setAltId(arg0: string_t): void;
      setAltIdP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.StructuredName.setFamily(java.lang.String)
      setFamilyA(arg0: string_t, cb: Callback<void>): void;
      setFamily(arg0: string_t): void;
      setFamilyP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.StructuredName.setGiven(java.lang.String)
      setGivenA(arg0: string_t, cb: Callback<void>): void;
      setGiven(arg0: string_t): void;
      setGivenP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setGroup(java.lang.String)
      setGroupA(arg0: string_t, cb: Callback<void>): void;
      setGroup(arg0: string_t): void;
      setGroupP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.StructuredName.setLanguage(java.lang.String)
      setLanguageA(arg0: string_t, cb: Callback<void>): void;
      setLanguage(arg0: string_t): void;
      setLanguageP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameter(java.lang.String,java.lang.String)
      setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setParameter(arg0: string_t, arg1: string_t): void;
      setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameters(ezvcard.parameter.VCardParameters)
      setParametersA(arg0: object_t, cb: Callback<void>): void;
      setParameters(arg0: object_t): void;
      setParametersP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.StructuredName.setSortAs(java.lang.String,java.lang.String)
      setSortAsA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setSortAs(arg0: string_t, arg1: string_t): void;
      setSortAsP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.StructuredName.setSortAs(java.lang.String)
      setSortAsA(arg0: string_t, cb: Callback<void>): void;
      setSortAs(arg0: string_t): void;
      setSortAsP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final java.util.List<ezvcard.ValidationWarning> ezvcard.property.VCardProperty.validate(ezvcard.VCardVersion,ezvcard.VCard)
      validateA(
        arg0: Java.VCardVersion,
        arg1: Java.VCard,
        cb: Callback<object_t>
      ): void;
      validate(arg0: Java.VCardVersion, arg1: Java.VCard): object_t;
      validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StructuredName {
      export interface Static {
        class: Java.Object;
        new (arg0: Java.StructuredName): ezvcard.property.StructuredName;
        new (): ezvcard.property.StructuredName;
      }
    }
  }

  export module ezvcard.property {
    export interface Timezone extends Java.java.lang.Object {
      // public void ezvcard.property.VCardProperty.addParameter(java.lang.String,java.lang.String)
      addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      addParameter(arg0: string_t, arg1: string_t): void;
      addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public int ezvcard.property.VCardProperty.compareTo(ezvcard.property.VCardProperty)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int ezvcard.property.VCardProperty.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public ezvcard.property.VCardProperty ezvcard.property.Timezone.copy()
      copyA(cb: Callback<object_t>): void;
      copy(): object_t;
      copyP(): Promise<object_t>;
      // public ezvcard.property.Timezone ezvcard.property.Timezone.copy()
      copyA(cb: Callback<Java.Timezone>): void;
      copy(): Java.Timezone;
      copyP(): Promise<Java.Timezone>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public java.lang.String ezvcard.property.Timezone.getAltId()
      getAltIdA(cb: Callback<string>): void;
      getAltId(): string;
      getAltIdP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.VCardProperty.getGroup()
      getGroupA(cb: Callback<string>): void;
      getGroup(): string;
      getGroupP(): Promise<string>;
      // public java.lang.String ezvcard.property.Timezone.getMediaType()
      getMediaTypeA(cb: Callback<string>): void;
      getMediaType(): string;
      getMediaTypeP(): Promise<string>;
      // public ezvcard.util.UtcOffset ezvcard.property.Timezone.getOffset()
      getOffsetA(cb: Callback<object_t>): void;
      getOffset(): object_t;
      getOffsetP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.VCardProperty.getParameter(java.lang.String)
      getParameterA(arg0: string_t, cb: Callback<string>): void;
      getParameter(arg0: string_t): string;
      getParameterP(arg0: string_t): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.VCardProperty.getParameters(java.lang.String)
      getParametersA(arg0: string_t, cb: Callback<object_t>): void;
      getParameters(arg0: string_t): object_t;
      getParametersP(arg0: string_t): Promise<object_t>;
      // public ezvcard.parameter.VCardParameters ezvcard.property.VCardProperty.getParameters()
      getParametersA(cb: Callback<object_t>): void;
      getParameters(): object_t;
      getParametersP(): Promise<object_t>;
      // public java.util.List<ezvcard.parameter.Pid> ezvcard.property.Timezone.getPids()
      getPidsA(cb: Callback<object_t>): void;
      getPids(): object_t;
      getPidsP(): Promise<object_t>;
      // public java.lang.Integer ezvcard.property.Timezone.getPref()
      getPrefA(cb: Callback<object_t>): void;
      getPref(): object_t;
      getPrefP(): Promise<object_t>;
      // public final ezvcard.VCardVersion[] ezvcard.property.VCardProperty.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public java.lang.String ezvcard.property.Timezone.getText()
      getTextA(cb: Callback<string>): void;
      getText(): string;
      getTextP(): Promise<string>;
      // public java.lang.String ezvcard.property.Timezone.getType()
      getTypeA(cb: Callback<string>): void;
      getType(): string;
      getTypeP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final boolean ezvcard.property.VCardProperty.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void ezvcard.property.VCardProperty.removeParameter(java.lang.String)
      removeParameterA(arg0: string_t, cb: Callback<void>): void;
      removeParameter(arg0: string_t): void;
      removeParameterP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Timezone.setAltId(java.lang.String)
      setAltIdA(arg0: string_t, cb: Callback<void>): void;
      setAltId(arg0: string_t): void;
      setAltIdP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setGroup(java.lang.String)
      setGroupA(arg0: string_t, cb: Callback<void>): void;
      setGroup(arg0: string_t): void;
      setGroupP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Timezone.setMediaType(java.lang.String)
      setMediaTypeA(arg0: string_t, cb: Callback<void>): void;
      setMediaType(arg0: string_t): void;
      setMediaTypeP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Timezone.setOffset(ezvcard.util.UtcOffset)
      setOffsetA(arg0: object_t, cb: Callback<void>): void;
      setOffset(arg0: object_t): void;
      setOffsetP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameter(java.lang.String,java.lang.String)
      setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setParameter(arg0: string_t, arg1: string_t): void;
      setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameters(ezvcard.parameter.VCardParameters)
      setParametersA(arg0: object_t, cb: Callback<void>): void;
      setParameters(arg0: object_t): void;
      setParametersP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.Timezone.setPref(java.lang.Integer)
      setPrefA(arg0: object_t, cb: Callback<void>): void;
      setPref(arg0: object_t): void;
      setPrefP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.Timezone.setText(java.lang.String)
      setTextA(arg0: string_t, cb: Callback<void>): void;
      setText(arg0: string_t): void;
      setTextP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.Timezone.setType(java.lang.String)
      setTypeA(arg0: string_t, cb: Callback<void>): void;
      setType(arg0: string_t): void;
      setTypeP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public java.util.TimeZone ezvcard.property.Timezone.toTimeZone()
      toTimeZoneA(cb: Callback<object_t>): void;
      toTimeZone(): object_t;
      toTimeZoneP(): Promise<object_t>;
      // public final java.util.List<ezvcard.ValidationWarning> ezvcard.property.VCardProperty.validate(ezvcard.VCardVersion,ezvcard.VCard)
      validateA(
        arg0: Java.VCardVersion,
        arg1: Java.VCard,
        cb: Callback<object_t>
      ): void;
      validate(arg0: Java.VCardVersion, arg1: Java.VCard): object_t;
      validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Timezone {
      export interface Static {
        class: Java.Object;
        new (arg0: object_t, arg1: string_t): ezvcard.property.Timezone;
        new (arg0: Java.Timezone): ezvcard.property.Timezone;
        new (arg0: object_t): ezvcard.property.Timezone;
        new (arg0: object_t): ezvcard.property.Timezone;
        new (arg0: string_t): ezvcard.property.Timezone;
      }
    }
  }

  export module ezvcard.property {
    export interface Uid extends Java.java.lang.Object {
      // public void ezvcard.property.VCardProperty.addParameter(java.lang.String,java.lang.String)
      addParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      addParameter(arg0: string_t, arg1: string_t): void;
      addParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public int ezvcard.property.VCardProperty.compareTo(ezvcard.property.VCardProperty)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int ezvcard.property.VCardProperty.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public ezvcard.property.VCardProperty ezvcard.property.Uid.copy()
      copyA(cb: Callback<object_t>): void;
      copy(): object_t;
      copyP(): Promise<object_t>;
      // public ezvcard.property.Uid ezvcard.property.Uid.copy()
      copyA(cb: Callback<Java.Uid>): void;
      copy(): Java.Uid;
      copyP(): Promise<Java.Uid>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String ezvcard.property.VCardProperty.getGroup()
      getGroupA(cb: Callback<string>): void;
      getGroup(): string;
      getGroupP(): Promise<string>;
      // public java.lang.String ezvcard.property.VCardProperty.getParameter(java.lang.String)
      getParameterA(arg0: string_t, cb: Callback<string>): void;
      getParameter(arg0: string_t): string;
      getParameterP(arg0: string_t): Promise<string>;
      // public java.util.List<java.lang.String> ezvcard.property.VCardProperty.getParameters(java.lang.String)
      getParametersA(arg0: string_t, cb: Callback<object_t>): void;
      getParameters(arg0: string_t): object_t;
      getParametersP(arg0: string_t): Promise<object_t>;
      // public ezvcard.parameter.VCardParameters ezvcard.property.VCardProperty.getParameters()
      getParametersA(cb: Callback<object_t>): void;
      getParameters(): object_t;
      getParametersP(): Promise<object_t>;
      // public final ezvcard.VCardVersion[] ezvcard.property.VCardProperty.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public T ezvcard.property.SimpleProperty.getValue()
      getValueA(cb: Callback<object_t>): void;
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final boolean ezvcard.property.VCardProperty.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void ezvcard.property.VCardProperty.removeParameter(java.lang.String)
      removeParameterA(arg0: string_t, cb: Callback<void>): void;
      removeParameter(arg0: string_t): void;
      removeParameterP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setGroup(java.lang.String)
      setGroupA(arg0: string_t, cb: Callback<void>): void;
      setGroup(arg0: string_t): void;
      setGroupP(arg0: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameter(java.lang.String,java.lang.String)
      setParameterA(arg0: string_t, arg1: string_t, cb: Callback<void>): void;
      setParameter(arg0: string_t, arg1: string_t): void;
      setParameterP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void ezvcard.property.VCardProperty.setParameters(ezvcard.parameter.VCardParameters)
      setParametersA(arg0: object_t, cb: Callback<void>): void;
      setParameters(arg0: object_t): void;
      setParametersP(arg0: object_t): Promise<void>;
      // public void ezvcard.property.SimpleProperty.setValue(T)
      setValueA(arg0: object_t, cb: Callback<void>): void;
      setValue(arg0: object_t): void;
      setValueP(arg0: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final java.util.List<ezvcard.ValidationWarning> ezvcard.property.VCardProperty.validate(ezvcard.VCardVersion,ezvcard.VCard)
      validateA(
        arg0: Java.VCardVersion,
        arg1: Java.VCard,
        cb: Callback<object_t>
      ): void;
      validate(arg0: Java.VCardVersion, arg1: Java.VCard): object_t;
      validateP(arg0: Java.VCardVersion, arg1: Java.VCard): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Uid {
      export interface Static {
        class: Java.Object;
        new (arg0: Java.Uid): ezvcard.property.Uid;
        new (arg0: string_t): ezvcard.property.Uid;
        // public static ezvcard.property.Uid ezvcard.property.Uid.random()
        randomA(cb: Callback<Java.Uid>): void;
        random(): Java.Uid;
        randomP(): Promise<Java.Uid>;
      }
    }
  }

  export module ezvcard {
    export interface SupportedVersions extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationTypeA(cb: Callback<object_t>): void;
      annotationType(): object_t;
      annotationTypeP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract ezvcard.VCardVersion[] ezvcard.SupportedVersions.value()
      valueA(cb: Callback<Java.VCardVersion[]>): void;
      value(): Java.VCardVersion[];
      valueP(): Promise<Java.VCardVersion[]>;
    }
    export module SupportedVersions {
      export interface Static {
        class: Java.Object;
      }
    }
  }

  export module ezvcard {
    export interface ValidationWarning extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.Integer ezvcard.ValidationWarning.getCode()
      getCodeA(cb: Callback<object_t>): void;
      getCode(): object_t;
      getCodeP(): Promise<object_t>;
      // public java.lang.String ezvcard.ValidationWarning.getMessage()
      getMessageA(cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ValidationWarning {
      export interface Static {
        class: Java.Object;
        new (arg0: object_t, ...arg1: object_t[]): ezvcard.ValidationWarning;
        new (arg0: string_t): ezvcard.ValidationWarning;
      }
    }
  }

  export module ezvcard {
    export interface ValidationWarnings extends Java.java.lang.Object {
      // public void ezvcard.ValidationWarnings.add(ezvcard.property.VCardProperty,ezvcard.ValidationWarning)
      addA(
        arg0: object_t,
        arg1: Java.ValidationWarning,
        cb: Callback<void>
      ): void;
      add(arg0: object_t, arg1: Java.ValidationWarning): void;
      addP(arg0: object_t, arg1: Java.ValidationWarning): Promise<void>;
      // public void ezvcard.ValidationWarnings.add(ezvcard.property.VCardProperty,java.util.List<ezvcard.ValidationWarning>)
      addA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: object_t, arg1: object_t): void;
      addP(arg0: object_t, arg1: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public java.util.List<ezvcard.ValidationWarning> ezvcard.ValidationWarnings.getByProperty(java.lang.Class<? extends ezvcard.property.VCardProperty>)
      getByPropertyA(arg0: object_t, cb: Callback<object_t>): void;
      getByProperty(arg0: object_t): object_t;
      getByPropertyP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public ezvcard.util.ListMultimap<ezvcard.property.VCardProperty, ezvcard.ValidationWarning> ezvcard.ValidationWarnings.getWarnings()
      getWarningsA(cb: Callback<object_t>): void;
      getWarnings(): object_t;
      getWarningsP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public boolean ezvcard.ValidationWarnings.isEmpty()
      isEmptyA(cb: Callback<object_t>): void;
      isEmpty(): object_t;
      isEmptyP(): Promise<object_t>;
      // public java.util.Iterator<java.util.Map$Entry<ezvcard.property.VCardProperty, java.util.List<ezvcard.ValidationWarning>>> ezvcard.ValidationWarnings.iterator()
      iteratorA(cb: Callback<object_t>): void;
      iterator(): object_t;
      iteratorP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliteratorA(cb: Callback<object_t>): void;
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ValidationWarnings {
      export interface Static {
        class: Java.Object;
        new (): ezvcard.ValidationWarnings;
      }
    }
  }

  export module ezvcard {
    export interface VCard extends Java.java.lang.Object {
      // public void ezvcard.VCard.addAddress(ezvcard.property.Address)
      addAddressA(arg0: Java.Address, cb: Callback<void>): void;
      addAddress(arg0: Java.Address): void;
      addAddressP(arg0: Java.Address): Promise<void>;
      // public void ezvcard.VCard.addAddressAlt(ezvcard.property.Address...)
      addAddressAltA(arg0: array_t<Java.Address>, cb: Callback<void>): void;
      addAddressAlt(...arg0: Java.Address[]): void;
      addAddressAlt(arg0: array_t<Java.Address>): void;
      addAddressAltP(...arg0: Java.Address[]): Promise<void>;
      addAddressAltP(arg0: array_t<Java.Address>): Promise<void>;
      // public void ezvcard.VCard.addCalendarRequestUri(ezvcard.property.CalendarRequestUri)
      addCalendarRequestUriA(arg0: object_t, cb: Callback<void>): void;
      addCalendarRequestUri(arg0: object_t): void;
      addCalendarRequestUriP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addCalendarRequestUriAlt(ezvcard.property.CalendarRequestUri...)
      addCalendarRequestUriAltA(arg0: object_array_t, cb: Callback<void>): void;
      addCalendarRequestUriAlt(...arg0: object_t[]): void;
      addCalendarRequestUriAlt(arg0: object_array_t): void;
      addCalendarRequestUriAltP(...arg0: object_t[]): Promise<void>;
      addCalendarRequestUriAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addCalendarUri(ezvcard.property.CalendarUri)
      addCalendarUriA(arg0: object_t, cb: Callback<void>): void;
      addCalendarUri(arg0: object_t): void;
      addCalendarUriP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addCalendarUriAlt(ezvcard.property.CalendarUri...)
      addCalendarUriAltA(arg0: object_array_t, cb: Callback<void>): void;
      addCalendarUriAlt(...arg0: object_t[]): void;
      addCalendarUriAlt(arg0: object_array_t): void;
      addCalendarUriAltP(...arg0: object_t[]): Promise<void>;
      addCalendarUriAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addCategories(ezvcard.property.Categories)
      addCategoriesA(arg0: object_t, cb: Callback<void>): void;
      addCategories(arg0: object_t): void;
      addCategoriesP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addCategoriesAlt(ezvcard.property.Categories...)
      addCategoriesAltA(arg0: object_array_t, cb: Callback<void>): void;
      addCategoriesAlt(...arg0: object_t[]): void;
      addCategoriesAlt(arg0: object_array_t): void;
      addCategoriesAltP(...arg0: object_t[]): Promise<void>;
      addCategoriesAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addClientPidMap(ezvcard.property.ClientPidMap)
      addClientPidMapA(arg0: object_t, cb: Callback<void>): void;
      addClientPidMap(arg0: object_t): void;
      addClientPidMapP(arg0: object_t): Promise<void>;
      // public ezvcard.property.Email ezvcard.VCard.addEmail(java.lang.String,ezvcard.parameter.EmailType...)
      addEmailA(
        arg0: string_t,
        arg1: object_array_t,
        cb: Callback<object_t>
      ): void;
      addEmail(arg0: string_t, ...arg1: object_t[]): object_t;
      addEmail(arg0: string_t, arg1: object_array_t): object_t;
      addEmailP(arg0: string_t, ...arg1: object_t[]): Promise<object_t>;
      addEmailP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
      // public void ezvcard.VCard.addEmail(ezvcard.property.Email)
      addEmailA(arg0: object_t, cb: Callback<void>): void;
      addEmail(arg0: object_t): void;
      addEmailP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addEmailAlt(ezvcard.property.Email...)
      addEmailAltA(arg0: object_array_t, cb: Callback<void>): void;
      addEmailAlt(...arg0: object_t[]): void;
      addEmailAlt(arg0: object_array_t): void;
      addEmailAltP(...arg0: object_t[]): Promise<void>;
      addEmailAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Expertise ezvcard.VCard.addExpertise(java.lang.String)
      addExpertiseA(arg0: string_t, cb: Callback<object_t>): void;
      addExpertise(arg0: string_t): object_t;
      addExpertiseP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addExpertise(ezvcard.property.Expertise)
      addExpertiseA(arg0: object_t, cb: Callback<void>): void;
      addExpertise(arg0: object_t): void;
      addExpertiseP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addExpertiseAlt(ezvcard.property.Expertise...)
      addExpertiseAltA(arg0: object_array_t, cb: Callback<void>): void;
      addExpertiseAlt(...arg0: object_t[]): void;
      addExpertiseAlt(arg0: object_array_t): void;
      addExpertiseAltP(...arg0: object_t[]): Promise<void>;
      addExpertiseAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.RawProperty ezvcard.VCard.addExtendedProperty(java.lang.String,java.lang.String,ezvcard.VCardDataType)
      addExtendedPropertyA(
        arg0: string_t,
        arg1: string_t,
        arg2: Java.VCardDataType,
        cb: Callback<object_t>
      ): void;
      addExtendedProperty(
        arg0: string_t,
        arg1: string_t,
        arg2: Java.VCardDataType
      ): object_t;
      addExtendedPropertyP(
        arg0: string_t,
        arg1: string_t,
        arg2: Java.VCardDataType
      ): Promise<object_t>;
      // public ezvcard.property.RawProperty ezvcard.VCard.addExtendedProperty(java.lang.String,java.lang.String)
      addExtendedPropertyA(
        arg0: string_t,
        arg1: string_t,
        cb: Callback<object_t>
      ): void;
      addExtendedProperty(arg0: string_t, arg1: string_t): object_t;
      addExtendedPropertyP(arg0: string_t, arg1: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addFbUrl(ezvcard.property.FreeBusyUrl)
      addFbUrlA(arg0: object_t, cb: Callback<void>): void;
      addFbUrl(arg0: object_t): void;
      addFbUrlP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addFbUrlAlt(ezvcard.property.FreeBusyUrl...)
      addFbUrlAltA(arg0: object_array_t, cb: Callback<void>): void;
      addFbUrlAlt(...arg0: object_t[]): void;
      addFbUrlAlt(arg0: object_array_t): void;
      addFbUrlAltP(...arg0: object_t[]): Promise<void>;
      addFbUrlAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addFormattedName(ezvcard.property.FormattedName)
      addFormattedNameA(arg0: object_t, cb: Callback<void>): void;
      addFormattedName(arg0: object_t): void;
      addFormattedNameP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addFormattedNameAlt(ezvcard.property.FormattedName...)
      addFormattedNameAltA(arg0: object_array_t, cb: Callback<void>): void;
      addFormattedNameAlt(...arg0: object_t[]): void;
      addFormattedNameAlt(arg0: object_array_t): void;
      addFormattedNameAltP(...arg0: object_t[]): Promise<void>;
      addFormattedNameAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addGeo(ezvcard.property.Geo)
      addGeoA(arg0: object_t, cb: Callback<void>): void;
      addGeo(arg0: object_t): void;
      addGeoP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addGeoAlt(ezvcard.property.Geo...)
      addGeoAltA(arg0: object_array_t, cb: Callback<void>): void;
      addGeoAlt(...arg0: object_t[]): void;
      addGeoAlt(arg0: object_array_t): void;
      addGeoAltP(...arg0: object_t[]): Promise<void>;
      addGeoAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Hobby ezvcard.VCard.addHobby(java.lang.String)
      addHobbyA(arg0: string_t, cb: Callback<object_t>): void;
      addHobby(arg0: string_t): object_t;
      addHobbyP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addHobby(ezvcard.property.Hobby)
      addHobbyA(arg0: object_t, cb: Callback<void>): void;
      addHobby(arg0: object_t): void;
      addHobbyP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addHobbyAlt(ezvcard.property.Hobby...)
      addHobbyAltA(arg0: object_array_t, cb: Callback<void>): void;
      addHobbyAlt(...arg0: object_t[]): void;
      addHobbyAlt(arg0: object_array_t): void;
      addHobbyAltP(...arg0: object_t[]): Promise<void>;
      addHobbyAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addImpp(ezvcard.property.Impp)
      addImppA(arg0: object_t, cb: Callback<void>): void;
      addImpp(arg0: object_t): void;
      addImppP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addImppAlt(ezvcard.property.Impp...)
      addImppAltA(arg0: object_array_t, cb: Callback<void>): void;
      addImppAlt(...arg0: object_t[]): void;
      addImppAlt(arg0: object_array_t): void;
      addImppAltP(...arg0: object_t[]): Promise<void>;
      addImppAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Interest ezvcard.VCard.addInterest(java.lang.String)
      addInterestA(arg0: string_t, cb: Callback<object_t>): void;
      addInterest(arg0: string_t): object_t;
      addInterestP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addInterest(ezvcard.property.Interest)
      addInterestA(arg0: object_t, cb: Callback<void>): void;
      addInterest(arg0: object_t): void;
      addInterestP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addInterestAlt(ezvcard.property.Interest...)
      addInterestAltA(arg0: object_array_t, cb: Callback<void>): void;
      addInterestAlt(...arg0: object_t[]): void;
      addInterestAlt(arg0: object_array_t): void;
      addInterestAltP(...arg0: object_t[]): Promise<void>;
      addInterestAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addKey(ezvcard.property.Key)
      addKeyA(arg0: object_t, cb: Callback<void>): void;
      addKey(arg0: object_t): void;
      addKeyP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addKeyAlt(ezvcard.property.Key...)
      addKeyAltA(arg0: object_array_t, cb: Callback<void>): void;
      addKeyAlt(...arg0: object_t[]): void;
      addKeyAlt(arg0: object_array_t): void;
      addKeyAltP(...arg0: object_t[]): Promise<void>;
      addKeyAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Language ezvcard.VCard.addLanguage(java.lang.String)
      addLanguageA(arg0: string_t, cb: Callback<object_t>): void;
      addLanguage(arg0: string_t): object_t;
      addLanguageP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addLanguage(ezvcard.property.Language)
      addLanguageA(arg0: object_t, cb: Callback<void>): void;
      addLanguage(arg0: object_t): void;
      addLanguageP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addLanguageAlt(ezvcard.property.Language...)
      addLanguageAltA(arg0: object_array_t, cb: Callback<void>): void;
      addLanguageAlt(...arg0: object_t[]): void;
      addLanguageAlt(arg0: object_array_t): void;
      addLanguageAltP(...arg0: object_t[]): Promise<void>;
      addLanguageAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addLogo(ezvcard.property.Logo)
      addLogoA(arg0: object_t, cb: Callback<void>): void;
      addLogo(arg0: object_t): void;
      addLogoP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addLogoAlt(ezvcard.property.Logo...)
      addLogoAltA(arg0: object_array_t, cb: Callback<void>): void;
      addLogoAlt(...arg0: object_t[]): void;
      addLogoAlt(arg0: object_array_t): void;
      addLogoAltP(...arg0: object_t[]): Promise<void>;
      addLogoAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addMember(ezvcard.property.Member)
      addMemberA(arg0: object_t, cb: Callback<void>): void;
      addMember(arg0: object_t): void;
      addMemberP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addMemberAlt(ezvcard.property.Member...)
      addMemberAltA(arg0: object_array_t, cb: Callback<void>): void;
      addMemberAlt(...arg0: object_t[]): void;
      addMemberAlt(arg0: object_array_t): void;
      addMemberAltP(...arg0: object_t[]): Promise<void>;
      addMemberAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addNickname(ezvcard.property.Nickname)
      addNicknameA(arg0: object_t, cb: Callback<void>): void;
      addNickname(arg0: object_t): void;
      addNicknameP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addNicknameAlt(ezvcard.property.Nickname...)
      addNicknameAltA(arg0: object_array_t, cb: Callback<void>): void;
      addNicknameAlt(...arg0: object_t[]): void;
      addNicknameAlt(arg0: object_array_t): void;
      addNicknameAltP(...arg0: object_t[]): Promise<void>;
      addNicknameAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Note ezvcard.VCard.addNote(java.lang.String)
      addNoteA(arg0: string_t, cb: Callback<object_t>): void;
      addNote(arg0: string_t): object_t;
      addNoteP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addNote(ezvcard.property.Note)
      addNoteA(arg0: object_t, cb: Callback<void>): void;
      addNote(arg0: object_t): void;
      addNoteP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addNoteAlt(ezvcard.property.Note...)
      addNoteAltA(arg0: object_array_t, cb: Callback<void>): void;
      addNoteAlt(...arg0: object_t[]): void;
      addNoteAlt(arg0: object_array_t): void;
      addNoteAltP(...arg0: object_t[]): Promise<void>;
      addNoteAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addOrganization(ezvcard.property.Organization)
      addOrganizationA(arg0: object_t, cb: Callback<void>): void;
      addOrganization(arg0: object_t): void;
      addOrganizationP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addOrganizationAlt(ezvcard.property.Organization...)
      addOrganizationAltA(arg0: object_array_t, cb: Callback<void>): void;
      addOrganizationAlt(...arg0: object_t[]): void;
      addOrganizationAlt(arg0: object_array_t): void;
      addOrganizationAltP(...arg0: object_t[]): Promise<void>;
      addOrganizationAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.OrgDirectory ezvcard.VCard.addOrgDirectory(java.lang.String)
      addOrgDirectoryA(arg0: string_t, cb: Callback<object_t>): void;
      addOrgDirectory(arg0: string_t): object_t;
      addOrgDirectoryP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addOrgDirectory(ezvcard.property.OrgDirectory)
      addOrgDirectoryA(arg0: object_t, cb: Callback<void>): void;
      addOrgDirectory(arg0: object_t): void;
      addOrgDirectoryP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addOrgDirectoryAlt(ezvcard.property.OrgDirectory...)
      addOrgDirectoryAltA(arg0: object_array_t, cb: Callback<void>): void;
      addOrgDirectoryAlt(...arg0: object_t[]): void;
      addOrgDirectoryAlt(arg0: object_array_t): void;
      addOrgDirectoryAltP(...arg0: object_t[]): Promise<void>;
      addOrgDirectoryAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addOrphanedLabel(ezvcard.property.Label)
      addOrphanedLabelA(arg0: object_t, cb: Callback<void>): void;
      addOrphanedLabel(arg0: object_t): void;
      addOrphanedLabelP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addPhoto(ezvcard.property.Photo)
      addPhotoA(arg0: Java.Photo, cb: Callback<void>): void;
      addPhoto(arg0: Java.Photo): void;
      addPhotoP(arg0: Java.Photo): Promise<void>;
      // public void ezvcard.VCard.addPhotoAlt(ezvcard.property.Photo...)
      addPhotoAltA(arg0: array_t<Java.Photo>, cb: Callback<void>): void;
      addPhotoAlt(...arg0: Java.Photo[]): void;
      addPhotoAlt(arg0: array_t<Java.Photo>): void;
      addPhotoAltP(...arg0: Java.Photo[]): Promise<void>;
      addPhotoAltP(arg0: array_t<Java.Photo>): Promise<void>;
      // public void ezvcard.VCard.addProperty(ezvcard.property.VCardProperty)
      addPropertyA(arg0: object_t, cb: Callback<void>): void;
      addProperty(arg0: object_t): void;
      addPropertyP(arg0: object_t): Promise<void>;
      // public <T extends ezvcard.property.VCardProperty & ezvcard.property.HasAltId> void ezvcard.VCard.addPropertyAlt(java.lang.Class<T>,T...)
      addPropertyAltA(
        arg0: object_t,
        arg1: object_array_t,
        cb: Callback<void>
      ): void;
      addPropertyAlt(arg0: object_t, ...arg1: object_t[]): void;
      addPropertyAlt(arg0: object_t, arg1: object_array_t): void;
      addPropertyAltP(arg0: object_t, ...arg1: object_t[]): Promise<void>;
      addPropertyAltP(arg0: object_t, arg1: object_array_t): Promise<void>;
      // public <T extends ezvcard.property.VCardProperty & ezvcard.property.HasAltId> void ezvcard.VCard.addPropertyAlt(java.lang.Class<T>,java.util.Collection<T>)
      addPropertyAltA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      addPropertyAlt(arg0: object_t, arg1: object_t): void;
      addPropertyAltP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void ezvcard.VCard.addRelated(ezvcard.property.Related)
      addRelatedA(arg0: object_t, cb: Callback<void>): void;
      addRelated(arg0: object_t): void;
      addRelatedP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addRelatedAlt(ezvcard.property.Related...)
      addRelatedAltA(arg0: object_array_t, cb: Callback<void>): void;
      addRelatedAlt(...arg0: object_t[]): void;
      addRelatedAlt(arg0: object_array_t): void;
      addRelatedAltP(...arg0: object_t[]): Promise<void>;
      addRelatedAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Role ezvcard.VCard.addRole(java.lang.String)
      addRoleA(arg0: string_t, cb: Callback<object_t>): void;
      addRole(arg0: string_t): object_t;
      addRoleP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addRole(ezvcard.property.Role)
      addRoleA(arg0: object_t, cb: Callback<void>): void;
      addRole(arg0: object_t): void;
      addRoleP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addRoleAlt(ezvcard.property.Role...)
      addRoleAltA(arg0: object_array_t, cb: Callback<void>): void;
      addRoleAlt(...arg0: object_t[]): void;
      addRoleAlt(arg0: object_array_t): void;
      addRoleAltP(...arg0: object_t[]): Promise<void>;
      addRoleAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addSound(ezvcard.property.Sound)
      addSoundA(arg0: object_t, cb: Callback<void>): void;
      addSound(arg0: object_t): void;
      addSoundP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addSoundAlt(ezvcard.property.Sound...)
      addSoundAltA(arg0: object_array_t, cb: Callback<void>): void;
      addSoundAlt(...arg0: object_t[]): void;
      addSoundAlt(arg0: object_array_t): void;
      addSoundAltP(...arg0: object_t[]): Promise<void>;
      addSoundAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Source ezvcard.VCard.addSource(java.lang.String)
      addSourceA(arg0: string_t, cb: Callback<object_t>): void;
      addSource(arg0: string_t): object_t;
      addSourceP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addSource(ezvcard.property.Source)
      addSourceA(arg0: object_t, cb: Callback<void>): void;
      addSource(arg0: object_t): void;
      addSourceP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addSourceAlt(ezvcard.property.Source...)
      addSourceAltA(arg0: object_array_t, cb: Callback<void>): void;
      addSourceAlt(...arg0: object_t[]): void;
      addSourceAlt(arg0: object_array_t): void;
      addSourceAltP(...arg0: object_t[]): Promise<void>;
      addSourceAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Telephone ezvcard.VCard.addTelephoneNumber(java.lang.String,ezvcard.parameter.TelephoneType...)
      addTelephoneNumberA(
        arg0: string_t,
        arg1: array_t<Java.TelephoneType>,
        cb: Callback<object_t>
      ): void;
      addTelephoneNumber(
        arg0: string_t,
        ...arg1: Java.TelephoneType[]
      ): object_t;
      addTelephoneNumber(
        arg0: string_t,
        arg1: array_t<Java.TelephoneType>
      ): object_t;
      addTelephoneNumberP(
        arg0: string_t,
        ...arg1: Java.TelephoneType[]
      ): Promise<object_t>;
      addTelephoneNumberP(
        arg0: string_t,
        arg1: array_t<Java.TelephoneType>
      ): Promise<object_t>;
      // public void ezvcard.VCard.addTelephoneNumber(ezvcard.property.Telephone)
      addTelephoneNumberA(arg0: object_t, cb: Callback<void>): void;
      addTelephoneNumber(arg0: object_t): void;
      addTelephoneNumberP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addTelephoneNumberAlt(ezvcard.property.Telephone...)
      addTelephoneNumberAltA(arg0: object_array_t, cb: Callback<void>): void;
      addTelephoneNumberAlt(...arg0: object_t[]): void;
      addTelephoneNumberAlt(arg0: object_array_t): void;
      addTelephoneNumberAltP(...arg0: object_t[]): Promise<void>;
      addTelephoneNumberAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addTimezone(ezvcard.property.Timezone)
      addTimezoneA(arg0: Java.Timezone, cb: Callback<void>): void;
      addTimezone(arg0: Java.Timezone): void;
      addTimezoneP(arg0: Java.Timezone): Promise<void>;
      // public void ezvcard.VCard.addTimezoneAlt(ezvcard.property.Timezone...)
      addTimezoneAltA(arg0: array_t<Java.Timezone>, cb: Callback<void>): void;
      addTimezoneAlt(...arg0: Java.Timezone[]): void;
      addTimezoneAlt(arg0: array_t<Java.Timezone>): void;
      addTimezoneAltP(...arg0: Java.Timezone[]): Promise<void>;
      addTimezoneAltP(arg0: array_t<Java.Timezone>): Promise<void>;
      // public ezvcard.property.Title ezvcard.VCard.addTitle(java.lang.String)
      addTitleA(arg0: string_t, cb: Callback<object_t>): void;
      addTitle(arg0: string_t): object_t;
      addTitleP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addTitle(ezvcard.property.Title)
      addTitleA(arg0: object_t, cb: Callback<void>): void;
      addTitle(arg0: object_t): void;
      addTitleP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addTitleAlt(ezvcard.property.Title...)
      addTitleAltA(arg0: object_array_t, cb: Callback<void>): void;
      addTitleAlt(...arg0: object_t[]): void;
      addTitleAlt(arg0: object_array_t): void;
      addTitleAltP(...arg0: object_t[]): Promise<void>;
      addTitleAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Url ezvcard.VCard.addUrl(java.lang.String)
      addUrlA(arg0: string_t, cb: Callback<object_t>): void;
      addUrl(arg0: string_t): object_t;
      addUrlP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.addUrl(ezvcard.property.Url)
      addUrlA(arg0: object_t, cb: Callback<void>): void;
      addUrl(arg0: object_t): void;
      addUrlP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addUrlAlt(ezvcard.property.Url...)
      addUrlAltA(arg0: object_array_t, cb: Callback<void>): void;
      addUrlAlt(...arg0: object_t[]): void;
      addUrlAlt(arg0: object_array_t): void;
      addUrlAltP(...arg0: object_t[]): Promise<void>;
      addUrlAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.addXml(ezvcard.property.Xml)
      addXmlA(arg0: object_t, cb: Callback<void>): void;
      addXml(arg0: object_t): void;
      addXmlP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.addXmlAlt(ezvcard.property.Xml...)
      addXmlAltA(arg0: object_array_t, cb: Callback<void>): void;
      addXmlAlt(...arg0: object_t[]): void;
      addXmlAlt(arg0: object_array_t): void;
      addXmlAltP(...arg0: object_t[]): Promise<void>;
      addXmlAltP(arg0: object_array_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public java.util.List<ezvcard.property.Address> ezvcard.VCard.getAddresses()
      getAddressesA(cb: Callback<object_t>): void;
      getAddresses(): object_t;
      getAddressesP(): Promise<object_t>;
      // public ezvcard.property.Agent ezvcard.VCard.getAgent()
      getAgentA(cb: Callback<object_t>): void;
      getAgent(): object_t;
      getAgentP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Anniversary> ezvcard.VCard.getAnniversaries()
      getAnniversariesA(cb: Callback<object_t>): void;
      getAnniversaries(): object_t;
      getAnniversariesP(): Promise<object_t>;
      // public ezvcard.property.Anniversary ezvcard.VCard.getAnniversary()
      getAnniversaryA(cb: Callback<object_t>): void;
      getAnniversary(): object_t;
      getAnniversaryP(): Promise<object_t>;
      // public ezvcard.property.Birthday ezvcard.VCard.getBirthday()
      getBirthdayA(cb: Callback<Java.Birthday>): void;
      getBirthday(): Java.Birthday;
      getBirthdayP(): Promise<Java.Birthday>;
      // public java.util.List<ezvcard.property.Birthday> ezvcard.VCard.getBirthdays()
      getBirthdaysA(cb: Callback<object_t>): void;
      getBirthdays(): object_t;
      getBirthdaysP(): Promise<object_t>;
      // public ezvcard.property.Birthplace ezvcard.VCard.getBirthplace()
      getBirthplaceA(cb: Callback<object_t>): void;
      getBirthplace(): object_t;
      getBirthplaceP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Birthplace> ezvcard.VCard.getBirthplaces()
      getBirthplacesA(cb: Callback<object_t>): void;
      getBirthplaces(): object_t;
      getBirthplacesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.CalendarRequestUri> ezvcard.VCard.getCalendarRequestUris()
      getCalendarRequestUrisA(cb: Callback<object_t>): void;
      getCalendarRequestUris(): object_t;
      getCalendarRequestUrisP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.CalendarUri> ezvcard.VCard.getCalendarUris()
      getCalendarUrisA(cb: Callback<object_t>): void;
      getCalendarUris(): object_t;
      getCalendarUrisP(): Promise<object_t>;
      // public ezvcard.property.Categories ezvcard.VCard.getCategories()
      getCategoriesA(cb: Callback<object_t>): void;
      getCategories(): object_t;
      getCategoriesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Categories> ezvcard.VCard.getCategoriesList()
      getCategoriesListA(cb: Callback<object_t>): void;
      getCategoriesList(): object_t;
      getCategoriesListP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public ezvcard.property.Classification ezvcard.VCard.getClassification()
      getClassificationA(cb: Callback<object_t>): void;
      getClassification(): object_t;
      getClassificationP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.ClientPidMap> ezvcard.VCard.getClientPidMaps()
      getClientPidMapsA(cb: Callback<object_t>): void;
      getClientPidMaps(): object_t;
      getClientPidMapsP(): Promise<object_t>;
      // public ezvcard.property.Deathdate ezvcard.VCard.getDeathdate()
      getDeathdateA(cb: Callback<object_t>): void;
      getDeathdate(): object_t;
      getDeathdateP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Deathdate> ezvcard.VCard.getDeathdates()
      getDeathdatesA(cb: Callback<object_t>): void;
      getDeathdates(): object_t;
      getDeathdatesP(): Promise<object_t>;
      // public ezvcard.property.Deathplace ezvcard.VCard.getDeathplace()
      getDeathplaceA(cb: Callback<object_t>): void;
      getDeathplace(): object_t;
      getDeathplaceP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Deathplace> ezvcard.VCard.getDeathplaces()
      getDeathplacesA(cb: Callback<object_t>): void;
      getDeathplaces(): object_t;
      getDeathplacesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Email> ezvcard.VCard.getEmails()
      getEmailsA(cb: Callback<object_t>): void;
      getEmails(): object_t;
      getEmailsP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Expertise> ezvcard.VCard.getExpertise()
      getExpertiseA(cb: Callback<object_t>): void;
      getExpertise(): object_t;
      getExpertiseP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.RawProperty> ezvcard.VCard.getExtendedProperties(java.lang.String)
      getExtendedPropertiesA(arg0: string_t, cb: Callback<object_t>): void;
      getExtendedProperties(arg0: string_t): object_t;
      getExtendedPropertiesP(arg0: string_t): Promise<object_t>;
      // public java.util.List<ezvcard.property.RawProperty> ezvcard.VCard.getExtendedProperties()
      getExtendedPropertiesA(cb: Callback<object_t>): void;
      getExtendedProperties(): object_t;
      getExtendedPropertiesP(): Promise<object_t>;
      // public ezvcard.property.RawProperty ezvcard.VCard.getExtendedProperty(java.lang.String)
      getExtendedPropertyA(arg0: string_t, cb: Callback<object_t>): void;
      getExtendedProperty(arg0: string_t): object_t;
      getExtendedPropertyP(arg0: string_t): Promise<object_t>;
      // public java.util.List<ezvcard.property.FreeBusyUrl> ezvcard.VCard.getFbUrls()
      getFbUrlsA(cb: Callback<object_t>): void;
      getFbUrls(): object_t;
      getFbUrlsP(): Promise<object_t>;
      // public ezvcard.property.FormattedName ezvcard.VCard.getFormattedName()
      getFormattedNameA(cb: Callback<object_t>): void;
      getFormattedName(): object_t;
      getFormattedNameP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.FormattedName> ezvcard.VCard.getFormattedNames()
      getFormattedNamesA(cb: Callback<object_t>): void;
      getFormattedNames(): object_t;
      getFormattedNamesP(): Promise<object_t>;
      // public ezvcard.property.Gender ezvcard.VCard.getGender()
      getGenderA(cb: Callback<object_t>): void;
      getGender(): object_t;
      getGenderP(): Promise<object_t>;
      // public ezvcard.property.Geo ezvcard.VCard.getGeo()
      getGeoA(cb: Callback<object_t>): void;
      getGeo(): object_t;
      getGeoP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Geo> ezvcard.VCard.getGeos()
      getGeosA(cb: Callback<object_t>): void;
      getGeos(): object_t;
      getGeosP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Hobby> ezvcard.VCard.getHobbies()
      getHobbiesA(cb: Callback<object_t>): void;
      getHobbies(): object_t;
      getHobbiesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Impp> ezvcard.VCard.getImpps()
      getImppsA(cb: Callback<object_t>): void;
      getImpps(): object_t;
      getImppsP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Interest> ezvcard.VCard.getInterests()
      getInterestsA(cb: Callback<object_t>): void;
      getInterests(): object_t;
      getInterestsP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Key> ezvcard.VCard.getKeys()
      getKeysA(cb: Callback<object_t>): void;
      getKeys(): object_t;
      getKeysP(): Promise<object_t>;
      // public ezvcard.property.Kind ezvcard.VCard.getKind()
      getKindA(cb: Callback<object_t>): void;
      getKind(): object_t;
      getKindP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Language> ezvcard.VCard.getLanguages()
      getLanguagesA(cb: Callback<object_t>): void;
      getLanguages(): object_t;
      getLanguagesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Logo> ezvcard.VCard.getLogos()
      getLogosA(cb: Callback<object_t>): void;
      getLogos(): object_t;
      getLogosP(): Promise<object_t>;
      // public ezvcard.property.Mailer ezvcard.VCard.getMailer()
      getMailerA(cb: Callback<object_t>): void;
      getMailer(): object_t;
      getMailerP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Member> ezvcard.VCard.getMembers()
      getMembersA(cb: Callback<object_t>): void;
      getMembers(): object_t;
      getMembersP(): Promise<object_t>;
      // public ezvcard.property.Nickname ezvcard.VCard.getNickname()
      getNicknameA(cb: Callback<object_t>): void;
      getNickname(): object_t;
      getNicknameP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Nickname> ezvcard.VCard.getNicknames()
      getNicknamesA(cb: Callback<object_t>): void;
      getNicknames(): object_t;
      getNicknamesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Note> ezvcard.VCard.getNotes()
      getNotesA(cb: Callback<object_t>): void;
      getNotes(): object_t;
      getNotesP(): Promise<object_t>;
      // public ezvcard.property.Organization ezvcard.VCard.getOrganization()
      getOrganizationA(cb: Callback<object_t>): void;
      getOrganization(): object_t;
      getOrganizationP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Organization> ezvcard.VCard.getOrganizations()
      getOrganizationsA(cb: Callback<object_t>): void;
      getOrganizations(): object_t;
      getOrganizationsP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.OrgDirectory> ezvcard.VCard.getOrgDirectories()
      getOrgDirectoriesA(cb: Callback<object_t>): void;
      getOrgDirectories(): object_t;
      getOrgDirectoriesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Label> ezvcard.VCard.getOrphanedLabels()
      getOrphanedLabelsA(cb: Callback<object_t>): void;
      getOrphanedLabels(): object_t;
      getOrphanedLabelsP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Photo> ezvcard.VCard.getPhotos()
      getPhotosA(cb: Callback<object_t>): void;
      getPhotos(): object_t;
      getPhotosP(): Promise<object_t>;
      // public ezvcard.property.ProductId ezvcard.VCard.getProductId()
      getProductIdA(cb: Callback<object_t>): void;
      getProductId(): object_t;
      getProductIdP(): Promise<object_t>;
      // public ezvcard.property.Profile ezvcard.VCard.getProfile()
      getProfileA(cb: Callback<object_t>): void;
      getProfile(): object_t;
      getProfileP(): Promise<object_t>;
      // public <T extends ezvcard.property.VCardProperty> java.util.List<T> ezvcard.VCard.getProperties(java.lang.Class<T>)
      getPropertiesA(arg0: object_t, cb: Callback<object_t>): void;
      getProperties(arg0: object_t): object_t;
      getPropertiesP(arg0: object_t): Promise<object_t>;
      // public java.util.Collection<ezvcard.property.VCardProperty> ezvcard.VCard.getProperties()
      getPropertiesA(cb: Callback<object_t>): void;
      getProperties(): object_t;
      getPropertiesP(): Promise<object_t>;
      // public <T extends ezvcard.property.VCardProperty & ezvcard.property.HasAltId> java.util.List<java.util.List<T>> ezvcard.VCard.getPropertiesAlt(java.lang.Class<T>)
      getPropertiesAltA(arg0: object_t, cb: Callback<object_t>): void;
      getPropertiesAlt(arg0: object_t): object_t;
      getPropertiesAltP(arg0: object_t): Promise<object_t>;
      // public <T extends ezvcard.property.VCardProperty> T ezvcard.VCard.getProperty(java.lang.Class<T>)
      getPropertyA(arg0: object_t, cb: Callback<object_t>): void;
      getProperty(arg0: object_t): object_t;
      getPropertyP(arg0: object_t): Promise<object_t>;
      // public java.util.List<ezvcard.property.Related> ezvcard.VCard.getRelations()
      getRelationsA(cb: Callback<object_t>): void;
      getRelations(): object_t;
      getRelationsP(): Promise<object_t>;
      // public ezvcard.property.Revision ezvcard.VCard.getRevision()
      getRevisionA(cb: Callback<Java.Revision>): void;
      getRevision(): Java.Revision;
      getRevisionP(): Promise<Java.Revision>;
      // public java.util.List<ezvcard.property.Role> ezvcard.VCard.getRoles()
      getRolesA(cb: Callback<object_t>): void;
      getRoles(): object_t;
      getRolesP(): Promise<object_t>;
      // public ezvcard.property.SortString ezvcard.VCard.getSortString()
      getSortStringA(cb: Callback<object_t>): void;
      getSortString(): object_t;
      getSortStringP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Sound> ezvcard.VCard.getSounds()
      getSoundsA(cb: Callback<object_t>): void;
      getSounds(): object_t;
      getSoundsP(): Promise<object_t>;
      // public ezvcard.property.SourceDisplayText ezvcard.VCard.getSourceDisplayText()
      getSourceDisplayTextA(cb: Callback<object_t>): void;
      getSourceDisplayText(): object_t;
      getSourceDisplayTextP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Source> ezvcard.VCard.getSources()
      getSourcesA(cb: Callback<object_t>): void;
      getSources(): object_t;
      getSourcesP(): Promise<object_t>;
      // public ezvcard.property.StructuredName ezvcard.VCard.getStructuredName()
      getStructuredNameA(cb: Callback<Java.StructuredName>): void;
      getStructuredName(): Java.StructuredName;
      getStructuredNameP(): Promise<Java.StructuredName>;
      // public java.util.List<ezvcard.property.StructuredName> ezvcard.VCard.getStructuredNames()
      getStructuredNamesA(cb: Callback<object_t>): void;
      getStructuredNames(): object_t;
      getStructuredNamesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Telephone> ezvcard.VCard.getTelephoneNumbers()
      getTelephoneNumbersA(cb: Callback<object_t>): void;
      getTelephoneNumbers(): object_t;
      getTelephoneNumbersP(): Promise<object_t>;
      // public ezvcard.property.Timezone ezvcard.VCard.getTimezone()
      getTimezoneA(cb: Callback<Java.Timezone>): void;
      getTimezone(): Java.Timezone;
      getTimezoneP(): Promise<Java.Timezone>;
      // public java.util.List<ezvcard.property.Timezone> ezvcard.VCard.getTimezones()
      getTimezonesA(cb: Callback<object_t>): void;
      getTimezones(): object_t;
      getTimezonesP(): Promise<object_t>;
      // public java.util.List<ezvcard.property.Title> ezvcard.VCard.getTitles()
      getTitlesA(cb: Callback<object_t>): void;
      getTitles(): object_t;
      getTitlesP(): Promise<object_t>;
      // public ezvcard.property.Uid ezvcard.VCard.getUid()
      getUidA(cb: Callback<Java.Uid>): void;
      getUid(): Java.Uid;
      getUidP(): Promise<Java.Uid>;
      // public java.util.List<ezvcard.property.Url> ezvcard.VCard.getUrls()
      getUrlsA(cb: Callback<object_t>): void;
      getUrls(): object_t;
      getUrlsP(): Promise<object_t>;
      // public ezvcard.VCardVersion ezvcard.VCard.getVersion()
      getVersionA(cb: Callback<Java.VCardVersion>): void;
      getVersion(): Java.VCardVersion;
      getVersionP(): Promise<Java.VCardVersion>;
      // public java.util.List<ezvcard.property.Xml> ezvcard.VCard.getXmls()
      getXmlsA(cb: Callback<object_t>): void;
      getXmls(): object_t;
      getXmlsP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public java.util.Iterator<ezvcard.property.VCardProperty> ezvcard.VCard.iterator()
      iteratorA(cb: Callback<object_t>): void;
      iterator(): object_t;
      iteratorP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.List<ezvcard.property.RawProperty> ezvcard.VCard.removeExtendedProperty(java.lang.String)
      removeExtendedPropertyA(arg0: string_t, cb: Callback<object_t>): void;
      removeExtendedProperty(arg0: string_t): object_t;
      removeExtendedPropertyP(arg0: string_t): Promise<object_t>;
      // public <T extends ezvcard.property.VCardProperty> java.util.List<T> ezvcard.VCard.removeProperties(java.lang.Class<T>)
      removePropertiesA(arg0: object_t, cb: Callback<object_t>): void;
      removeProperties(arg0: object_t): object_t;
      removePropertiesP(arg0: object_t): Promise<object_t>;
      // public boolean ezvcard.VCard.removeProperty(ezvcard.property.VCardProperty)
      removePropertyA(arg0: object_t, cb: Callback<object_t>): void;
      removeProperty(arg0: object_t): object_t;
      removePropertyP(arg0: object_t): Promise<object_t>;
      // public void ezvcard.VCard.setAgent(ezvcard.property.Agent)
      setAgentA(arg0: object_t, cb: Callback<void>): void;
      setAgent(arg0: object_t): void;
      setAgentP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setAnniversary(ezvcard.property.Anniversary)
      setAnniversaryA(arg0: object_t, cb: Callback<void>): void;
      setAnniversary(arg0: object_t): void;
      setAnniversaryP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setAnniversaryAlt(ezvcard.property.Anniversary...)
      setAnniversaryAltA(arg0: object_array_t, cb: Callback<void>): void;
      setAnniversaryAlt(...arg0: object_t[]): void;
      setAnniversaryAlt(arg0: object_array_t): void;
      setAnniversaryAltP(...arg0: object_t[]): Promise<void>;
      setAnniversaryAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.setBirthday(ezvcard.property.Birthday)
      setBirthdayA(arg0: Java.Birthday, cb: Callback<void>): void;
      setBirthday(arg0: Java.Birthday): void;
      setBirthdayP(arg0: Java.Birthday): Promise<void>;
      // public void ezvcard.VCard.setBirthdayAlt(ezvcard.property.Birthday...)
      setBirthdayAltA(arg0: array_t<Java.Birthday>, cb: Callback<void>): void;
      setBirthdayAlt(...arg0: Java.Birthday[]): void;
      setBirthdayAlt(arg0: array_t<Java.Birthday>): void;
      setBirthdayAltP(...arg0: Java.Birthday[]): Promise<void>;
      setBirthdayAltP(arg0: array_t<Java.Birthday>): Promise<void>;
      // public void ezvcard.VCard.setBirthplace(ezvcard.property.Birthplace)
      setBirthplaceA(arg0: object_t, cb: Callback<void>): void;
      setBirthplace(arg0: object_t): void;
      setBirthplaceP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setBirthplaceAlt(ezvcard.property.Birthplace...)
      setBirthplaceAltA(arg0: object_array_t, cb: Callback<void>): void;
      setBirthplaceAlt(...arg0: object_t[]): void;
      setBirthplaceAlt(arg0: object_array_t): void;
      setBirthplaceAltP(...arg0: object_t[]): Promise<void>;
      setBirthplaceAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Categories ezvcard.VCard.setCategories(java.lang.String...)
      setCategoriesA(arg0: array_t<string_t>, cb: Callback<object_t>): void;
      setCategories(...arg0: string_t[]): object_t;
      setCategories(arg0: array_t<string_t>): object_t;
      setCategoriesP(...arg0: string_t[]): Promise<object_t>;
      setCategoriesP(arg0: array_t<string_t>): Promise<object_t>;
      // public void ezvcard.VCard.setCategories(ezvcard.property.Categories)
      setCategoriesA(arg0: object_t, cb: Callback<void>): void;
      setCategories(arg0: object_t): void;
      setCategoriesP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setCategoriesAlt(ezvcard.property.Categories...)
      setCategoriesAltA(arg0: object_array_t, cb: Callback<void>): void;
      setCategoriesAlt(...arg0: object_t[]): void;
      setCategoriesAlt(arg0: object_array_t): void;
      setCategoriesAltP(...arg0: object_t[]): Promise<void>;
      setCategoriesAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Classification ezvcard.VCard.setClassification(java.lang.String)
      setClassificationA(arg0: string_t, cb: Callback<object_t>): void;
      setClassification(arg0: string_t): object_t;
      setClassificationP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.setClassification(ezvcard.property.Classification)
      setClassificationA(arg0: object_t, cb: Callback<void>): void;
      setClassification(arg0: object_t): void;
      setClassificationP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setDeathdate(ezvcard.property.Deathdate)
      setDeathdateA(arg0: object_t, cb: Callback<void>): void;
      setDeathdate(arg0: object_t): void;
      setDeathdateP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setDeathdateAlt(ezvcard.property.Deathdate...)
      setDeathdateAltA(arg0: object_array_t, cb: Callback<void>): void;
      setDeathdateAlt(...arg0: object_t[]): void;
      setDeathdateAlt(arg0: object_array_t): void;
      setDeathdateAltP(...arg0: object_t[]): Promise<void>;
      setDeathdateAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.setDeathplace(ezvcard.property.Deathplace)
      setDeathplaceA(arg0: object_t, cb: Callback<void>): void;
      setDeathplace(arg0: object_t): void;
      setDeathplaceP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setDeathplaceAlt(ezvcard.property.Deathplace...)
      setDeathplaceAltA(arg0: object_array_t, cb: Callback<void>): void;
      setDeathplaceAlt(...arg0: object_t[]): void;
      setDeathplaceAlt(arg0: object_array_t): void;
      setDeathplaceAltP(...arg0: object_t[]): Promise<void>;
      setDeathplaceAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.RawProperty ezvcard.VCard.setExtendedProperty(java.lang.String,java.lang.String,ezvcard.VCardDataType)
      setExtendedPropertyA(
        arg0: string_t,
        arg1: string_t,
        arg2: Java.VCardDataType,
        cb: Callback<object_t>
      ): void;
      setExtendedProperty(
        arg0: string_t,
        arg1: string_t,
        arg2: Java.VCardDataType
      ): object_t;
      setExtendedPropertyP(
        arg0: string_t,
        arg1: string_t,
        arg2: Java.VCardDataType
      ): Promise<object_t>;
      // public ezvcard.property.RawProperty ezvcard.VCard.setExtendedProperty(java.lang.String,java.lang.String)
      setExtendedPropertyA(
        arg0: string_t,
        arg1: string_t,
        cb: Callback<object_t>
      ): void;
      setExtendedProperty(arg0: string_t, arg1: string_t): object_t;
      setExtendedPropertyP(arg0: string_t, arg1: string_t): Promise<object_t>;
      // public ezvcard.property.FormattedName ezvcard.VCard.setFormattedName(java.lang.String)
      setFormattedNameA(arg0: string_t, cb: Callback<object_t>): void;
      setFormattedName(arg0: string_t): object_t;
      setFormattedNameP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.setFormattedName(ezvcard.property.FormattedName)
      setFormattedNameA(arg0: object_t, cb: Callback<void>): void;
      setFormattedName(arg0: object_t): void;
      setFormattedNameP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setFormattedNameAlt(ezvcard.property.FormattedName...)
      setFormattedNameAltA(arg0: object_array_t, cb: Callback<void>): void;
      setFormattedNameAlt(...arg0: object_t[]): void;
      setFormattedNameAlt(arg0: object_array_t): void;
      setFormattedNameAltP(...arg0: object_t[]): Promise<void>;
      setFormattedNameAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.setGender(ezvcard.property.Gender)
      setGenderA(arg0: object_t, cb: Callback<void>): void;
      setGender(arg0: object_t): void;
      setGenderP(arg0: object_t): Promise<void>;
      // public ezvcard.property.Geo ezvcard.VCard.setGeo(double,double)
      setGeoA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      setGeo(arg0: object_t, arg1: object_t): object_t;
      setGeoP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public void ezvcard.VCard.setGeo(ezvcard.property.Geo)
      setGeoA(arg0: object_t, cb: Callback<void>): void;
      setGeo(arg0: object_t): void;
      setGeoP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setGeoAlt(ezvcard.property.Geo...)
      setGeoAltA(arg0: object_array_t, cb: Callback<void>): void;
      setGeoAlt(...arg0: object_t[]): void;
      setGeoAlt(arg0: object_array_t): void;
      setGeoAltP(...arg0: object_t[]): Promise<void>;
      setGeoAltP(arg0: object_array_t): Promise<void>;
      // public void ezvcard.VCard.setKind(ezvcard.property.Kind)
      setKindA(arg0: object_t, cb: Callback<void>): void;
      setKind(arg0: object_t): void;
      setKindP(arg0: object_t): Promise<void>;
      // public ezvcard.property.Mailer ezvcard.VCard.setMailer(java.lang.String)
      setMailerA(arg0: string_t, cb: Callback<object_t>): void;
      setMailer(arg0: string_t): object_t;
      setMailerP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.setMailer(ezvcard.property.Mailer)
      setMailerA(arg0: object_t, cb: Callback<void>): void;
      setMailer(arg0: object_t): void;
      setMailerP(arg0: object_t): Promise<void>;
      // public ezvcard.property.Nickname ezvcard.VCard.setNickname(java.lang.String...)
      setNicknameA(arg0: array_t<string_t>, cb: Callback<object_t>): void;
      setNickname(...arg0: string_t[]): object_t;
      setNickname(arg0: array_t<string_t>): object_t;
      setNicknameP(...arg0: string_t[]): Promise<object_t>;
      setNicknameP(arg0: array_t<string_t>): Promise<object_t>;
      // public void ezvcard.VCard.setNickname(ezvcard.property.Nickname)
      setNicknameA(arg0: object_t, cb: Callback<void>): void;
      setNickname(arg0: object_t): void;
      setNicknameP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setNicknameAlt(ezvcard.property.Nickname...)
      setNicknameAltA(arg0: object_array_t, cb: Callback<void>): void;
      setNicknameAlt(...arg0: object_t[]): void;
      setNicknameAlt(arg0: object_array_t): void;
      setNicknameAltP(...arg0: object_t[]): Promise<void>;
      setNicknameAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.Organization ezvcard.VCard.setOrganization(java.lang.String...)
      setOrganizationA(arg0: array_t<string_t>, cb: Callback<object_t>): void;
      setOrganization(...arg0: string_t[]): object_t;
      setOrganization(arg0: array_t<string_t>): object_t;
      setOrganizationP(...arg0: string_t[]): Promise<object_t>;
      setOrganizationP(arg0: array_t<string_t>): Promise<object_t>;
      // public void ezvcard.VCard.setOrganization(ezvcard.property.Organization)
      setOrganizationA(arg0: object_t, cb: Callback<void>): void;
      setOrganization(arg0: object_t): void;
      setOrganizationP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setOrganizationAlt(ezvcard.property.Organization...)
      setOrganizationAltA(arg0: object_array_t, cb: Callback<void>): void;
      setOrganizationAlt(...arg0: object_t[]): void;
      setOrganizationAlt(arg0: object_array_t): void;
      setOrganizationAltP(...arg0: object_t[]): Promise<void>;
      setOrganizationAltP(arg0: object_array_t): Promise<void>;
      // public ezvcard.property.ProductId ezvcard.VCard.setProductId(java.lang.String)
      setProductIdA(arg0: string_t, cb: Callback<object_t>): void;
      setProductId(arg0: string_t): object_t;
      setProductIdP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.setProductId(ezvcard.property.ProductId)
      setProductIdA(arg0: object_t, cb: Callback<void>): void;
      setProductId(arg0: object_t): void;
      setProductIdP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setProfile(ezvcard.property.Profile)
      setProfileA(arg0: object_t, cb: Callback<void>): void;
      setProfile(arg0: object_t): void;
      setProfileP(arg0: object_t): Promise<void>;
      // public <T extends ezvcard.property.VCardProperty> java.util.List<T> ezvcard.VCard.setProperty(java.lang.Class<T>,T)
      setPropertyA(
        arg0: object_t,
        arg1: object_t,
        cb: Callback<object_t>
      ): void;
      setProperty(arg0: object_t, arg1: object_t): object_t;
      setPropertyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.util.List<ezvcard.property.VCardProperty> ezvcard.VCard.setProperty(ezvcard.property.VCardProperty)
      setPropertyA(arg0: object_t, cb: Callback<object_t>): void;
      setProperty(arg0: object_t): object_t;
      setPropertyP(arg0: object_t): Promise<object_t>;
      // public <T extends ezvcard.property.VCardProperty & ezvcard.property.HasAltId> java.util.List<T> ezvcard.VCard.setPropertyAlt(java.lang.Class<T>,T...)
      setPropertyAltA(
        arg0: object_t,
        arg1: object_array_t,
        cb: Callback<object_t>
      ): void;
      setPropertyAlt(arg0: object_t, ...arg1: object_t[]): object_t;
      setPropertyAlt(arg0: object_t, arg1: object_array_t): object_t;
      setPropertyAltP(arg0: object_t, ...arg1: object_t[]): Promise<object_t>;
      setPropertyAltP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
      // public <T extends ezvcard.property.VCardProperty & ezvcard.property.HasAltId> java.util.List<T> ezvcard.VCard.setPropertyAlt(java.lang.Class<T>,java.util.Collection<T>)
      setPropertyAltA(
        arg0: object_t,
        arg1: object_t,
        cb: Callback<object_t>
      ): void;
      setPropertyAlt(arg0: object_t, arg1: object_t): object_t;
      setPropertyAltP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public ezvcard.property.Revision ezvcard.VCard.setRevision(java.util.Date)
      setRevisionA(arg0: object_t, cb: Callback<Java.Revision>): void;
      setRevision(arg0: object_t): Java.Revision;
      setRevisionP(arg0: object_t): Promise<Java.Revision>;
      // public void ezvcard.VCard.setRevision(ezvcard.property.Revision)
      setRevisionA(arg0: Java.Revision, cb: Callback<void>): void;
      setRevision(arg0: Java.Revision): void;
      setRevisionP(arg0: Java.Revision): Promise<void>;
      // public ezvcard.property.SortString ezvcard.VCard.setSortString(java.lang.String)
      setSortStringA(arg0: string_t, cb: Callback<object_t>): void;
      setSortString(arg0: string_t): object_t;
      setSortStringP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.setSortString(ezvcard.property.SortString)
      setSortStringA(arg0: object_t, cb: Callback<void>): void;
      setSortString(arg0: object_t): void;
      setSortStringP(arg0: object_t): Promise<void>;
      // public ezvcard.property.SourceDisplayText ezvcard.VCard.setSourceDisplayText(java.lang.String)
      setSourceDisplayTextA(arg0: string_t, cb: Callback<object_t>): void;
      setSourceDisplayText(arg0: string_t): object_t;
      setSourceDisplayTextP(arg0: string_t): Promise<object_t>;
      // public void ezvcard.VCard.setSourceDisplayText(ezvcard.property.SourceDisplayText)
      setSourceDisplayTextA(arg0: object_t, cb: Callback<void>): void;
      setSourceDisplayText(arg0: object_t): void;
      setSourceDisplayTextP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.setStructuredName(ezvcard.property.StructuredName)
      setStructuredNameA(arg0: Java.StructuredName, cb: Callback<void>): void;
      setStructuredName(arg0: Java.StructuredName): void;
      setStructuredNameP(arg0: Java.StructuredName): Promise<void>;
      // public void ezvcard.VCard.setStructuredNameAlt(ezvcard.property.StructuredName...)
      setStructuredNameAltA(
        arg0: array_t<Java.StructuredName>,
        cb: Callback<void>
      ): void;
      setStructuredNameAlt(...arg0: Java.StructuredName[]): void;
      setStructuredNameAlt(arg0: array_t<Java.StructuredName>): void;
      setStructuredNameAltP(...arg0: Java.StructuredName[]): Promise<void>;
      setStructuredNameAltP(arg0: array_t<Java.StructuredName>): Promise<void>;
      // public void ezvcard.VCard.setTimezone(ezvcard.property.Timezone)
      setTimezoneA(arg0: Java.Timezone, cb: Callback<void>): void;
      setTimezone(arg0: Java.Timezone): void;
      setTimezoneP(arg0: Java.Timezone): Promise<void>;
      // public void ezvcard.VCard.setTimezoneAlt(ezvcard.property.Timezone...)
      setTimezoneAltA(arg0: array_t<Java.Timezone>, cb: Callback<void>): void;
      setTimezoneAlt(...arg0: Java.Timezone[]): void;
      setTimezoneAlt(arg0: array_t<Java.Timezone>): void;
      setTimezoneAltP(...arg0: Java.Timezone[]): Promise<void>;
      setTimezoneAltP(arg0: array_t<Java.Timezone>): Promise<void>;
      // public void ezvcard.VCard.setUid(ezvcard.property.Uid)
      setUidA(arg0: Java.Uid, cb: Callback<void>): void;
      setUid(arg0: Java.Uid): void;
      setUidP(arg0: Java.Uid): Promise<void>;
      // public void ezvcard.VCard.setVersion(ezvcard.VCardVersion)
      setVersionA(arg0: Java.VCardVersion, cb: Callback<void>): void;
      setVersion(arg0: Java.VCardVersion): void;
      setVersionP(arg0: Java.VCardVersion): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliteratorA(cb: Callback<object_t>): void;
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public ezvcard.ValidationWarnings ezvcard.VCard.validate(ezvcard.VCardVersion)
      validateA(
        arg0: Java.VCardVersion,
        cb: Callback<Java.ValidationWarnings>
      ): void;
      validate(arg0: Java.VCardVersion): Java.ValidationWarnings;
      validateP(arg0: Java.VCardVersion): Promise<Java.ValidationWarnings>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
      // public void ezvcard.VCard.write(java.io.OutputStream) throws java.io.IOException
      writeA(arg0: object_t, cb: Callback<void>): void;
      write(arg0: object_t): void;
      writeP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.write(java.io.Writer) throws java.io.IOException
      writeA(arg0: object_t, cb: Callback<void>): void;
      write(arg0: object_t): void;
      writeP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.write(java.io.File) throws java.io.IOException
      writeA(arg0: object_t, cb: Callback<void>): void;
      write(arg0: object_t): void;
      writeP(arg0: object_t): Promise<void>;
      // public java.lang.String ezvcard.VCard.write()
      writeA(cb: Callback<string>): void;
      write(): string;
      writeP(): Promise<string>;
      // public void ezvcard.VCard.writeHtml(java.io.OutputStream) throws java.io.IOException
      writeHtmlA(arg0: object_t, cb: Callback<void>): void;
      writeHtml(arg0: object_t): void;
      writeHtmlP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.writeHtml(java.io.Writer) throws java.io.IOException
      writeHtmlA(arg0: object_t, cb: Callback<void>): void;
      writeHtml(arg0: object_t): void;
      writeHtmlP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.writeHtml(java.io.File) throws java.io.IOException
      writeHtmlA(arg0: object_t, cb: Callback<void>): void;
      writeHtml(arg0: object_t): void;
      writeHtmlP(arg0: object_t): Promise<void>;
      // public java.lang.String ezvcard.VCard.writeHtml()
      writeHtmlA(cb: Callback<string>): void;
      writeHtml(): string;
      writeHtmlP(): Promise<string>;
      // public void ezvcard.VCard.writeJson(java.io.OutputStream) throws java.io.IOException
      writeJsonA(arg0: object_t, cb: Callback<void>): void;
      writeJson(arg0: object_t): void;
      writeJsonP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.writeJson(java.io.Writer) throws java.io.IOException
      writeJsonA(arg0: object_t, cb: Callback<void>): void;
      writeJson(arg0: object_t): void;
      writeJsonP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.writeJson(java.io.File) throws java.io.IOException
      writeJsonA(arg0: object_t, cb: Callback<void>): void;
      writeJson(arg0: object_t): void;
      writeJsonP(arg0: object_t): Promise<void>;
      // public java.lang.String ezvcard.VCard.writeJson()
      writeJsonA(cb: Callback<string>): void;
      writeJson(): string;
      writeJsonP(): Promise<string>;
      // public void ezvcard.VCard.writeXml(java.io.OutputStream) throws javax.xml.transform.TransformerException
      writeXmlA(arg0: object_t, cb: Callback<void>): void;
      writeXml(arg0: object_t): void;
      writeXmlP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.writeXml(java.io.Writer) throws javax.xml.transform.TransformerException
      writeXmlA(arg0: object_t, cb: Callback<void>): void;
      writeXml(arg0: object_t): void;
      writeXmlP(arg0: object_t): Promise<void>;
      // public void ezvcard.VCard.writeXml(java.io.File) throws java.io.IOException,javax.xml.transform.TransformerException
      writeXmlA(arg0: object_t, cb: Callback<void>): void;
      writeXml(arg0: object_t): void;
      writeXmlP(arg0: object_t): Promise<void>;
      // public java.lang.String ezvcard.VCard.writeXml()
      writeXmlA(cb: Callback<string>): void;
      writeXml(): string;
      writeXmlP(): Promise<string>;
    }
    export module VCard {
      export interface Static {
        class: Java.Object;
        new (arg0: Java.VCardVersion): ezvcard.VCard;
        new (arg0: Java.VCard): ezvcard.VCard;
        new (): ezvcard.VCard;
      }
    }
  }

  export module ezvcard {
    export interface VCardDataType extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String ezvcard.VCardDataType.getName()
      getNameA(cb: Callback<string>): void;
      getName(): string;
      getNameP(): Promise<string>;
      // public ezvcard.VCardVersion[] ezvcard.VCardDataType.getSupportedVersions()
      getSupportedVersionsA(cb: Callback<Java.VCardVersion[]>): void;
      getSupportedVersions(): Java.VCardVersion[];
      getSupportedVersionsP(): Promise<Java.VCardVersion[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public boolean ezvcard.VCardDataType.isSupportedBy(ezvcard.VCardVersion)
      isSupportedByA(arg0: Java.VCardVersion, cb: Callback<object_t>): void;
      isSupportedBy(arg0: Java.VCardVersion): object_t;
      isSupportedByP(arg0: Java.VCardVersion): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module VCardDataType {
      export interface Static {
        URL: Java.VCardDataType;
        CONTENT_ID: Java.VCardDataType;
        BINARY: Java.VCardDataType;
        URI: Java.VCardDataType;
        TEXT: Java.VCardDataType;
        DATE: Java.VCardDataType;
        TIME: Java.VCardDataType;
        DATE_TIME: Java.VCardDataType;
        DATE_AND_OR_TIME: Java.VCardDataType;
        TIMESTAMP: Java.VCardDataType;
        BOOLEAN: Java.VCardDataType;
        INTEGER: Java.VCardDataType;
        FLOAT: Java.VCardDataType;
        UTC_OFFSET: Java.VCardDataType;
        LANGUAGE_TAG: Java.VCardDataType;
        class: Java.Object;
        // public static java.util.Collection<ezvcard.VCardDataType> ezvcard.VCardDataType.all()
        allA(cb: Callback<object_t>): void;
        all(): object_t;
        allP(): Promise<object_t>;
        // public static ezvcard.VCardDataType ezvcard.VCardDataType.find(java.lang.String)
        findA(arg0: string_t, cb: Callback<Java.VCardDataType>): void;
        find(arg0: string_t): Java.VCardDataType;
        findP(arg0: string_t): Promise<Java.VCardDataType>;
        // public static ezvcard.VCardDataType ezvcard.VCardDataType.get(java.lang.String)
        getA(arg0: string_t, cb: Callback<Java.VCardDataType>): void;
        get(arg0: string_t): Java.VCardDataType;
        getP(arg0: string_t): Promise<Java.VCardDataType>;
      }
    }
  }

  export module ezvcard {
    export interface VCardVersion extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public final java.util.Optional<java.lang.Enum$EnumDesc<E>> java.lang.Enum.describeConstable()
      describeConstableA(cb: Callback<object_t>): void;
      describeConstable(): object_t;
      describeConstableP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA(cb: Callback<object_t>): void;
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public com.github.mangstadt.vinnie.SyntaxStyle ezvcard.VCardVersion.getSyntaxStyle()
      getSyntaxStyleA(cb: Callback<object_t>): void;
      getSyntaxStyle(): object_t;
      getSyntaxStyleP(): Promise<object_t>;
      // public java.lang.String ezvcard.VCardVersion.getVersion()
      getVersionA(cb: Callback<string>): void;
      getVersion(): string;
      getVersionP(): Promise<string>;
      // public java.lang.String ezvcard.VCardVersion.getXmlNamespace()
      getXmlNamespaceA(cb: Callback<string>): void;
      getXmlNamespace(): string;
      getXmlNamespaceP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final java.lang.String java.lang.Enum.name()
      nameA(cb: Callback<string>): void;
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinalA(cb: Callback<object_t>): void;
      ordinal(): object_t;
      ordinalP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module VCardVersion {
      export interface Static {
        V2_1: Java.VCardVersion;
        V3_0: Java.VCardVersion;
        V4_0: Java.VCardVersion;
        class: Java.Object;
        // public static <T extends java.lang.Enum<T>> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: object_t, arg1: string_t, cb: Callback<object_t>): void;
        valueOf(arg0: object_t, arg1: string_t): object_t;
        valueOfP(arg0: object_t, arg1: string_t): Promise<object_t>;
        // public static ezvcard.VCardVersion ezvcard.VCardVersion.valueOf(java.lang.String)
        valueOfA(arg0: string_t, cb: Callback<Java.VCardVersion>): void;
        valueOf(arg0: string_t): Java.VCardVersion;
        valueOfP(arg0: string_t): Promise<Java.VCardVersion>;
        // public static ezvcard.VCardVersion ezvcard.VCardVersion.valueOfByStr(java.lang.String)
        valueOfByStrA(arg0: string_t, cb: Callback<Java.VCardVersion>): void;
        valueOfByStr(arg0: string_t): Java.VCardVersion;
        valueOfByStrP(arg0: string_t): Promise<Java.VCardVersion>;
        // public static ezvcard.VCardVersion ezvcard.VCardVersion.valueOfByXmlNamespace(java.lang.String)
        valueOfByXmlNamespaceA(
          arg0: string_t,
          cb: Callback<Java.VCardVersion>
        ): void;
        valueOfByXmlNamespace(arg0: string_t): Java.VCardVersion;
        valueOfByXmlNamespaceP(arg0: string_t): Promise<Java.VCardVersion>;
        // public static ezvcard.VCardVersion[] ezvcard.VCardVersion.values()
        valuesA(cb: Callback<Java.VCardVersion[]>): void;
        values(): Java.VCardVersion[];
        valuesP(): Promise<Java.VCardVersion[]>;
      }
    }
  }

  export module java.lang {
    export interface Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Object {
      export interface Static {
        class: Java.Object;
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object {
      // public char java.lang.String.charAt(int)
      charAtA(arg0: object_t, cb: Callback<object_t>): void;
      charAt(arg0: object_t): object_t;
      charAtP(arg0: object_t): Promise<object_t>;
      // public java.util.stream.IntStream java.lang.String.chars()
      charsA(cb: Callback<object_t>): void;
      chars(): object_t;
      charsP(): Promise<object_t>;
      // public int java.lang.String.codePointAt(int)
      codePointAtA(arg0: object_t, cb: Callback<object_t>): void;
      codePointAt(arg0: object_t): object_t;
      codePointAtP(arg0: object_t): Promise<object_t>;
      // public int java.lang.String.codePointBefore(int)
      codePointBeforeA(arg0: object_t, cb: Callback<object_t>): void;
      codePointBefore(arg0: object_t): object_t;
      codePointBeforeP(arg0: object_t): Promise<object_t>;
      // public int java.lang.String.codePointCount(int,int)
      codePointCountA(
        arg0: object_t,
        arg1: object_t,
        cb: Callback<object_t>
      ): void;
      codePointCount(arg0: object_t, arg1: object_t): object_t;
      codePointCountP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.util.stream.IntStream java.lang.String.codePoints()
      codePointsA(cb: Callback<object_t>): void;
      codePoints(): object_t;
      codePointsP(): Promise<object_t>;
      // public int java.lang.String.compareTo(java.lang.String)
      compareToA(arg0: string_t, cb: Callback<object_t>): void;
      compareTo(arg0: string_t): object_t;
      compareToP(arg0: string_t): Promise<object_t>;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<object_t>): void;
      compareTo(arg0: object_t): object_t;
      compareToP(arg0: object_t): Promise<object_t>;
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCaseA(arg0: string_t, cb: Callback<object_t>): void;
      compareToIgnoreCase(arg0: string_t): object_t;
      compareToIgnoreCaseP(arg0: string_t): Promise<object_t>;
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concatA(arg0: string_t, cb: Callback<string>): void;
      concat(arg0: string_t): string;
      concatP(arg0: string_t): Promise<string>;
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      containsA(arg0: object_t, cb: Callback<object_t>): void;
      contains(arg0: object_t): object_t;
      containsP(arg0: object_t): Promise<object_t>;
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEqualsA(arg0: object_t, cb: Callback<object_t>): void;
      contentEquals(arg0: object_t): object_t;
      contentEqualsP(arg0: object_t): Promise<object_t>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEqualsA(arg0: object_t, cb: Callback<object_t>): void;
      contentEquals(arg0: object_t): object_t;
      contentEqualsP(arg0: object_t): Promise<object_t>;
      // public java.util.Optional<java.lang.String> java.lang.String.describeConstable()
      describeConstableA(cb: Callback<object_t>): void;
      describeConstable(): object_t;
      describeConstableP(): Promise<object_t>;
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWithA(arg0: string_t, cb: Callback<object_t>): void;
      endsWith(arg0: string_t): object_t;
      endsWithP(arg0: string_t): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<object_t>): void;
      equals(arg0: object_t): object_t;
      equalsP(arg0: object_t): Promise<object_t>;
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCaseA(arg0: string_t, cb: Callback<object_t>): void;
      equalsIgnoreCase(arg0: string_t): object_t;
      equalsIgnoreCaseP(arg0: string_t): Promise<object_t>;
      // public java.lang.String java.lang.String.formatted(java.lang.Object...)
      formattedA(arg0: object_array_t, cb: Callback<string>): void;
      formatted(...arg0: object_t[]): string;
      formatted(arg0: object_array_t): string;
      formattedP(...arg0: object_t[]): Promise<string>;
      formattedP(arg0: object_array_t): Promise<string>;
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytesA(
        arg0: object_t,
        arg1: object_t,
        arg2: object_array_t,
        arg3: object_t,
        cb: Callback<void>
      ): void;
      getBytes(
        arg0: object_t,
        arg1: object_t,
        arg2: object_array_t,
        arg3: object_t
      ): void;
      getBytesP(
        arg0: object_t,
        arg1: object_t,
        arg2: object_array_t,
        arg3: object_t
      ): Promise<void>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytesA(arg0: object_t, cb: Callback<object_t[]>): void;
      getBytes(arg0: object_t): object_t[];
      getBytesP(arg0: object_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytesA(arg0: string_t, cb: Callback<object_t[]>): void;
      getBytes(arg0: string_t): object_t[];
      getBytesP(arg0: string_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes()
      getBytesA(cb: Callback<object_t[]>): void;
      getBytes(): object_t[];
      getBytesP(): Promise<object_t[]>;
      // public void java.lang.String.getChars(int,int,char[],int)
      getCharsA(
        arg0: object_t,
        arg1: object_t,
        arg2: object_array_t,
        arg3: object_t,
        cb: Callback<void>
      ): void;
      getChars(
        arg0: object_t,
        arg1: object_t,
        arg2: object_array_t,
        arg3: object_t
      ): void;
      getCharsP(
        arg0: object_t,
        arg1: object_t,
        arg2: object_array_t,
        arg3: object_t
      ): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA(cb: Callback<object_t>): void;
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA(cb: Callback<object_t>): void;
      hashCode(): object_t;
      hashCodeP(): Promise<object_t>;
      // public java.lang.String java.lang.String.indent(int)
      indentA(arg0: object_t, cb: Callback<string>): void;
      indent(arg0: object_t): string;
      indentP(arg0: object_t): Promise<string>;
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOfA(arg0: string_t, arg1: object_t, cb: Callback<object_t>): void;
      indexOf(arg0: string_t, arg1: object_t): object_t;
      indexOfP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public int java.lang.String.indexOf(int,int)
      indexOfA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      indexOf(arg0: object_t, arg1: object_t): object_t;
      indexOfP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOfA(arg0: string_t, cb: Callback<object_t>): void;
      indexOf(arg0: string_t): object_t;
      indexOfP(arg0: string_t): Promise<object_t>;
      // public int java.lang.String.indexOf(int)
      indexOfA(arg0: object_t, cb: Callback<object_t>): void;
      indexOf(arg0: object_t): object_t;
      indexOfP(arg0: object_t): Promise<object_t>;
      // public native java.lang.String java.lang.String.intern()
      internA(cb: Callback<string>): void;
      intern(): string;
      internP(): Promise<string>;
      // public boolean java.lang.String.isBlank()
      isBlankA(cb: Callback<object_t>): void;
      isBlank(): object_t;
      isBlankP(): Promise<object_t>;
      // public boolean java.lang.String.isEmpty()
      isEmptyA(cb: Callback<object_t>): void;
      isEmpty(): object_t;
      isEmptyP(): Promise<object_t>;
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOfA(
        arg0: string_t,
        arg1: object_t,
        cb: Callback<object_t>
      ): void;
      lastIndexOf(arg0: string_t, arg1: object_t): object_t;
      lastIndexOfP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOfA(
        arg0: object_t,
        arg1: object_t,
        cb: Callback<object_t>
      ): void;
      lastIndexOf(arg0: object_t, arg1: object_t): object_t;
      lastIndexOfP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOfA(arg0: string_t, cb: Callback<object_t>): void;
      lastIndexOf(arg0: string_t): object_t;
      lastIndexOfP(arg0: string_t): Promise<object_t>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOfA(arg0: object_t, cb: Callback<object_t>): void;
      lastIndexOf(arg0: object_t): object_t;
      lastIndexOfP(arg0: object_t): Promise<object_t>;
      // public int java.lang.String.length()
      lengthA(cb: Callback<object_t>): void;
      length(): object_t;
      lengthP(): Promise<object_t>;
      // public java.util.stream.Stream<java.lang.String> java.lang.String.lines()
      linesA(cb: Callback<object_t>): void;
      lines(): object_t;
      linesP(): Promise<object_t>;
      // public boolean java.lang.String.matches(java.lang.String)
      matchesA(arg0: string_t, cb: Callback<object_t>): void;
      matches(arg0: string_t): object_t;
      matchesP(arg0: string_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA(cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA(cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePointsA(
        arg0: object_t,
        arg1: object_t,
        cb: Callback<object_t>
      ): void;
      offsetByCodePoints(arg0: object_t, arg1: object_t): object_t;
      offsetByCodePointsP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatchesA(
        arg0: object_t,
        arg1: object_t,
        arg2: string_t,
        arg3: object_t,
        arg4: object_t,
        cb: Callback<object_t>
      ): void;
      regionMatches(
        arg0: object_t,
        arg1: object_t,
        arg2: string_t,
        arg3: object_t,
        arg4: object_t
      ): object_t;
      regionMatchesP(
        arg0: object_t,
        arg1: object_t,
        arg2: string_t,
        arg3: object_t,
        arg4: object_t
      ): Promise<object_t>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatchesA(
        arg0: object_t,
        arg1: string_t,
        arg2: object_t,
        arg3: object_t,
        cb: Callback<object_t>
      ): void;
      regionMatches(
        arg0: object_t,
        arg1: string_t,
        arg2: object_t,
        arg3: object_t
      ): object_t;
      regionMatchesP(
        arg0: object_t,
        arg1: string_t,
        arg2: object_t,
        arg3: object_t
      ): Promise<object_t>;
      // public java.lang.String java.lang.String.repeat(int)
      repeatA(arg0: object_t, cb: Callback<string>): void;
      repeat(arg0: object_t): string;
      repeatP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replace(char,char)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAllA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceAll(arg0: string_t, arg1: string_t): string;
      replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirstA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceFirst(arg0: string_t, arg1: string_t): string;
      replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.lang.String.resolveConstantDesc(java.lang.invoke.MethodHandles$Lookup)
      resolveConstantDescA(arg0: object_t, cb: Callback<string>): void;
      resolveConstantDesc(arg0: object_t): string;
      resolveConstantDescP(arg0: object_t): Promise<string>;
      // public java.lang.Object java.lang.String.resolveConstantDesc(java.lang.invoke.MethodHandles$Lookup) throws java.lang.ReflectiveOperationException
      resolveConstantDescA(arg0: object_t, cb: Callback<object_t>): void;
      resolveConstantDesc(arg0: object_t): object_t;
      resolveConstantDescP(arg0: object_t): Promise<object_t>;
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      splitA(arg0: string_t, arg1: object_t, cb: Callback<string[]>): void;
      split(arg0: string_t, arg1: object_t): string[];
      splitP(arg0: string_t, arg1: object_t): Promise<string[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      splitA(arg0: string_t, cb: Callback<string[]>): void;
      split(arg0: string_t): string[];
      splitP(arg0: string_t): Promise<string[]>;
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWithA(arg0: string_t, arg1: object_t, cb: Callback<object_t>): void;
      startsWith(arg0: string_t, arg1: object_t): object_t;
      startsWithP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWithA(arg0: string_t, cb: Callback<object_t>): void;
      startsWith(arg0: string_t): object_t;
      startsWithP(arg0: string_t): Promise<object_t>;
      // public java.lang.String java.lang.String.strip()
      stripA(cb: Callback<string>): void;
      strip(): string;
      stripP(): Promise<string>;
      // public java.lang.String java.lang.String.stripIndent()
      stripIndentA(cb: Callback<string>): void;
      stripIndent(): string;
      stripIndentP(): Promise<string>;
      // public java.lang.String java.lang.String.stripLeading()
      stripLeadingA(cb: Callback<string>): void;
      stripLeading(): string;
      stripLeadingP(): Promise<string>;
      // public java.lang.String java.lang.String.stripTrailing()
      stripTrailingA(cb: Callback<string>): void;
      stripTrailing(): string;
      stripTrailingP(): Promise<string>;
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequenceA(
        arg0: object_t,
        arg1: object_t,
        cb: Callback<object_t>
      ): void;
      subSequence(arg0: object_t, arg1: object_t): object_t;
      subSequenceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.String java.lang.String.substring(int,int)
      substringA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
      substring(arg0: object_t, arg1: object_t): string;
      substringP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.substring(int)
      substringA(arg0: object_t, cb: Callback<string>): void;
      substring(arg0: object_t): string;
      substringP(arg0: object_t): Promise<string>;
      // public char[] java.lang.String.toCharArray()
      toCharArrayA(cb: Callback<object_t[]>): void;
      toCharArray(): object_t[];
      toCharArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCaseA(arg0: object_t, cb: Callback<string>): void;
      toLowerCase(arg0: object_t): string;
      toLowerCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCaseA(cb: Callback<string>): void;
      toLowerCase(): string;
      toLowerCaseP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toStringA(cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCaseA(arg0: object_t, cb: Callback<string>): void;
      toUpperCase(arg0: object_t): string;
      toUpperCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCaseA(cb: Callback<string>): void;
      toUpperCase(): string;
      toUpperCaseP(): Promise<string>;
      // public <R> R java.lang.String.transform(java.util.function.Function<? super java.lang.String, ? extends R>)
      transformA(arg0: object_t, cb: Callback<object_t>): void;
      transform(arg0: object_t): object_t;
      transformP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.lang.String.translateEscapes()
      translateEscapesA(cb: Callback<string>): void;
      translateEscapes(): string;
      translateEscapesP(): Promise<string>;
      // public java.lang.String java.lang.String.trim()
      trimA(cb: Callback<string>): void;
      trim(): string;
      trimP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      wait(arg0: object_t, arg1: object_t): void;
      waitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: object_t, cb: Callback<void>): void;
      wait(arg0: object_t): void;
      waitP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA(cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module String {
      export interface Static {
        CASE_INSENSITIVE_ORDER: object_t;
        class: Java.Object;
        new (
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t,
          arg3: object_t
        ): java.lang.String;
        new (
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t,
          arg3: string_t
        ): java.lang.String;
        new (
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t,
          arg3: object_t
        ): java.lang.String;
        new (
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t
        ): java.lang.String;
        new (
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t
        ): java.lang.String;
        new (
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t
        ): java.lang.String;
        new (arg0: object_array_t, arg1: object_t): java.lang.String;
        new (arg0: object_array_t, arg1: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOfA(
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t,
          cb: Callback<string>
        ): void;
        copyValueOf(
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t
        ): string;
        copyValueOfP(
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t
        ): Promise<string>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOfA(arg0: object_array_t, cb: Callback<string>): void;
        copyValueOf(arg0: object_array_t): string;
        copyValueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        formatA(
          arg0: object_t,
          arg1: string_t,
          arg2: object_array_t,
          cb: Callback<string>
        ): void;
        format(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
        format(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
        formatP(
          arg0: object_t,
          arg1: string_t,
          ...arg2: object_t[]
        ): Promise<string>;
        formatP(
          arg0: object_t,
          arg1: string_t,
          arg2: object_array_t
        ): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        formatA(
          arg0: string_t,
          arg1: object_array_t,
          cb: Callback<string>
        ): void;
        format(arg0: string_t, ...arg1: object_t[]): string;
        format(arg0: string_t, arg1: object_array_t): string;
        formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
        formatP(arg0: string_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        joinA(arg0: object_t, arg1: object_array_t, cb: Callback<string>): void;
        join(arg0: object_t, ...arg1: object_t[]): string;
        join(arg0: object_t, arg1: object_array_t): string;
        joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
        joinP(arg0: object_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        joinA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
        join(arg0: object_t, arg1: object_t): string;
        joinP(arg0: object_t, arg1: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOfA(
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t,
          cb: Callback<string>
        ): void;
        valueOf(arg0: object_array_t, arg1: object_t, arg2: object_t): string;
        valueOfP(
          arg0: object_array_t,
          arg1: object_t,
          arg2: object_t
        ): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOfA(arg0: object_array_t, cb: Callback<string>): void;
        valueOf(arg0: object_array_t): string;
        valueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
      }
    }
  }

  // #### `function smellsLikeJavaObject(e: any)`
  // Returns true if the obj 'smells' like a Java object.
  // This is a light-weight test that will return false when `e` is clearly not a Java object,
  // but it may have false positives. To be certain, use `isJavaObject(e)` or `instanceOf(e, classname)` instead.
  function smellsLikeJavaObject(e: any): boolean {
    return _.isObject(e) && !_.isArray(e);
  }

  // #### `function isJavaObject(e: any)`
  // Returns true if the obj is a Java object.
  // Useful for determining the runtime type of object_t returned by many java methods.
  export function isJavaObject(e: any): boolean {
    return smellsLikeJavaObject(e) && _java.instanceOf(e, 'java.lang.Object');
  }
} // module Java
